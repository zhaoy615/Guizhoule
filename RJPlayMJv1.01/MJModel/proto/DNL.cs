// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class DNL {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_SendLogin__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SendLogin, global::SendLogin.Builder> internal__static_SendLogin__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnLogin__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnLogin, global::ReturnLogin.Builder> internal__static_ReturnLogin__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_MaintainHeartbeat__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::MaintainHeartbeat, global::MaintainHeartbeat.Builder> internal__static_MaintainHeartbeat__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnServerIP__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnServerIP, global::ReturnServerIP.Builder> internal__static_ReturnServerIP__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SendAddServer__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SendAddServer, global::SendAddServer.Builder> internal__static_SendAddServer__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnAddServer__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnAddServer, global::ReturnAddServer.Builder> internal__static_ReturnAddServer__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SendGameOperation__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SendGameOperation, global::SendGameOperation.Builder> internal__static_SendGameOperation__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SendCreateRoom__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SendCreateRoom, global::SendCreateRoom.Builder> internal__static_SendCreateRoom__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnCreateRoom__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnCreateRoom, global::ReturnCreateRoom.Builder> internal__static_ReturnCreateRoom__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_Userinfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::Userinfo, global::Userinfo.Builder> internal__static_Userinfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SendAddRoom__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SendAddRoom, global::SendAddRoom.Builder> internal__static_SendAddRoom__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnAddRoom__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnAddRoom, global::ReturnAddRoom.Builder> internal__static_ReturnAddRoom__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnUserInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnUserInfo, global::ReturnUserInfo.Builder> internal__static_ReturnUserInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_MaJiang__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::MaJiang, global::MaJiang.Builder> internal__static_MaJiang__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnStartGame__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnStartGame, global::ReturnStartGame.Builder> internal__static_ReturnStartGame__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SendStart__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SendStart, global::SendStart.Builder> internal__static_SendStart__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnStart__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnStart, global::ReturnStart.Builder> internal__static_ReturnStart__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnTP__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnTP, global::ReturnTP.Builder> internal__static_ReturnTP__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnTTATH__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnTTATH, global::ReturnTTATH.Builder> internal__static_ReturnTTATH__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SendMP__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SendMP, global::SendMP.Builder> internal__static_SendMP__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnMP__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnMP, global::ReturnMP.Builder> internal__static_ReturnMP__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SendCP__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SendCP, global::SendCP.Builder> internal__static_SendCP__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnAll__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnAll, global::ReturnAll.Builder> internal__static_ReturnAll__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnMsg__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnMsg, global::ReturnMsg.Builder> internal__static_ReturnMsg__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SendPeng__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SendPeng, global::SendPeng.Builder> internal__static_SendPeng__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnPeng__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnPeng, global::ReturnPeng.Builder> internal__static_ReturnPeng__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SendBT__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SendBT, global::SendBT.Builder> internal__static_SendBT__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnBTMsg__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnBTMsg, global::ReturnBTMsg.Builder> internal__static_ReturnBTMsg__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SendJS__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SendJS, global::SendJS.Builder> internal__static_SendJS__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnJSMsg__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnJSMsg, global::ReturnJSMsg.Builder> internal__static_ReturnJSMsg__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SendJSIdea__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SendJSIdea, global::SendJSIdea.Builder> internal__static_SendJSIdea__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnJSByOnew__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnJSByOnew, global::ReturnJSByOnew.Builder> internal__static_ReturnJSByOnew__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnAllIdea__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnAllIdea, global::ReturnAllIdea.Builder> internal__static_ReturnAllIdea__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SendRemove__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SendRemove, global::SendRemove.Builder> internal__static_SendRemove__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnRemoveUser__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnRemoveUser, global::ReturnRemoveUser.Builder> internal__static_ReturnRemoveUser__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SendQYM__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SendQYM, global::SendQYM.Builder> internal__static_SendQYM__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnQYM__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnQYM, global::ReturnQYM.Builder> internal__static_ReturnQYM__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnAYM__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnAYM, global::ReturnAYM.Builder> internal__static_ReturnAYM__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnTT__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnTT, global::ReturnTT.Builder> internal__static_ReturnTT__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_UserAJS__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::UserAJS, global::UserAJS.Builder> internal__static_UserAJS__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnDJS__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnDJS, global::ReturnDJS.Builder> internal__static_ReturnDJS__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnHByType__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnHByType, global::ReturnHByType.Builder> internal__static_ReturnHByType__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SendHu__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SendHu, global::SendHu.Builder> internal__static_SendHu__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_DuoXiangHu__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::DuoXiangHu, global::DuoXiangHu.Builder> internal__static_DuoXiangHu__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SendGetGame__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SendGetGame, global::SendGetGame.Builder> internal__static_SendGetGame__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnZR__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnZR, global::ReturnZR.Builder> internal__static_ReturnZR__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SendConnData__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SendConnData, global::SendConnData.Builder> internal__static_SendConnData__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnZhuang__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnZhuang, global::ReturnZhuang.Builder> internal__static_ReturnZhuang__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnHType__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnHType, global::ReturnHType.Builder> internal__static_ReturnHType__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_GangMSG__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::GangMSG, global::GangMSG.Builder> internal__static_GangMSG__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnGang__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnGang, global::ReturnGang.Builder> internal__static_ReturnGang__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnRecon__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnRecon, global::ReturnRecon.Builder> internal__static_ReturnRecon__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_UserShou__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::UserShou, global::UserShou.Builder> internal__static_UserShou__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_UserPeng__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::UserPeng, global::UserPeng.Builder> internal__static_UserPeng__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_UserGang__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::UserGang, global::UserGang.Builder> internal__static_UserGang__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_UserChu__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::UserChu, global::UserChu.Builder> internal__static_UserChu__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_JpConn__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::JpConn, global::JpConn.Builder> internal__static_JpConn__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnConnData__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnConnData, global::ReturnConnData.Builder> internal__static_ReturnConnData__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnMsgList__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnMsgList, global::ReturnMsgList.Builder> internal__static_ReturnMsgList__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnRoomMsg__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnRoomMsg, global::ReturnRoomMsg.Builder> internal__static_ReturnRoomMsg__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnHyUser__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnHyUser, global::ReturnHyUser.Builder> internal__static_ReturnHyUser__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnFJ__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnFJ, global::ReturnFJ.Builder> internal__static_ReturnFJ__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_JiPaiF__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::JiPaiF, global::JiPaiF.Builder> internal__static_JiPaiF__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_Dou__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::Dou, global::Dou.Builder> internal__static_Dou__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_UserJS__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::UserJS, global::UserJS.Builder> internal__static_UserJS__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnJS__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnJS, global::ReturnJS.Builder> internal__static_ReturnJS__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnPaiCount__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnPaiCount, global::ReturnPaiCount.Builder> internal__static_ReturnPaiCount__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_UserSPai__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::UserSPai, global::UserSPai.Builder> internal__static_UserSPai__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnUserSPai__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnUserSPai, global::ReturnUserSPai.Builder> internal__static_ReturnUserSPai__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SendAddRoomOne__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SendAddRoomOne, global::SendAddRoomOne.Builder> internal__static_SendAddRoomOne__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnRoomAdd__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnRoomAdd, global::ReturnRoomAdd.Builder> internal__static_ReturnRoomAdd__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnDis__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnDis, global::ReturnDis.Builder> internal__static_ReturnDis__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnIsJ__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnIsJ, global::ReturnIsJ.Builder> internal__static_ReturnIsJ__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnIPSame__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnIPSame, global::ReturnIPSame.Builder> internal__static_ReturnIPSame__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SendConfirmationStarts__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SendConfirmationStarts, global::SendConfirmationStarts.Builder> internal__static_SendConfirmationStarts__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SendAnnouncement__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SendAnnouncement, global::SendAnnouncement.Builder> internal__static_SendAnnouncement__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnAnnouncement__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnAnnouncement, global::ReturnAnnouncement.Builder> internal__static_ReturnAnnouncement__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_AnnouncementInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::AnnouncementInfo, global::AnnouncementInfo.Builder> internal__static_AnnouncementInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SendVoice__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SendVoice, global::SendVoice.Builder> internal__static_SendVoice__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnVoice__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnVoice, global::ReturnVoice.Builder> internal__static_ReturnVoice__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ConnectionStatusInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ConnectionStatusInfo, global::ConnectionStatusInfo.Builder> internal__static_ConnectionStatusInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReturnConnectionStatus__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReturnConnectionStatus, global::ReturnConnectionStatus.Builder> internal__static_ReturnConnectionStatus__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SendConnectionStatus__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SendConnectionStatus, global::SendConnectionStatus.Builder> internal__static_SendConnectionStatus__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static DNL() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CglETkwucHJvdG8ijgEKCVNlbmRMb2dpbhIOCgZvcGVuaWQYASACKAkSEAoI", 
          "bmlja25hbWUYAiACKAkSCwoDc2V4GAMgAigJEhAKCHByb3ZpbmNlGAQgAigJ", 
          "EgwKBGNpdHkYBSACKAkSDwoHaGVhZGltZxgGIAIoCRIPCgd1bmlvbmlkGAcg", 
          "AigJEhAKCExhdGl0dWRlGAggAigJIkYKC1JldHVybkxvZ2luEhEKCWxvZ2lu", 
          "c3RhdBgBIAIoBRIOCgZVc2VySUQYAiACKAMSFAoMVXNlclJvb21DYXJkGAMg", 
          "AigDIjIKEU1haW50YWluSGVhcnRiZWF0Eg0KBXN0YXRlGAEgAigFEg4KBm9w", 
          "ZW5pZBgCIAIoCSJKCg5SZXR1cm5TZXJ2ZXJJUBIKCgJpcBgBIAIoCRIMCgRw", 
          "b3J0GAIgAigJEg4KBlN0YXR1cxgDIAIoBRIOCgZSb29tSUQYBCABKAkiMAoN", 
          "U2VuZEFkZFNlcnZlchIOCgZvcGVuaWQYASACKAkSDwoHdW5pb25pZBgCIAIo", 
          "CSIhCg9SZXR1cm5BZGRTZXJ2ZXISDgoGc3RhdHVzGAEgAigFIlcKEVNlbmRH", 
          "YW1lT3BlcmF0aW9uEg4KBm9wZW5pZBgBIAIoCRIPCgd1bmlvbmlkGAIgAigJ", 
          "EhEKCU9wZXJhdGlvbhgDIAIoBRIOCgZSb29tSUQYBCABKAkizAEKDlNlbmRD", 
          "cmVhdGVSb29tEg4KBm9wZW5pZBgBIAIoCRIOCgZpc193Z2oYAiACKAUSEgoK", 
          "aXNfeGlucWlqaRgDIAIoBRIVCg1pc19zaGFuZ3hpYWppGAQgAigFEhAKCGlz", 
          "X2JlbmppGAUgAigFEhMKC2lzX3lpa291c2FuGAYgAigFEhAKCHJvb21fcGVv", 
          "GAcgASgFEg0KBWNvdW50GAggAigFEhUKDWlzX2xpYW56aHVhbmcYCSACKAUS", 
          "EAoITGF0aXR1ZGUYCiACKAkiPwoQUmV0dXJuQ3JlYXRlUm9vbRIOCgZyb29t", 
          "SUQYASACKAUSGwoIdXNlcmluZm8YAiACKAsyCS5Vc2VyaW5mbyK6AQoIVXNl", 
          "cmluZm8SDgoGb3BlbmlkGAEgAigJEhAKCG5pY2tuYW1lGAIgAigJEg8KB2hl", 
          "YWRpbWcYAyACKAkSCwoDc2V4GAQgAigFEhEKCXVzZXJfYmVhbhgFIAIoBRIR", 
          "Cgl1c2VyX2dvbGQYBiACKAUSDwoHdXNlcl9GVxgHIAIoBRIOCgZVc2VySUQY", 
          "CCACKAMSDgoGVXNlcklQGAkgASgJEhcKD0N1bXVsYXRpdmVTY29yZRgKIAEo", 
          "BSI/CgtTZW5kQWRkUm9vbRIOCgZyb29tSUQYASACKAUSDgoGb3BlbmlkGAIg", 
          "AigJEhAKCExhdGl0dWRlGAMgAigJIjsKDVJldHVybkFkZFJvb20SDQoFc3Rh", 
          "dGUYASACKAUSGwoIdXNlcmluZm8YAiADKAsyCS5Vc2VyaW5mbyItCg5SZXR1", 
          "cm5Vc2VySW5mbxIbCgh1c2VyaW5mbxgBIAMoCzIJLlVzZXJpbmZvIicKB01h", 
          "SmlhbmcSDQoFUGFpSUQYASACKAUSDQoFUGFpSFMYAiACKAUiOAoPUmV0dXJu", 
          "U3RhcnRHYW1lEhQKAm1qGAEgAygLMgguTWFKaWFuZxIPCgdjaHV1c2VyGAIg", 
          "AigFIisKCVNlbmRTdGFydBIOCgZvcGVuaWQYASACKAkSDgoGcm9vbWlkGAIg", 
          "AigFIhwKC1JldHVyblN0YXJ0Eg0KBXN0YXJ0GAEgAigFIiAKCFJldHVyblRQ", 
          "EhQKAm1qGAEgAygLMgguTWFKaWFuZyIcCgtSZXR1cm5UVEFUSBINCgVzdGF0", 
          "ZRgBIAIoBSI3CgZTZW5kTVASDgoGb3BlbmlkGAEgAigJEg4KBnJvb21pZBgC", 
          "IAIoBRINCgVtVHlwZRgDIAEoBSI6CghSZXR1cm5NUBIUCgJtahgBIAIoCzII", 
          "Lk1hSmlhbmcSDAoEZ2FuZxgCIAEoBRIKCgJodRgDIAEoBSJMCgZTZW5kQ1AS", 
          "DgoGb3BlbmlkGAEgAigJEg4KBnJvb21pZBgCIAIoBRIUCgJtahgDIAIoCzII", 
          "Lk1hSmlhbmcSDAoEdHlwZRgEIAIoBSJwCglSZXR1cm5BbGwSDAoEcGVuZxgB", 
          "IAEoBRIMCgRnYW5nGAIgASgFEgoKAmh1GAMgASgFEgoKAm1vGAQgASgFEhQK", 
          "Am1qGAUgASgLMgguTWFKaWFuZxIKCgJmdxgGIAEoBRINCgVtVHlwZRgHIAEo", 
          "BSI6CglSZXR1cm5Nc2cSCwoDbXNnGAEgASgJEhQKAm1qGAIgASgLMgguTWFK", 
          "aWFuZxIKCgJGVxgDIAEoBSJ5CghTZW5kUGVuZxINCgV0eXBlcxgBIAIoBRIN", 
          "CgVzdGF0ZRgCIAIoBRIOCgZvcGVuaWQYAyACKAkSDgoGcm9vbWlkGAQgAigF", 
          "EgoKAkZXGAUgAigFEhQKAm1qGAYgASgLMgguTWFKaWFuZxINCgVHdHlwZRgH", 
          "IAEoCSJZCgpSZXR1cm5QZW5nEg0KBXN0YXRlGAEgAigFEhQKAm1qGAIgASgL", 
          "MgguTWFKaWFuZxIKCgJmdxgDIAEoBRILCgNQZncYBCABKAUSDQoFR3R5cGUY", 
          "BSABKAkiTAoGU2VuZEJUEg4KBm9wZW5pZBgBIAIoCRIMCgR0eXBlGAIgAigF", 
          "Eg4KBnJvb21JRBgDIAIoBRIUCgJtahgEIAIoCzIILk1hSmlhbmciGQoLUmV0", 
          "dXJuQlRNc2cSCgoCZncYASACKAUiKAoGU2VuZEpTEg4KBm9wZW5pZBgBIAIo", 
          "CRIOCgZyb29taWQYAiACKAUiKwoLUmV0dXJuSlNNc2cSEAoITmlja05hbWUY", 
          "ASACKAkSCgoCZncYAiACKAUiOwoKU2VuZEpTSWRlYRIOCgZyb29taWQYASAC", 
          "KAUSDgoGb3BlbmlkGAIgAigJEg0KBXN0YXRlGAMgAigFIj0KDlJldHVybkpT", 
          "QnlPbmV3EhAKCE5pY2tOYW1lGAEgAigJEg0KBXN0YXRlGAIgAigFEgoKAmZ3", 
          "GAMgAigFIjMKDVJldHVybkFsbElkZWESDQoFc3RhdGUYASACKAUSEwoLTWVz", 
          "c2dhZVR5cGUYAiACKAUiLAoKU2VuZFJlbW92ZRIOCgZvcGVuaWQYASACKAkS", 
          "DgoGUm9vbUlEGAIgAigFIjIKEFJldHVyblJlbW92ZVVzZXISDgoGb3Blbmlk", 
          "GAEgAigJEg4KBnN0YXR1cxgCIAIoBSInCgdTZW5kUVlNEgwKBHR5cGUYASAC", 
          "KAUSDgoGb3BlbmlkGAIgAigJIiUKCVJldHVyblFZTRIKCgJmdxgBIAIoBRIM", 
          "CgR0eXBlGAIgAigFIiMKCVJldHVybkFZTRIWCgJRUBgBIAMoCzIKLlJldHVy", 
          "blFZTSIWCghSZXR1cm5UVBIKCgJmdxgBIAIoBSJ7CgdVc2VyQUpTEhcKBHVz", 
          "ZXIYASACKAsyCS5Vc2VyaW5mbxIMCgR6aW1vGAIgAigFEg8KB2RpYW5wYW8Y", 
          "AyACKAUSDQoFYW5kb3UYBCACKAUSDAoETWRvdRgFIAIoBRIMCgRaZG91GAYg", 
          "AigFEg0KBVNjYXJlGAcgAigFIjQKCVJldHVybkRKUxIYCgZ1c2VyanMYASAD", 
          "KAsyCC5Vc2VyQUpTEg0KBXN0YXRlGAIgAigFIk0KDVJldHVybkhCeVR5cGUS", 
          "CwoDRldaGAEgAigFEgwKBHR5cGUYAiACKAUSCwoDRldCGAMgASgFEhQKAk1K", 
          "GAQgAigLMgguTWFKaWFuZyKDAQoGU2VuZEh1EgsKA0ZXWhgBIAIoBRIMCgR0", 
          "eXBlGAIgAigFEgsKA0ZXQhgDIAEoBRIUCgJNShgEIAIoCzIILk1hSmlhbmcS", 
          "DgoGb3BlbmlkGAUgAigJEg4KBnJvb21pZBgGIAIoBRIbCgZEWEluZm8YByAD", 
          "KAsyCy5EdW9YaWFuZ0h1IioKCkR1b1hpYW5nSHUSDAoERFhGVxgBIAIoBRIO", 
          "CgZEWFR5cGUYAiACKAUiKgoLU2VuZEdldEdhbWUSDwoHcm9vbV9JRBgBIAIo", 
          "BRIKCgJmdxgCIAIoBSI2CghSZXR1cm5aUhINCgVndHlwZRgBIAIoBRIMCgR6", 
          "cmZ3GAIgAigFEg0KBWR6cmZ3GAMgAigFIi4KDFNlbmRDb25uRGF0YRIOCgZv", 
          "cGVuaWQYASACKAkSDgoGUm9vbUlEGAIgAigFIi0KDFJldHVyblpodWFuZxIO", 
          "CgZ6aHVhbmcYASACKAUSDQoFc2VpemkYAiACKAkiSwoLUmV0dXJuSFR5cGUS", 
          "CwoDRldaGAEgAigFEgwKBHR5cGUYAiACKAUSCwoDRldCGAMgASgFEhQKAk1K", 
          "GAQgAigLMgguTWFKaWFuZyI5CgdHYW5nTVNHEgoKAmZ3GAEgAigFEgwKBFR5", 
          "cGUYAiACKAUSFAoCbWoYAyACKAsyCC5NYUppYW5nIiQKClJldHVybkdhbmcS", 
          "FgoEZ2FuZxgBIAMoCzIILkdhbmdNU0ciHAoLUmV0dXJuUmVjb24SDQoFc3Rh", 
          "dGUYASACKAUiewoIVXNlclNob3USCgoCRlcYASACKAUSFAoCbWoYAiADKAsy", 
          "CC5NYUppYW5nEg4KBlBjb3VudBgDIAIoBRILCgNRWU0YBCACKAUSEAoIVGlh", 
          "bnRpbmcYBSACKAUSDwoHQmFvdGluZxgGIAIoBRINCgVTY2FyZRgHIAIoBSIs", 
          "CghVc2VyUGVuZxIKCgJGVxgBIAIoBRIUCgJtahgCIAMoCzIILk1hSmlhbmci", 
          "JAoIVXNlckdhbmcSCgoCRlcYASACKAUSDAoEZ2FuZxgCIAIoCSIrCgdVc2Vy", 
          "Q2h1EgoKAkZXGAEgAigFEhQKAm1qGAIgAygLMgguTWFKaWFuZyIuCgZKcENv", 
          "bm4SCwoDQ0ZKGAEgASgFEgsKA1dHShgCIAEoBRIKCgJGVxgDIAIoBSKSAwoO", 
          "UmV0dXJuQ29ubkRhdGESGgoHc2hvdXBhaRgBIAMoCzIJLlVzZXJTaG91EhcK", 
          "BHBlbmcYAiADKAsyCS5Vc2VyUGVuZxIXCgRnYW5nGAMgAygLMgkuVXNlckdh", 
          "bmcSFQoDY2h1GAQgAygLMgguVXNlckNodRIOCgZyb29tSUQYBSACKAUSEwoC", 
          "anAYBiADKAsyBy5KcENvbm4SHwoHbWVzc2FnZRgHIAIoCzIOLlJldHVyblJv", 
          "b21Nc2cSHQoGaHlVc2VyGAggAigLMg0uUmV0dXJuSHlVc2VyEiEKCHVzZXJJ", 
          "bmZvGAkgAigLMg8uUmV0dXJuVXNlckluZm8SFQoCdHAYCiABKAsyCS5SZXR1", 
          "cm5UUBIdCgZ6aHVhbmcYCyACKAsyDS5SZXR1cm5aaHVhbmcSEAoIU2VuZERh", 
          "dGEYDCADKAwSGgoITGFzdE1vbWoYDSABKAsyCC5NYUppYW5nEhsKCUxhc3RD", 
          "aHVtahgOIAEoCzIILk1hSmlhbmcSEgoKR2FtZU51bWJlchgPIAIoBSIcCg1S", 
          "ZXR1cm5Nc2dMaXN0EgsKA21zZxgBIAMoDCKpAQoNUmV0dXJuUm9vbU1zZxIO", 
          "CgZpc193Z2oYASACKAUSEgoKaXNfeGlucWlqaRgCIAIoBRIVCg1pc19zaGFu", 
          "Z3hpYWppGAMgAigFEhAKCGlzX2JlbmppGAQgAigFEhMKC2lzX3lpa291c2Fu", 
          "GAUgAigFEhAKCHJvb21fcGVvGAYgASgFEg0KBWNvdW50GAcgAigFEhUKDWlz", 
          "X2xpYW56aHVhbmcYCCACKAUiPAoMUmV0dXJuSHlVc2VyEgoKAmZ3GAEgAigF", 
          "EgoKAmN6GAIgAigJEhQKAm1qGAMgASgLMgguTWFKaWFuZyIWCghSZXR1cm5G", 
          "ShIKCgJIUxgBIAIoBSI0CgZKaVBhaUYSDQoFUGFpSFMYASABKAUSDQoFQ291", 
          "bnQYAiABKAUSDAoEdHlwZRgDIAEoBSIiCgNEb3USDAoEdHlwZRgBIAEoBRIN", 
          "CgVDb3VudBgCIAEoBSKYAQoGVXNlckpTEhsKCHVzZXJpbmZvGAEgAigLMgku", 
          "VXNlcmluZm8SEwoCanAYAiADKAsyBy5KaVBhaUYSEAoCZGMYAyADKAsyBC5E", 
          "b3USCgoCRlMYBCACKAUSDwoHaXNfamlhbxgFIAIoBRIOCgZpc19wYW8YBiAB", 
          "KAUSDQoFZHlfZnMYByABKAUSDgoGaHVUeXBlGAggASgFIh8KCFJldHVybkpT", 
          "EhMKAmpzGAEgAygLMgcuVXNlckpTIiIKDlJldHVyblBhaUNvdW50EhAKCFBh", 
          "aUNvdW50GAEgAigFIiwKCFVzZXJTUGFpEgoKAmZ3GAEgAigFEhQKAm1qGAIg", 
          "AygLMgguTWFKaWFuZyIoCg5SZXR1cm5Vc2VyU1BhaRIWCgN1c3AYASADKAsy", 
          "CS5Vc2VyU1BhaSIwCg5TZW5kQWRkUm9vbU9uZRIOCgZvcGVuaWQYASACKAkS", 
          "DgoGUm9vbUlEGAIgAigFIh4KDVJldHVyblJvb21BZGQSDQoFU3RhcnQYASAC", 
          "KAUiJAoJUmV0dXJuRGlzEgoKAkZXGAEgAigFEgsKA2RpcxgCIAIoCSIlCglS", 
          "ZXR1cm5Jc0oSCwoDRldPGAEgAigFEgsKA0ZXVxgCIAIoBSIaCgxSZXR1cm5J", 
          "UFNhbWUSCgoCRlcYASADKAUiOAoWU2VuZENvbmZpcm1hdGlvblN0YXJ0cxIO", 
          "CgZvcGVuaWQYASACKAkSDgoGUm9vbUlEGAIgAigFIjIKEFNlbmRBbm5vdW5j", 
          "ZW1lbnQSDgoGb3BlbmlkGAEgAigJEg4KBlJvb21JRBgCIAIoBSI9ChJSZXR1", 
          "cm5Bbm5vdW5jZW1lbnQSJwoMYW5ub3VuY2VtZW50GAEgAygLMhEuQW5ub3Vu", 
          "Y2VtZW50SW5mbyIyChBBbm5vdW5jZW1lbnRJbmZvEg0KBVRpdGxlGAEgAigJ", 
          "Eg8KB0NvbnRlbnQYAiACKAkiQAoJU2VuZFZvaWNlEg4KBlJvb21JRBgBIAIo", 
          "BRIOCgZvcGVuaWQYAiACKAkSEwoLVm9pY2VOdW1iZXIYAyACKAUiLgoLUmV0", 
          "dXJuVm9pY2USCgoCRlcYASACKAUSEwoLVm9pY2VOdW1iZXIYAiACKAUiPAoU", 
          "Q29ubmVjdGlvblN0YXR1c0luZm8SCgoCRlcYASACKAUSGAoQQ29ubmVjdGlv", 
          "blN0YXR1cxgCIAIoBSJJChZSZXR1cm5Db25uZWN0aW9uU3RhdHVzEi8KEENv", 
          "bm5lY3Rpb25TdGF0dXMYASADKAsyFS5Db25uZWN0aW9uU3RhdHVzSW5mbyJA", 
          "ChRTZW5kQ29ubmVjdGlvblN0YXR1cxIOCgZvcGVuaWQYASACKAkSGAoQQ29u", 
        "bmVjdGlvblN0YXR1cxgCIAIoBQ=="));
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_SendLogin__Descriptor = Descriptor.MessageTypes[0];
      internal__static_SendLogin__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SendLogin, global::SendLogin.Builder>(internal__static_SendLogin__Descriptor,
              new string[] { "Openid", "Nickname", "Sex", "Province", "City", "Headimg", "Unionid", "Latitude", });
      internal__static_ReturnLogin__Descriptor = Descriptor.MessageTypes[1];
      internal__static_ReturnLogin__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnLogin, global::ReturnLogin.Builder>(internal__static_ReturnLogin__Descriptor,
              new string[] { "Loginstat", "UserID", "UserRoomCard", });
      internal__static_MaintainHeartbeat__Descriptor = Descriptor.MessageTypes[2];
      internal__static_MaintainHeartbeat__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::MaintainHeartbeat, global::MaintainHeartbeat.Builder>(internal__static_MaintainHeartbeat__Descriptor,
              new string[] { "State", "Openid", });
      internal__static_ReturnServerIP__Descriptor = Descriptor.MessageTypes[3];
      internal__static_ReturnServerIP__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnServerIP, global::ReturnServerIP.Builder>(internal__static_ReturnServerIP__Descriptor,
              new string[] { "Ip", "Port", "Status", "RoomID", });
      internal__static_SendAddServer__Descriptor = Descriptor.MessageTypes[4];
      internal__static_SendAddServer__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SendAddServer, global::SendAddServer.Builder>(internal__static_SendAddServer__Descriptor,
              new string[] { "Openid", "Unionid", });
      internal__static_ReturnAddServer__Descriptor = Descriptor.MessageTypes[5];
      internal__static_ReturnAddServer__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnAddServer, global::ReturnAddServer.Builder>(internal__static_ReturnAddServer__Descriptor,
              new string[] { "Status", });
      internal__static_SendGameOperation__Descriptor = Descriptor.MessageTypes[6];
      internal__static_SendGameOperation__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SendGameOperation, global::SendGameOperation.Builder>(internal__static_SendGameOperation__Descriptor,
              new string[] { "Openid", "Unionid", "Operation", "RoomID", });
      internal__static_SendCreateRoom__Descriptor = Descriptor.MessageTypes[7];
      internal__static_SendCreateRoom__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SendCreateRoom, global::SendCreateRoom.Builder>(internal__static_SendCreateRoom__Descriptor,
              new string[] { "Openid", "IsWgj", "IsXinqiji", "IsShangxiaji", "IsBenji", "IsYikousan", "RoomPeo", "Count", "IsLianzhuang", "Latitude", });
      internal__static_ReturnCreateRoom__Descriptor = Descriptor.MessageTypes[8];
      internal__static_ReturnCreateRoom__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnCreateRoom, global::ReturnCreateRoom.Builder>(internal__static_ReturnCreateRoom__Descriptor,
              new string[] { "RoomID", "Userinfo", });
      internal__static_Userinfo__Descriptor = Descriptor.MessageTypes[9];
      internal__static_Userinfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::Userinfo, global::Userinfo.Builder>(internal__static_Userinfo__Descriptor,
              new string[] { "Openid", "Nickname", "Headimg", "Sex", "UserBean", "UserGold", "UserFW", "UserID", "UserIP", "CumulativeScore", });
      internal__static_SendAddRoom__Descriptor = Descriptor.MessageTypes[10];
      internal__static_SendAddRoom__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SendAddRoom, global::SendAddRoom.Builder>(internal__static_SendAddRoom__Descriptor,
              new string[] { "RoomID", "Openid", "Latitude", });
      internal__static_ReturnAddRoom__Descriptor = Descriptor.MessageTypes[11];
      internal__static_ReturnAddRoom__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnAddRoom, global::ReturnAddRoom.Builder>(internal__static_ReturnAddRoom__Descriptor,
              new string[] { "State", "Userinfo", });
      internal__static_ReturnUserInfo__Descriptor = Descriptor.MessageTypes[12];
      internal__static_ReturnUserInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnUserInfo, global::ReturnUserInfo.Builder>(internal__static_ReturnUserInfo__Descriptor,
              new string[] { "Userinfo", });
      internal__static_MaJiang__Descriptor = Descriptor.MessageTypes[13];
      internal__static_MaJiang__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::MaJiang, global::MaJiang.Builder>(internal__static_MaJiang__Descriptor,
              new string[] { "PaiID", "PaiHS", });
      internal__static_ReturnStartGame__Descriptor = Descriptor.MessageTypes[14];
      internal__static_ReturnStartGame__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnStartGame, global::ReturnStartGame.Builder>(internal__static_ReturnStartGame__Descriptor,
              new string[] { "Mj", "Chuuser", });
      internal__static_SendStart__Descriptor = Descriptor.MessageTypes[15];
      internal__static_SendStart__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SendStart, global::SendStart.Builder>(internal__static_SendStart__Descriptor,
              new string[] { "Openid", "Roomid", });
      internal__static_ReturnStart__Descriptor = Descriptor.MessageTypes[16];
      internal__static_ReturnStart__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnStart, global::ReturnStart.Builder>(internal__static_ReturnStart__Descriptor,
              new string[] { "Start", });
      internal__static_ReturnTP__Descriptor = Descriptor.MessageTypes[17];
      internal__static_ReturnTP__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnTP, global::ReturnTP.Builder>(internal__static_ReturnTP__Descriptor,
              new string[] { "Mj", });
      internal__static_ReturnTTATH__Descriptor = Descriptor.MessageTypes[18];
      internal__static_ReturnTTATH__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnTTATH, global::ReturnTTATH.Builder>(internal__static_ReturnTTATH__Descriptor,
              new string[] { "State", });
      internal__static_SendMP__Descriptor = Descriptor.MessageTypes[19];
      internal__static_SendMP__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SendMP, global::SendMP.Builder>(internal__static_SendMP__Descriptor,
              new string[] { "Openid", "Roomid", "MType", });
      internal__static_ReturnMP__Descriptor = Descriptor.MessageTypes[20];
      internal__static_ReturnMP__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnMP, global::ReturnMP.Builder>(internal__static_ReturnMP__Descriptor,
              new string[] { "Mj", "Gang", "Hu", });
      internal__static_SendCP__Descriptor = Descriptor.MessageTypes[21];
      internal__static_SendCP__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SendCP, global::SendCP.Builder>(internal__static_SendCP__Descriptor,
              new string[] { "Openid", "Roomid", "Mj", "Type", });
      internal__static_ReturnAll__Descriptor = Descriptor.MessageTypes[22];
      internal__static_ReturnAll__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnAll, global::ReturnAll.Builder>(internal__static_ReturnAll__Descriptor,
              new string[] { "Peng", "Gang", "Hu", "Mo", "Mj", "Fw", "MType", });
      internal__static_ReturnMsg__Descriptor = Descriptor.MessageTypes[23];
      internal__static_ReturnMsg__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnMsg, global::ReturnMsg.Builder>(internal__static_ReturnMsg__Descriptor,
              new string[] { "Msg", "Mj", "FW", });
      internal__static_SendPeng__Descriptor = Descriptor.MessageTypes[24];
      internal__static_SendPeng__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SendPeng, global::SendPeng.Builder>(internal__static_SendPeng__Descriptor,
              new string[] { "Types", "State", "Openid", "Roomid", "FW", "Mj", "Gtype", });
      internal__static_ReturnPeng__Descriptor = Descriptor.MessageTypes[25];
      internal__static_ReturnPeng__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnPeng, global::ReturnPeng.Builder>(internal__static_ReturnPeng__Descriptor,
              new string[] { "State", "Mj", "Fw", "Pfw", "Gtype", });
      internal__static_SendBT__Descriptor = Descriptor.MessageTypes[26];
      internal__static_SendBT__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SendBT, global::SendBT.Builder>(internal__static_SendBT__Descriptor,
              new string[] { "Openid", "Type", "RoomID", "Mj", });
      internal__static_ReturnBTMsg__Descriptor = Descriptor.MessageTypes[27];
      internal__static_ReturnBTMsg__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnBTMsg, global::ReturnBTMsg.Builder>(internal__static_ReturnBTMsg__Descriptor,
              new string[] { "Fw", });
      internal__static_SendJS__Descriptor = Descriptor.MessageTypes[28];
      internal__static_SendJS__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SendJS, global::SendJS.Builder>(internal__static_SendJS__Descriptor,
              new string[] { "Openid", "Roomid", });
      internal__static_ReturnJSMsg__Descriptor = Descriptor.MessageTypes[29];
      internal__static_ReturnJSMsg__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnJSMsg, global::ReturnJSMsg.Builder>(internal__static_ReturnJSMsg__Descriptor,
              new string[] { "NickName", "Fw", });
      internal__static_SendJSIdea__Descriptor = Descriptor.MessageTypes[30];
      internal__static_SendJSIdea__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SendJSIdea, global::SendJSIdea.Builder>(internal__static_SendJSIdea__Descriptor,
              new string[] { "Roomid", "Openid", "State", });
      internal__static_ReturnJSByOnew__Descriptor = Descriptor.MessageTypes[31];
      internal__static_ReturnJSByOnew__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnJSByOnew, global::ReturnJSByOnew.Builder>(internal__static_ReturnJSByOnew__Descriptor,
              new string[] { "NickName", "State", "Fw", });
      internal__static_ReturnAllIdea__Descriptor = Descriptor.MessageTypes[32];
      internal__static_ReturnAllIdea__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnAllIdea, global::ReturnAllIdea.Builder>(internal__static_ReturnAllIdea__Descriptor,
              new string[] { "State", "MessgaeType", });
      internal__static_SendRemove__Descriptor = Descriptor.MessageTypes[33];
      internal__static_SendRemove__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SendRemove, global::SendRemove.Builder>(internal__static_SendRemove__Descriptor,
              new string[] { "Openid", "RoomID", });
      internal__static_ReturnRemoveUser__Descriptor = Descriptor.MessageTypes[34];
      internal__static_ReturnRemoveUser__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnRemoveUser, global::ReturnRemoveUser.Builder>(internal__static_ReturnRemoveUser__Descriptor,
              new string[] { "Openid", "Status", });
      internal__static_SendQYM__Descriptor = Descriptor.MessageTypes[35];
      internal__static_SendQYM__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SendQYM, global::SendQYM.Builder>(internal__static_SendQYM__Descriptor,
              new string[] { "Type", "Openid", });
      internal__static_ReturnQYM__Descriptor = Descriptor.MessageTypes[36];
      internal__static_ReturnQYM__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnQYM, global::ReturnQYM.Builder>(internal__static_ReturnQYM__Descriptor,
              new string[] { "Fw", "Type", });
      internal__static_ReturnAYM__Descriptor = Descriptor.MessageTypes[37];
      internal__static_ReturnAYM__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnAYM, global::ReturnAYM.Builder>(internal__static_ReturnAYM__Descriptor,
              new string[] { "QP", });
      internal__static_ReturnTT__Descriptor = Descriptor.MessageTypes[38];
      internal__static_ReturnTT__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnTT, global::ReturnTT.Builder>(internal__static_ReturnTT__Descriptor,
              new string[] { "Fw", });
      internal__static_UserAJS__Descriptor = Descriptor.MessageTypes[39];
      internal__static_UserAJS__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::UserAJS, global::UserAJS.Builder>(internal__static_UserAJS__Descriptor,
              new string[] { "User", "Zimo", "Dianpao", "Andou", "Mdou", "Zdou", "Scare", });
      internal__static_ReturnDJS__Descriptor = Descriptor.MessageTypes[40];
      internal__static_ReturnDJS__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnDJS, global::ReturnDJS.Builder>(internal__static_ReturnDJS__Descriptor,
              new string[] { "Userjs", "State", });
      internal__static_ReturnHByType__Descriptor = Descriptor.MessageTypes[41];
      internal__static_ReturnHByType__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnHByType, global::ReturnHByType.Builder>(internal__static_ReturnHByType__Descriptor,
              new string[] { "FWZ", "Type", "FWB", "MJ", });
      internal__static_SendHu__Descriptor = Descriptor.MessageTypes[42];
      internal__static_SendHu__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SendHu, global::SendHu.Builder>(internal__static_SendHu__Descriptor,
              new string[] { "FWZ", "Type", "FWB", "MJ", "Openid", "Roomid", "DXInfo", });
      internal__static_DuoXiangHu__Descriptor = Descriptor.MessageTypes[43];
      internal__static_DuoXiangHu__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::DuoXiangHu, global::DuoXiangHu.Builder>(internal__static_DuoXiangHu__Descriptor,
              new string[] { "DXFW", "DXType", });
      internal__static_SendGetGame__Descriptor = Descriptor.MessageTypes[44];
      internal__static_SendGetGame__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SendGetGame, global::SendGetGame.Builder>(internal__static_SendGetGame__Descriptor,
              new string[] { "RoomID", "Fw", });
      internal__static_ReturnZR__Descriptor = Descriptor.MessageTypes[45];
      internal__static_ReturnZR__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnZR, global::ReturnZR.Builder>(internal__static_ReturnZR__Descriptor,
              new string[] { "Gtype", "Zrfw", "Dzrfw", });
      internal__static_SendConnData__Descriptor = Descriptor.MessageTypes[46];
      internal__static_SendConnData__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SendConnData, global::SendConnData.Builder>(internal__static_SendConnData__Descriptor,
              new string[] { "Openid", "RoomID", });
      internal__static_ReturnZhuang__Descriptor = Descriptor.MessageTypes[47];
      internal__static_ReturnZhuang__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnZhuang, global::ReturnZhuang.Builder>(internal__static_ReturnZhuang__Descriptor,
              new string[] { "Zhuang", "Seizi", });
      internal__static_ReturnHType__Descriptor = Descriptor.MessageTypes[48];
      internal__static_ReturnHType__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnHType, global::ReturnHType.Builder>(internal__static_ReturnHType__Descriptor,
              new string[] { "FWZ", "Type", "FWB", "MJ", });
      internal__static_GangMSG__Descriptor = Descriptor.MessageTypes[49];
      internal__static_GangMSG__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::GangMSG, global::GangMSG.Builder>(internal__static_GangMSG__Descriptor,
              new string[] { "Fw", "Type", "Mj", });
      internal__static_ReturnGang__Descriptor = Descriptor.MessageTypes[50];
      internal__static_ReturnGang__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnGang, global::ReturnGang.Builder>(internal__static_ReturnGang__Descriptor,
              new string[] { "Gang", });
      internal__static_ReturnRecon__Descriptor = Descriptor.MessageTypes[51];
      internal__static_ReturnRecon__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnRecon, global::ReturnRecon.Builder>(internal__static_ReturnRecon__Descriptor,
              new string[] { "State", });
      internal__static_UserShou__Descriptor = Descriptor.MessageTypes[52];
      internal__static_UserShou__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::UserShou, global::UserShou.Builder>(internal__static_UserShou__Descriptor,
              new string[] { "FW", "Mj", "Pcount", "QYM", "Tianting", "Baoting", "Scare", });
      internal__static_UserPeng__Descriptor = Descriptor.MessageTypes[53];
      internal__static_UserPeng__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::UserPeng, global::UserPeng.Builder>(internal__static_UserPeng__Descriptor,
              new string[] { "FW", "Mj", });
      internal__static_UserGang__Descriptor = Descriptor.MessageTypes[54];
      internal__static_UserGang__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::UserGang, global::UserGang.Builder>(internal__static_UserGang__Descriptor,
              new string[] { "FW", "Gang", });
      internal__static_UserChu__Descriptor = Descriptor.MessageTypes[55];
      internal__static_UserChu__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::UserChu, global::UserChu.Builder>(internal__static_UserChu__Descriptor,
              new string[] { "FW", "Mj", });
      internal__static_JpConn__Descriptor = Descriptor.MessageTypes[56];
      internal__static_JpConn__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::JpConn, global::JpConn.Builder>(internal__static_JpConn__Descriptor,
              new string[] { "CFJ", "WGJ", "FW", });
      internal__static_ReturnConnData__Descriptor = Descriptor.MessageTypes[57];
      internal__static_ReturnConnData__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnConnData, global::ReturnConnData.Builder>(internal__static_ReturnConnData__Descriptor,
              new string[] { "Shoupai", "Peng", "Gang", "Chu", "RoomID", "Jp", "Message", "HyUser", "UserInfo", "Tp", "Zhuang", "SendData", "LastMomj", "LastChumj", "GameNumber", });
      internal__static_ReturnMsgList__Descriptor = Descriptor.MessageTypes[58];
      internal__static_ReturnMsgList__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnMsgList, global::ReturnMsgList.Builder>(internal__static_ReturnMsgList__Descriptor,
              new string[] { "Msg", });
      internal__static_ReturnRoomMsg__Descriptor = Descriptor.MessageTypes[59];
      internal__static_ReturnRoomMsg__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnRoomMsg, global::ReturnRoomMsg.Builder>(internal__static_ReturnRoomMsg__Descriptor,
              new string[] { "IsWgj", "IsXinqiji", "IsShangxiaji", "IsBenji", "IsYikousan", "RoomPeo", "Count", "IsLianzhuang", });
      internal__static_ReturnHyUser__Descriptor = Descriptor.MessageTypes[60];
      internal__static_ReturnHyUser__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnHyUser, global::ReturnHyUser.Builder>(internal__static_ReturnHyUser__Descriptor,
              new string[] { "Fw", "Cz", "Mj", });
      internal__static_ReturnFJ__Descriptor = Descriptor.MessageTypes[61];
      internal__static_ReturnFJ__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnFJ, global::ReturnFJ.Builder>(internal__static_ReturnFJ__Descriptor,
              new string[] { "HS", });
      internal__static_JiPaiF__Descriptor = Descriptor.MessageTypes[62];
      internal__static_JiPaiF__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::JiPaiF, global::JiPaiF.Builder>(internal__static_JiPaiF__Descriptor,
              new string[] { "PaiHS", "Count", "Type", });
      internal__static_Dou__Descriptor = Descriptor.MessageTypes[63];
      internal__static_Dou__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::Dou, global::Dou.Builder>(internal__static_Dou__Descriptor,
              new string[] { "Type", "Count", });
      internal__static_UserJS__Descriptor = Descriptor.MessageTypes[64];
      internal__static_UserJS__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::UserJS, global::UserJS.Builder>(internal__static_UserJS__Descriptor,
              new string[] { "Userinfo", "Jp", "Dc", "FS", "IsJiao", "IsPao", "DyFs", "HuType", });
      internal__static_ReturnJS__Descriptor = Descriptor.MessageTypes[65];
      internal__static_ReturnJS__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnJS, global::ReturnJS.Builder>(internal__static_ReturnJS__Descriptor,
              new string[] { "Js", });
      internal__static_ReturnPaiCount__Descriptor = Descriptor.MessageTypes[66];
      internal__static_ReturnPaiCount__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnPaiCount, global::ReturnPaiCount.Builder>(internal__static_ReturnPaiCount__Descriptor,
              new string[] { "PaiCount", });
      internal__static_UserSPai__Descriptor = Descriptor.MessageTypes[67];
      internal__static_UserSPai__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::UserSPai, global::UserSPai.Builder>(internal__static_UserSPai__Descriptor,
              new string[] { "Fw", "Mj", });
      internal__static_ReturnUserSPai__Descriptor = Descriptor.MessageTypes[68];
      internal__static_ReturnUserSPai__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnUserSPai, global::ReturnUserSPai.Builder>(internal__static_ReturnUserSPai__Descriptor,
              new string[] { "Usp", });
      internal__static_SendAddRoomOne__Descriptor = Descriptor.MessageTypes[69];
      internal__static_SendAddRoomOne__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SendAddRoomOne, global::SendAddRoomOne.Builder>(internal__static_SendAddRoomOne__Descriptor,
              new string[] { "Openid", "RoomID", });
      internal__static_ReturnRoomAdd__Descriptor = Descriptor.MessageTypes[70];
      internal__static_ReturnRoomAdd__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnRoomAdd, global::ReturnRoomAdd.Builder>(internal__static_ReturnRoomAdd__Descriptor,
              new string[] { "Start", });
      internal__static_ReturnDis__Descriptor = Descriptor.MessageTypes[71];
      internal__static_ReturnDis__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnDis, global::ReturnDis.Builder>(internal__static_ReturnDis__Descriptor,
              new string[] { "FW", "Dis", });
      internal__static_ReturnIsJ__Descriptor = Descriptor.MessageTypes[72];
      internal__static_ReturnIsJ__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnIsJ, global::ReturnIsJ.Builder>(internal__static_ReturnIsJ__Descriptor,
              new string[] { "FWO", "FWW", });
      internal__static_ReturnIPSame__Descriptor = Descriptor.MessageTypes[73];
      internal__static_ReturnIPSame__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnIPSame, global::ReturnIPSame.Builder>(internal__static_ReturnIPSame__Descriptor,
              new string[] { "FW", });
      internal__static_SendConfirmationStarts__Descriptor = Descriptor.MessageTypes[74];
      internal__static_SendConfirmationStarts__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SendConfirmationStarts, global::SendConfirmationStarts.Builder>(internal__static_SendConfirmationStarts__Descriptor,
              new string[] { "Openid", "RoomID", });
      internal__static_SendAnnouncement__Descriptor = Descriptor.MessageTypes[75];
      internal__static_SendAnnouncement__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SendAnnouncement, global::SendAnnouncement.Builder>(internal__static_SendAnnouncement__Descriptor,
              new string[] { "Openid", "RoomID", });
      internal__static_ReturnAnnouncement__Descriptor = Descriptor.MessageTypes[76];
      internal__static_ReturnAnnouncement__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnAnnouncement, global::ReturnAnnouncement.Builder>(internal__static_ReturnAnnouncement__Descriptor,
              new string[] { "Announcement", });
      internal__static_AnnouncementInfo__Descriptor = Descriptor.MessageTypes[77];
      internal__static_AnnouncementInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::AnnouncementInfo, global::AnnouncementInfo.Builder>(internal__static_AnnouncementInfo__Descriptor,
              new string[] { "Title", "Content", });
      internal__static_SendVoice__Descriptor = Descriptor.MessageTypes[78];
      internal__static_SendVoice__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SendVoice, global::SendVoice.Builder>(internal__static_SendVoice__Descriptor,
              new string[] { "RoomID", "Openid", "VoiceNumber", });
      internal__static_ReturnVoice__Descriptor = Descriptor.MessageTypes[79];
      internal__static_ReturnVoice__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnVoice, global::ReturnVoice.Builder>(internal__static_ReturnVoice__Descriptor,
              new string[] { "FW", "VoiceNumber", });
      internal__static_ConnectionStatusInfo__Descriptor = Descriptor.MessageTypes[80];
      internal__static_ConnectionStatusInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ConnectionStatusInfo, global::ConnectionStatusInfo.Builder>(internal__static_ConnectionStatusInfo__Descriptor,
              new string[] { "FW", "ConnectionStatus", });
      internal__static_ReturnConnectionStatus__Descriptor = Descriptor.MessageTypes[81];
      internal__static_ReturnConnectionStatus__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReturnConnectionStatus, global::ReturnConnectionStatus.Builder>(internal__static_ReturnConnectionStatus__Descriptor,
              new string[] { "ConnectionStatus", });
      internal__static_SendConnectionStatus__Descriptor = Descriptor.MessageTypes[82];
      internal__static_SendConnectionStatus__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SendConnectionStatus, global::SendConnectionStatus.Builder>(internal__static_SendConnectionStatus__Descriptor,
              new string[] { "Openid", "ConnectionStatus", });
      return null;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        }, assigner);
  }
  #endregion
  
}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SendLogin : pb::GeneratedMessage<SendLogin, SendLogin.Builder> {
  private SendLogin() { }
  private static readonly SendLogin defaultInstance = new SendLogin().MakeReadOnly();
  private static readonly string[] _sendLoginFieldNames = new string[] { "Latitude", "city", "headimg", "nickname", "openid", "province", "sex", "unionid" };
  private static readonly uint[] _sendLoginFieldTags = new uint[] { 66, 42, 50, 18, 10, 34, 26, 58 };
  public static SendLogin DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SendLogin DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SendLogin ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_SendLogin__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SendLogin, SendLogin.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_SendLogin__FieldAccessorTable; }
  }
  
  public const int OpenidFieldNumber = 1;
  private bool hasOpenid;
  private string openid_ = "";
  public bool HasOpenid {
    get { return hasOpenid; }
  }
  public string Openid {
    get { return openid_; }
  }
  
  public const int NicknameFieldNumber = 2;
  private bool hasNickname;
  private string nickname_ = "";
  public bool HasNickname {
    get { return hasNickname; }
  }
  public string Nickname {
    get { return nickname_; }
  }
  
  public const int SexFieldNumber = 3;
  private bool hasSex;
  private string sex_ = "";
  public bool HasSex {
    get { return hasSex; }
  }
  public string Sex {
    get { return sex_; }
  }
  
  public const int ProvinceFieldNumber = 4;
  private bool hasProvince;
  private string province_ = "";
  public bool HasProvince {
    get { return hasProvince; }
  }
  public string Province {
    get { return province_; }
  }
  
  public const int CityFieldNumber = 5;
  private bool hasCity;
  private string city_ = "";
  public bool HasCity {
    get { return hasCity; }
  }
  public string City {
    get { return city_; }
  }
  
  public const int HeadimgFieldNumber = 6;
  private bool hasHeadimg;
  private string headimg_ = "";
  public bool HasHeadimg {
    get { return hasHeadimg; }
  }
  public string Headimg {
    get { return headimg_; }
  }
  
  public const int UnionidFieldNumber = 7;
  private bool hasUnionid;
  private string unionid_ = "";
  public bool HasUnionid {
    get { return hasUnionid; }
  }
  public string Unionid {
    get { return unionid_; }
  }
  
  public const int LatitudeFieldNumber = 8;
  private bool hasLatitude;
  private string latitude_ = "";
  public bool HasLatitude {
    get { return hasLatitude; }
  }
  public string Latitude {
    get { return latitude_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasOpenid) return false;
      if (!hasNickname) return false;
      if (!hasSex) return false;
      if (!hasProvince) return false;
      if (!hasCity) return false;
      if (!hasHeadimg) return false;
      if (!hasUnionid) return false;
      if (!hasLatitude) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sendLoginFieldNames;
    if (hasOpenid) {
      output.WriteString(1, field_names[4], Openid);
    }
    if (hasNickname) {
      output.WriteString(2, field_names[3], Nickname);
    }
    if (hasSex) {
      output.WriteString(3, field_names[6], Sex);
    }
    if (hasProvince) {
      output.WriteString(4, field_names[5], Province);
    }
    if (hasCity) {
      output.WriteString(5, field_names[1], City);
    }
    if (hasHeadimg) {
      output.WriteString(6, field_names[2], Headimg);
    }
    if (hasUnionid) {
      output.WriteString(7, field_names[7], Unionid);
    }
    if (hasLatitude) {
      output.WriteString(8, field_names[0], Latitude);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasOpenid) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Openid);
    }
    if (hasNickname) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Nickname);
    }
    if (hasSex) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Sex);
    }
    if (hasProvince) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Province);
    }
    if (hasCity) {
      size += pb::CodedOutputStream.ComputeStringSize(5, City);
    }
    if (hasHeadimg) {
      size += pb::CodedOutputStream.ComputeStringSize(6, Headimg);
    }
    if (hasUnionid) {
      size += pb::CodedOutputStream.ComputeStringSize(7, Unionid);
    }
    if (hasLatitude) {
      size += pb::CodedOutputStream.ComputeStringSize(8, Latitude);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SendLogin ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendLogin ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendLogin ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendLogin ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendLogin ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendLogin ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SendLogin ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SendLogin ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SendLogin ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendLogin ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SendLogin MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SendLogin prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SendLogin, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SendLogin cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SendLogin result;
    
    private SendLogin PrepareBuilder() {
      if (resultIsReadOnly) {
        SendLogin original = result;
        result = new SendLogin();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SendLogin MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SendLogin.Descriptor; }
    }
    
    public override SendLogin DefaultInstanceForType {
      get { return global::SendLogin.DefaultInstance; }
    }
    
    public override SendLogin BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SendLogin) {
        return MergeFrom((SendLogin) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SendLogin other) {
      if (other == global::SendLogin.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasOpenid) {
        Openid = other.Openid;
      }
      if (other.HasNickname) {
        Nickname = other.Nickname;
      }
      if (other.HasSex) {
        Sex = other.Sex;
      }
      if (other.HasProvince) {
        Province = other.Province;
      }
      if (other.HasCity) {
        City = other.City;
      }
      if (other.HasHeadimg) {
        Headimg = other.Headimg;
      }
      if (other.HasUnionid) {
        Unionid = other.Unionid;
      }
      if (other.HasLatitude) {
        Latitude = other.Latitude;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sendLoginFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sendLoginFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasOpenid = input.ReadString(ref result.openid_);
            break;
          }
          case 18: {
            result.hasNickname = input.ReadString(ref result.nickname_);
            break;
          }
          case 26: {
            result.hasSex = input.ReadString(ref result.sex_);
            break;
          }
          case 34: {
            result.hasProvince = input.ReadString(ref result.province_);
            break;
          }
          case 42: {
            result.hasCity = input.ReadString(ref result.city_);
            break;
          }
          case 50: {
            result.hasHeadimg = input.ReadString(ref result.headimg_);
            break;
          }
          case 58: {
            result.hasUnionid = input.ReadString(ref result.unionid_);
            break;
          }
          case 66: {
            result.hasLatitude = input.ReadString(ref result.latitude_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasOpenid {
      get { return result.hasOpenid; }
    }
    public string Openid {
      get { return result.Openid; }
      set { SetOpenid(value); }
    }
    public Builder SetOpenid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOpenid = true;
      result.openid_ = value;
      return this;
    }
    public Builder ClearOpenid() {
      PrepareBuilder();
      result.hasOpenid = false;
      result.openid_ = "";
      return this;
    }
    
    public bool HasNickname {
      get { return result.hasNickname; }
    }
    public string Nickname {
      get { return result.Nickname; }
      set { SetNickname(value); }
    }
    public Builder SetNickname(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasNickname = true;
      result.nickname_ = value;
      return this;
    }
    public Builder ClearNickname() {
      PrepareBuilder();
      result.hasNickname = false;
      result.nickname_ = "";
      return this;
    }
    
    public bool HasSex {
      get { return result.hasSex; }
    }
    public string Sex {
      get { return result.Sex; }
      set { SetSex(value); }
    }
    public Builder SetSex(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasSex = true;
      result.sex_ = value;
      return this;
    }
    public Builder ClearSex() {
      PrepareBuilder();
      result.hasSex = false;
      result.sex_ = "";
      return this;
    }
    
    public bool HasProvince {
      get { return result.hasProvince; }
    }
    public string Province {
      get { return result.Province; }
      set { SetProvince(value); }
    }
    public Builder SetProvince(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasProvince = true;
      result.province_ = value;
      return this;
    }
    public Builder ClearProvince() {
      PrepareBuilder();
      result.hasProvince = false;
      result.province_ = "";
      return this;
    }
    
    public bool HasCity {
      get { return result.hasCity; }
    }
    public string City {
      get { return result.City; }
      set { SetCity(value); }
    }
    public Builder SetCity(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCity = true;
      result.city_ = value;
      return this;
    }
    public Builder ClearCity() {
      PrepareBuilder();
      result.hasCity = false;
      result.city_ = "";
      return this;
    }
    
    public bool HasHeadimg {
      get { return result.hasHeadimg; }
    }
    public string Headimg {
      get { return result.Headimg; }
      set { SetHeadimg(value); }
    }
    public Builder SetHeadimg(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasHeadimg = true;
      result.headimg_ = value;
      return this;
    }
    public Builder ClearHeadimg() {
      PrepareBuilder();
      result.hasHeadimg = false;
      result.headimg_ = "";
      return this;
    }
    
    public bool HasUnionid {
      get { return result.hasUnionid; }
    }
    public string Unionid {
      get { return result.Unionid; }
      set { SetUnionid(value); }
    }
    public Builder SetUnionid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUnionid = true;
      result.unionid_ = value;
      return this;
    }
    public Builder ClearUnionid() {
      PrepareBuilder();
      result.hasUnionid = false;
      result.unionid_ = "";
      return this;
    }
    
    public bool HasLatitude {
      get { return result.hasLatitude; }
    }
    public string Latitude {
      get { return result.Latitude; }
      set { SetLatitude(value); }
    }
    public Builder SetLatitude(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasLatitude = true;
      result.latitude_ = value;
      return this;
    }
    public Builder ClearLatitude() {
      PrepareBuilder();
      result.hasLatitude = false;
      result.latitude_ = "";
      return this;
    }
  }
  static SendLogin() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnLogin : pb::GeneratedMessage<ReturnLogin, ReturnLogin.Builder> {
  private ReturnLogin() { }
  private static readonly ReturnLogin defaultInstance = new ReturnLogin().MakeReadOnly();
  private static readonly string[] _returnLoginFieldNames = new string[] { "UserID", "UserRoomCard", "loginstat" };
  private static readonly uint[] _returnLoginFieldTags = new uint[] { 16, 24, 8 };
  public static ReturnLogin DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnLogin DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnLogin ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnLogin__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnLogin, ReturnLogin.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnLogin__FieldAccessorTable; }
  }
  
  public const int LoginstatFieldNumber = 1;
  private bool hasLoginstat;
  private int loginstat_;
  public bool HasLoginstat {
    get { return hasLoginstat; }
  }
  public int Loginstat {
    get { return loginstat_; }
  }
  
  public const int UserIDFieldNumber = 2;
  private bool hasUserID;
  private long userID_;
  public bool HasUserID {
    get { return hasUserID; }
  }
  public long UserID {
    get { return userID_; }
  }
  
  public const int UserRoomCardFieldNumber = 3;
  private bool hasUserRoomCard;
  private long userRoomCard_;
  public bool HasUserRoomCard {
    get { return hasUserRoomCard; }
  }
  public long UserRoomCard {
    get { return userRoomCard_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasLoginstat) return false;
      if (!hasUserID) return false;
      if (!hasUserRoomCard) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnLoginFieldNames;
    if (hasLoginstat) {
      output.WriteInt32(1, field_names[2], Loginstat);
    }
    if (hasUserID) {
      output.WriteInt64(2, field_names[0], UserID);
    }
    if (hasUserRoomCard) {
      output.WriteInt64(3, field_names[1], UserRoomCard);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasLoginstat) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Loginstat);
    }
    if (hasUserID) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, UserID);
    }
    if (hasUserRoomCard) {
      size += pb::CodedOutputStream.ComputeInt64Size(3, UserRoomCard);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnLogin ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnLogin ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnLogin ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnLogin ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnLogin ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnLogin ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnLogin ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnLogin ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnLogin ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnLogin ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnLogin MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnLogin prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnLogin, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnLogin cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnLogin result;
    
    private ReturnLogin PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnLogin original = result;
        result = new ReturnLogin();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnLogin MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnLogin.Descriptor; }
    }
    
    public override ReturnLogin DefaultInstanceForType {
      get { return global::ReturnLogin.DefaultInstance; }
    }
    
    public override ReturnLogin BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnLogin) {
        return MergeFrom((ReturnLogin) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnLogin other) {
      if (other == global::ReturnLogin.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasLoginstat) {
        Loginstat = other.Loginstat;
      }
      if (other.HasUserID) {
        UserID = other.UserID;
      }
      if (other.HasUserRoomCard) {
        UserRoomCard = other.UserRoomCard;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnLoginFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnLoginFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasLoginstat = input.ReadInt32(ref result.loginstat_);
            break;
          }
          case 16: {
            result.hasUserID = input.ReadInt64(ref result.userID_);
            break;
          }
          case 24: {
            result.hasUserRoomCard = input.ReadInt64(ref result.userRoomCard_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasLoginstat {
      get { return result.hasLoginstat; }
    }
    public int Loginstat {
      get { return result.Loginstat; }
      set { SetLoginstat(value); }
    }
    public Builder SetLoginstat(int value) {
      PrepareBuilder();
      result.hasLoginstat = true;
      result.loginstat_ = value;
      return this;
    }
    public Builder ClearLoginstat() {
      PrepareBuilder();
      result.hasLoginstat = false;
      result.loginstat_ = 0;
      return this;
    }
    
    public bool HasUserID {
      get { return result.hasUserID; }
    }
    public long UserID {
      get { return result.UserID; }
      set { SetUserID(value); }
    }
    public Builder SetUserID(long value) {
      PrepareBuilder();
      result.hasUserID = true;
      result.userID_ = value;
      return this;
    }
    public Builder ClearUserID() {
      PrepareBuilder();
      result.hasUserID = false;
      result.userID_ = 0L;
      return this;
    }
    
    public bool HasUserRoomCard {
      get { return result.hasUserRoomCard; }
    }
    public long UserRoomCard {
      get { return result.UserRoomCard; }
      set { SetUserRoomCard(value); }
    }
    public Builder SetUserRoomCard(long value) {
      PrepareBuilder();
      result.hasUserRoomCard = true;
      result.userRoomCard_ = value;
      return this;
    }
    public Builder ClearUserRoomCard() {
      PrepareBuilder();
      result.hasUserRoomCard = false;
      result.userRoomCard_ = 0L;
      return this;
    }
  }
  static ReturnLogin() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MaintainHeartbeat : pb::GeneratedMessage<MaintainHeartbeat, MaintainHeartbeat.Builder> {
  private MaintainHeartbeat() { }
  private static readonly MaintainHeartbeat defaultInstance = new MaintainHeartbeat().MakeReadOnly();
  private static readonly string[] _maintainHeartbeatFieldNames = new string[] { "openid", "state" };
  private static readonly uint[] _maintainHeartbeatFieldTags = new uint[] { 18, 8 };
  public static MaintainHeartbeat DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override MaintainHeartbeat DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override MaintainHeartbeat ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_MaintainHeartbeat__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<MaintainHeartbeat, MaintainHeartbeat.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_MaintainHeartbeat__FieldAccessorTable; }
  }
  
  public const int StateFieldNumber = 1;
  private bool hasState;
  private int state_;
  public bool HasState {
    get { return hasState; }
  }
  public int State {
    get { return state_; }
  }
  
  public const int OpenidFieldNumber = 2;
  private bool hasOpenid;
  private string openid_ = "";
  public bool HasOpenid {
    get { return hasOpenid; }
  }
  public string Openid {
    get { return openid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasState) return false;
      if (!hasOpenid) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _maintainHeartbeatFieldNames;
    if (hasState) {
      output.WriteInt32(1, field_names[1], State);
    }
    if (hasOpenid) {
      output.WriteString(2, field_names[0], Openid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasState) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, State);
    }
    if (hasOpenid) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Openid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static MaintainHeartbeat ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MaintainHeartbeat ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MaintainHeartbeat ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MaintainHeartbeat ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MaintainHeartbeat ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MaintainHeartbeat ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static MaintainHeartbeat ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static MaintainHeartbeat ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static MaintainHeartbeat ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MaintainHeartbeat ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private MaintainHeartbeat MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(MaintainHeartbeat prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<MaintainHeartbeat, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(MaintainHeartbeat cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private MaintainHeartbeat result;
    
    private MaintainHeartbeat PrepareBuilder() {
      if (resultIsReadOnly) {
        MaintainHeartbeat original = result;
        result = new MaintainHeartbeat();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override MaintainHeartbeat MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::MaintainHeartbeat.Descriptor; }
    }
    
    public override MaintainHeartbeat DefaultInstanceForType {
      get { return global::MaintainHeartbeat.DefaultInstance; }
    }
    
    public override MaintainHeartbeat BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is MaintainHeartbeat) {
        return MergeFrom((MaintainHeartbeat) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(MaintainHeartbeat other) {
      if (other == global::MaintainHeartbeat.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasState) {
        State = other.State;
      }
      if (other.HasOpenid) {
        Openid = other.Openid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_maintainHeartbeatFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _maintainHeartbeatFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasState = input.ReadInt32(ref result.state_);
            break;
          }
          case 18: {
            result.hasOpenid = input.ReadString(ref result.openid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasState {
      get { return result.hasState; }
    }
    public int State {
      get { return result.State; }
      set { SetState(value); }
    }
    public Builder SetState(int value) {
      PrepareBuilder();
      result.hasState = true;
      result.state_ = value;
      return this;
    }
    public Builder ClearState() {
      PrepareBuilder();
      result.hasState = false;
      result.state_ = 0;
      return this;
    }
    
    public bool HasOpenid {
      get { return result.hasOpenid; }
    }
    public string Openid {
      get { return result.Openid; }
      set { SetOpenid(value); }
    }
    public Builder SetOpenid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOpenid = true;
      result.openid_ = value;
      return this;
    }
    public Builder ClearOpenid() {
      PrepareBuilder();
      result.hasOpenid = false;
      result.openid_ = "";
      return this;
    }
  }
  static MaintainHeartbeat() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnServerIP : pb::GeneratedMessage<ReturnServerIP, ReturnServerIP.Builder> {
  private ReturnServerIP() { }
  private static readonly ReturnServerIP defaultInstance = new ReturnServerIP().MakeReadOnly();
  private static readonly string[] _returnServerIPFieldNames = new string[] { "RoomID", "Status", "ip", "port" };
  private static readonly uint[] _returnServerIPFieldTags = new uint[] { 34, 24, 10, 18 };
  public static ReturnServerIP DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnServerIP DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnServerIP ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnServerIP__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnServerIP, ReturnServerIP.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnServerIP__FieldAccessorTable; }
  }
  
  public const int IpFieldNumber = 1;
  private bool hasIp;
  private string ip_ = "";
  public bool HasIp {
    get { return hasIp; }
  }
  public string Ip {
    get { return ip_; }
  }
  
  public const int PortFieldNumber = 2;
  private bool hasPort;
  private string port_ = "";
  public bool HasPort {
    get { return hasPort; }
  }
  public string Port {
    get { return port_; }
  }
  
  public const int StatusFieldNumber = 3;
  private bool hasStatus;
  private int status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public int Status {
    get { return status_; }
  }
  
  public const int RoomIDFieldNumber = 4;
  private bool hasRoomID;
  private string roomID_ = "";
  public bool HasRoomID {
    get { return hasRoomID; }
  }
  public string RoomID {
    get { return roomID_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasIp) return false;
      if (!hasPort) return false;
      if (!hasStatus) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnServerIPFieldNames;
    if (hasIp) {
      output.WriteString(1, field_names[2], Ip);
    }
    if (hasPort) {
      output.WriteString(2, field_names[3], Port);
    }
    if (hasStatus) {
      output.WriteInt32(3, field_names[1], Status);
    }
    if (hasRoomID) {
      output.WriteString(4, field_names[0], RoomID);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasIp) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Ip);
    }
    if (hasPort) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Port);
    }
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Status);
    }
    if (hasRoomID) {
      size += pb::CodedOutputStream.ComputeStringSize(4, RoomID);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnServerIP ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnServerIP ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnServerIP ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnServerIP ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnServerIP ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnServerIP ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnServerIP ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnServerIP ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnServerIP ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnServerIP ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnServerIP MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnServerIP prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnServerIP, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnServerIP cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnServerIP result;
    
    private ReturnServerIP PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnServerIP original = result;
        result = new ReturnServerIP();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnServerIP MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnServerIP.Descriptor; }
    }
    
    public override ReturnServerIP DefaultInstanceForType {
      get { return global::ReturnServerIP.DefaultInstance; }
    }
    
    public override ReturnServerIP BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnServerIP) {
        return MergeFrom((ReturnServerIP) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnServerIP other) {
      if (other == global::ReturnServerIP.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasIp) {
        Ip = other.Ip;
      }
      if (other.HasPort) {
        Port = other.Port;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasRoomID) {
        RoomID = other.RoomID;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnServerIPFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnServerIPFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasIp = input.ReadString(ref result.ip_);
            break;
          }
          case 18: {
            result.hasPort = input.ReadString(ref result.port_);
            break;
          }
          case 24: {
            result.hasStatus = input.ReadInt32(ref result.status_);
            break;
          }
          case 34: {
            result.hasRoomID = input.ReadString(ref result.roomID_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasIp {
      get { return result.hasIp; }
    }
    public string Ip {
      get { return result.Ip; }
      set { SetIp(value); }
    }
    public Builder SetIp(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasIp = true;
      result.ip_ = value;
      return this;
    }
    public Builder ClearIp() {
      PrepareBuilder();
      result.hasIp = false;
      result.ip_ = "";
      return this;
    }
    
    public bool HasPort {
      get { return result.hasPort; }
    }
    public string Port {
      get { return result.Port; }
      set { SetPort(value); }
    }
    public Builder SetPort(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPort = true;
      result.port_ = value;
      return this;
    }
    public Builder ClearPort() {
      PrepareBuilder();
      result.hasPort = false;
      result.port_ = "";
      return this;
    }
    
    public bool HasStatus {
      get { return result.hasStatus; }
    }
    public int Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(int value) {
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = 0;
      return this;
    }
    
    public bool HasRoomID {
      get { return result.hasRoomID; }
    }
    public string RoomID {
      get { return result.RoomID; }
      set { SetRoomID(value); }
    }
    public Builder SetRoomID(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRoomID = true;
      result.roomID_ = value;
      return this;
    }
    public Builder ClearRoomID() {
      PrepareBuilder();
      result.hasRoomID = false;
      result.roomID_ = "";
      return this;
    }
  }
  static ReturnServerIP() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SendAddServer : pb::GeneratedMessage<SendAddServer, SendAddServer.Builder> {
  private SendAddServer() { }
  private static readonly SendAddServer defaultInstance = new SendAddServer().MakeReadOnly();
  private static readonly string[] _sendAddServerFieldNames = new string[] { "openid", "unionid" };
  private static readonly uint[] _sendAddServerFieldTags = new uint[] { 10, 18 };
  public static SendAddServer DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SendAddServer DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SendAddServer ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_SendAddServer__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SendAddServer, SendAddServer.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_SendAddServer__FieldAccessorTable; }
  }
  
  public const int OpenidFieldNumber = 1;
  private bool hasOpenid;
  private string openid_ = "";
  public bool HasOpenid {
    get { return hasOpenid; }
  }
  public string Openid {
    get { return openid_; }
  }
  
  public const int UnionidFieldNumber = 2;
  private bool hasUnionid;
  private string unionid_ = "";
  public bool HasUnionid {
    get { return hasUnionid; }
  }
  public string Unionid {
    get { return unionid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasOpenid) return false;
      if (!hasUnionid) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sendAddServerFieldNames;
    if (hasOpenid) {
      output.WriteString(1, field_names[0], Openid);
    }
    if (hasUnionid) {
      output.WriteString(2, field_names[1], Unionid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasOpenid) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Openid);
    }
    if (hasUnionid) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Unionid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SendAddServer ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendAddServer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendAddServer ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendAddServer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendAddServer ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendAddServer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SendAddServer ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SendAddServer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SendAddServer ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendAddServer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SendAddServer MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SendAddServer prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SendAddServer, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SendAddServer cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SendAddServer result;
    
    private SendAddServer PrepareBuilder() {
      if (resultIsReadOnly) {
        SendAddServer original = result;
        result = new SendAddServer();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SendAddServer MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SendAddServer.Descriptor; }
    }
    
    public override SendAddServer DefaultInstanceForType {
      get { return global::SendAddServer.DefaultInstance; }
    }
    
    public override SendAddServer BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SendAddServer) {
        return MergeFrom((SendAddServer) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SendAddServer other) {
      if (other == global::SendAddServer.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasOpenid) {
        Openid = other.Openid;
      }
      if (other.HasUnionid) {
        Unionid = other.Unionid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sendAddServerFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sendAddServerFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasOpenid = input.ReadString(ref result.openid_);
            break;
          }
          case 18: {
            result.hasUnionid = input.ReadString(ref result.unionid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasOpenid {
      get { return result.hasOpenid; }
    }
    public string Openid {
      get { return result.Openid; }
      set { SetOpenid(value); }
    }
    public Builder SetOpenid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOpenid = true;
      result.openid_ = value;
      return this;
    }
    public Builder ClearOpenid() {
      PrepareBuilder();
      result.hasOpenid = false;
      result.openid_ = "";
      return this;
    }
    
    public bool HasUnionid {
      get { return result.hasUnionid; }
    }
    public string Unionid {
      get { return result.Unionid; }
      set { SetUnionid(value); }
    }
    public Builder SetUnionid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUnionid = true;
      result.unionid_ = value;
      return this;
    }
    public Builder ClearUnionid() {
      PrepareBuilder();
      result.hasUnionid = false;
      result.unionid_ = "";
      return this;
    }
  }
  static SendAddServer() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnAddServer : pb::GeneratedMessage<ReturnAddServer, ReturnAddServer.Builder> {
  private ReturnAddServer() { }
  private static readonly ReturnAddServer defaultInstance = new ReturnAddServer().MakeReadOnly();
  private static readonly string[] _returnAddServerFieldNames = new string[] { "status" };
  private static readonly uint[] _returnAddServerFieldTags = new uint[] { 8 };
  public static ReturnAddServer DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnAddServer DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnAddServer ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnAddServer__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnAddServer, ReturnAddServer.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnAddServer__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private int status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public int Status {
    get { return status_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasStatus) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnAddServerFieldNames;
    if (hasStatus) {
      output.WriteInt32(1, field_names[0], Status);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Status);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnAddServer ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnAddServer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnAddServer ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnAddServer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnAddServer ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnAddServer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnAddServer ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnAddServer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnAddServer ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnAddServer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnAddServer MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnAddServer prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnAddServer, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnAddServer cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnAddServer result;
    
    private ReturnAddServer PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnAddServer original = result;
        result = new ReturnAddServer();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnAddServer MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnAddServer.Descriptor; }
    }
    
    public override ReturnAddServer DefaultInstanceForType {
      get { return global::ReturnAddServer.DefaultInstance; }
    }
    
    public override ReturnAddServer BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnAddServer) {
        return MergeFrom((ReturnAddServer) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnAddServer other) {
      if (other == global::ReturnAddServer.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        Status = other.Status;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnAddServerFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnAddServerFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasStatus = input.ReadInt32(ref result.status_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
      get { return result.hasStatus; }
    }
    public int Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(int value) {
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = 0;
      return this;
    }
  }
  static ReturnAddServer() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SendGameOperation : pb::GeneratedMessage<SendGameOperation, SendGameOperation.Builder> {
  private SendGameOperation() { }
  private static readonly SendGameOperation defaultInstance = new SendGameOperation().MakeReadOnly();
  private static readonly string[] _sendGameOperationFieldNames = new string[] { "Operation", "RoomID", "openid", "unionid" };
  private static readonly uint[] _sendGameOperationFieldTags = new uint[] { 24, 34, 10, 18 };
  public static SendGameOperation DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SendGameOperation DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SendGameOperation ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_SendGameOperation__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SendGameOperation, SendGameOperation.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_SendGameOperation__FieldAccessorTable; }
  }
  
  public const int OpenidFieldNumber = 1;
  private bool hasOpenid;
  private string openid_ = "";
  public bool HasOpenid {
    get { return hasOpenid; }
  }
  public string Openid {
    get { return openid_; }
  }
  
  public const int UnionidFieldNumber = 2;
  private bool hasUnionid;
  private string unionid_ = "";
  public bool HasUnionid {
    get { return hasUnionid; }
  }
  public string Unionid {
    get { return unionid_; }
  }
  
  public const int OperationFieldNumber = 3;
  private bool hasOperation;
  private int operation_;
  public bool HasOperation {
    get { return hasOperation; }
  }
  public int Operation {
    get { return operation_; }
  }
  
  public const int RoomIDFieldNumber = 4;
  private bool hasRoomID;
  private string roomID_ = "";
  public bool HasRoomID {
    get { return hasRoomID; }
  }
  public string RoomID {
    get { return roomID_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasOpenid) return false;
      if (!hasUnionid) return false;
      if (!hasOperation) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sendGameOperationFieldNames;
    if (hasOpenid) {
      output.WriteString(1, field_names[2], Openid);
    }
    if (hasUnionid) {
      output.WriteString(2, field_names[3], Unionid);
    }
    if (hasOperation) {
      output.WriteInt32(3, field_names[0], Operation);
    }
    if (hasRoomID) {
      output.WriteString(4, field_names[1], RoomID);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasOpenid) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Openid);
    }
    if (hasUnionid) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Unionid);
    }
    if (hasOperation) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Operation);
    }
    if (hasRoomID) {
      size += pb::CodedOutputStream.ComputeStringSize(4, RoomID);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SendGameOperation ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendGameOperation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendGameOperation ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendGameOperation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendGameOperation ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendGameOperation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SendGameOperation ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SendGameOperation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SendGameOperation ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendGameOperation ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SendGameOperation MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SendGameOperation prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SendGameOperation, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SendGameOperation cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SendGameOperation result;
    
    private SendGameOperation PrepareBuilder() {
      if (resultIsReadOnly) {
        SendGameOperation original = result;
        result = new SendGameOperation();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SendGameOperation MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SendGameOperation.Descriptor; }
    }
    
    public override SendGameOperation DefaultInstanceForType {
      get { return global::SendGameOperation.DefaultInstance; }
    }
    
    public override SendGameOperation BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SendGameOperation) {
        return MergeFrom((SendGameOperation) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SendGameOperation other) {
      if (other == global::SendGameOperation.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasOpenid) {
        Openid = other.Openid;
      }
      if (other.HasUnionid) {
        Unionid = other.Unionid;
      }
      if (other.HasOperation) {
        Operation = other.Operation;
      }
      if (other.HasRoomID) {
        RoomID = other.RoomID;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sendGameOperationFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sendGameOperationFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasOpenid = input.ReadString(ref result.openid_);
            break;
          }
          case 18: {
            result.hasUnionid = input.ReadString(ref result.unionid_);
            break;
          }
          case 24: {
            result.hasOperation = input.ReadInt32(ref result.operation_);
            break;
          }
          case 34: {
            result.hasRoomID = input.ReadString(ref result.roomID_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasOpenid {
      get { return result.hasOpenid; }
    }
    public string Openid {
      get { return result.Openid; }
      set { SetOpenid(value); }
    }
    public Builder SetOpenid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOpenid = true;
      result.openid_ = value;
      return this;
    }
    public Builder ClearOpenid() {
      PrepareBuilder();
      result.hasOpenid = false;
      result.openid_ = "";
      return this;
    }
    
    public bool HasUnionid {
      get { return result.hasUnionid; }
    }
    public string Unionid {
      get { return result.Unionid; }
      set { SetUnionid(value); }
    }
    public Builder SetUnionid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUnionid = true;
      result.unionid_ = value;
      return this;
    }
    public Builder ClearUnionid() {
      PrepareBuilder();
      result.hasUnionid = false;
      result.unionid_ = "";
      return this;
    }
    
    public bool HasOperation {
      get { return result.hasOperation; }
    }
    public int Operation {
      get { return result.Operation; }
      set { SetOperation(value); }
    }
    public Builder SetOperation(int value) {
      PrepareBuilder();
      result.hasOperation = true;
      result.operation_ = value;
      return this;
    }
    public Builder ClearOperation() {
      PrepareBuilder();
      result.hasOperation = false;
      result.operation_ = 0;
      return this;
    }
    
    public bool HasRoomID {
      get { return result.hasRoomID; }
    }
    public string RoomID {
      get { return result.RoomID; }
      set { SetRoomID(value); }
    }
    public Builder SetRoomID(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRoomID = true;
      result.roomID_ = value;
      return this;
    }
    public Builder ClearRoomID() {
      PrepareBuilder();
      result.hasRoomID = false;
      result.roomID_ = "";
      return this;
    }
  }
  static SendGameOperation() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SendCreateRoom : pb::GeneratedMessage<SendCreateRoom, SendCreateRoom.Builder> {
  private SendCreateRoom() { }
  private static readonly SendCreateRoom defaultInstance = new SendCreateRoom().MakeReadOnly();
  private static readonly string[] _sendCreateRoomFieldNames = new string[] { "Latitude", "count", "is_benji", "is_lianzhuang", "is_shangxiaji", "is_wgj", "is_xinqiji", "is_yikousan", "openid", "room_peo" };
  private static readonly uint[] _sendCreateRoomFieldTags = new uint[] { 82, 64, 40, 72, 32, 16, 24, 48, 10, 56 };
  public static SendCreateRoom DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SendCreateRoom DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SendCreateRoom ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_SendCreateRoom__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SendCreateRoom, SendCreateRoom.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_SendCreateRoom__FieldAccessorTable; }
  }
  
  public const int OpenidFieldNumber = 1;
  private bool hasOpenid;
  private string openid_ = "";
  public bool HasOpenid {
    get { return hasOpenid; }
  }
  public string Openid {
    get { return openid_; }
  }
  
  public const int IsWgjFieldNumber = 2;
  private bool hasIsWgj;
  private int isWgj_;
  public bool HasIsWgj {
    get { return hasIsWgj; }
  }
  public int IsWgj {
    get { return isWgj_; }
  }
  
  public const int IsXinqijiFieldNumber = 3;
  private bool hasIsXinqiji;
  private int isXinqiji_;
  public bool HasIsXinqiji {
    get { return hasIsXinqiji; }
  }
  public int IsXinqiji {
    get { return isXinqiji_; }
  }
  
  public const int IsShangxiajiFieldNumber = 4;
  private bool hasIsShangxiaji;
  private int isShangxiaji_;
  public bool HasIsShangxiaji {
    get { return hasIsShangxiaji; }
  }
  public int IsShangxiaji {
    get { return isShangxiaji_; }
  }
  
  public const int IsBenjiFieldNumber = 5;
  private bool hasIsBenji;
  private int isBenji_;
  public bool HasIsBenji {
    get { return hasIsBenji; }
  }
  public int IsBenji {
    get { return isBenji_; }
  }
  
  public const int IsYikousanFieldNumber = 6;
  private bool hasIsYikousan;
  private int isYikousan_;
  public bool HasIsYikousan {
    get { return hasIsYikousan; }
  }
  public int IsYikousan {
    get { return isYikousan_; }
  }
  
  public const int RoomPeoFieldNumber = 7;
  private bool hasRoomPeo;
  private int roomPeo_;
  public bool HasRoomPeo {
    get { return hasRoomPeo; }
  }
  public int RoomPeo {
    get { return roomPeo_; }
  }
  
  public const int CountFieldNumber = 8;
  private bool hasCount;
  private int count_;
  public bool HasCount {
    get { return hasCount; }
  }
  public int Count {
    get { return count_; }
  }
  
  public const int IsLianzhuangFieldNumber = 9;
  private bool hasIsLianzhuang;
  private int isLianzhuang_;
  public bool HasIsLianzhuang {
    get { return hasIsLianzhuang; }
  }
  public int IsLianzhuang {
    get { return isLianzhuang_; }
  }
  
  public const int LatitudeFieldNumber = 10;
  private bool hasLatitude;
  private string latitude_ = "";
  public bool HasLatitude {
    get { return hasLatitude; }
  }
  public string Latitude {
    get { return latitude_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasOpenid) return false;
      if (!hasIsWgj) return false;
      if (!hasIsXinqiji) return false;
      if (!hasIsShangxiaji) return false;
      if (!hasIsBenji) return false;
      if (!hasIsYikousan) return false;
      if (!hasCount) return false;
      if (!hasIsLianzhuang) return false;
      if (!hasLatitude) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sendCreateRoomFieldNames;
    if (hasOpenid) {
      output.WriteString(1, field_names[8], Openid);
    }
    if (hasIsWgj) {
      output.WriteInt32(2, field_names[5], IsWgj);
    }
    if (hasIsXinqiji) {
      output.WriteInt32(3, field_names[6], IsXinqiji);
    }
    if (hasIsShangxiaji) {
      output.WriteInt32(4, field_names[4], IsShangxiaji);
    }
    if (hasIsBenji) {
      output.WriteInt32(5, field_names[2], IsBenji);
    }
    if (hasIsYikousan) {
      output.WriteInt32(6, field_names[7], IsYikousan);
    }
    if (hasRoomPeo) {
      output.WriteInt32(7, field_names[9], RoomPeo);
    }
    if (hasCount) {
      output.WriteInt32(8, field_names[1], Count);
    }
    if (hasIsLianzhuang) {
      output.WriteInt32(9, field_names[3], IsLianzhuang);
    }
    if (hasLatitude) {
      output.WriteString(10, field_names[0], Latitude);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasOpenid) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Openid);
    }
    if (hasIsWgj) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, IsWgj);
    }
    if (hasIsXinqiji) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, IsXinqiji);
    }
    if (hasIsShangxiaji) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, IsShangxiaji);
    }
    if (hasIsBenji) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, IsBenji);
    }
    if (hasIsYikousan) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, IsYikousan);
    }
    if (hasRoomPeo) {
      size += pb::CodedOutputStream.ComputeInt32Size(7, RoomPeo);
    }
    if (hasCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(8, Count);
    }
    if (hasIsLianzhuang) {
      size += pb::CodedOutputStream.ComputeInt32Size(9, IsLianzhuang);
    }
    if (hasLatitude) {
      size += pb::CodedOutputStream.ComputeStringSize(10, Latitude);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SendCreateRoom ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendCreateRoom ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendCreateRoom ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendCreateRoom ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendCreateRoom ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendCreateRoom ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SendCreateRoom ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SendCreateRoom ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SendCreateRoom ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendCreateRoom ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SendCreateRoom MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SendCreateRoom prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SendCreateRoom, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SendCreateRoom cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SendCreateRoom result;
    
    private SendCreateRoom PrepareBuilder() {
      if (resultIsReadOnly) {
        SendCreateRoom original = result;
        result = new SendCreateRoom();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SendCreateRoom MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SendCreateRoom.Descriptor; }
    }
    
    public override SendCreateRoom DefaultInstanceForType {
      get { return global::SendCreateRoom.DefaultInstance; }
    }
    
    public override SendCreateRoom BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SendCreateRoom) {
        return MergeFrom((SendCreateRoom) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SendCreateRoom other) {
      if (other == global::SendCreateRoom.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasOpenid) {
        Openid = other.Openid;
      }
      if (other.HasIsWgj) {
        IsWgj = other.IsWgj;
      }
      if (other.HasIsXinqiji) {
        IsXinqiji = other.IsXinqiji;
      }
      if (other.HasIsShangxiaji) {
        IsShangxiaji = other.IsShangxiaji;
      }
      if (other.HasIsBenji) {
        IsBenji = other.IsBenji;
      }
      if (other.HasIsYikousan) {
        IsYikousan = other.IsYikousan;
      }
      if (other.HasRoomPeo) {
        RoomPeo = other.RoomPeo;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      if (other.HasIsLianzhuang) {
        IsLianzhuang = other.IsLianzhuang;
      }
      if (other.HasLatitude) {
        Latitude = other.Latitude;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sendCreateRoomFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sendCreateRoomFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasOpenid = input.ReadString(ref result.openid_);
            break;
          }
          case 16: {
            result.hasIsWgj = input.ReadInt32(ref result.isWgj_);
            break;
          }
          case 24: {
            result.hasIsXinqiji = input.ReadInt32(ref result.isXinqiji_);
            break;
          }
          case 32: {
            result.hasIsShangxiaji = input.ReadInt32(ref result.isShangxiaji_);
            break;
          }
          case 40: {
            result.hasIsBenji = input.ReadInt32(ref result.isBenji_);
            break;
          }
          case 48: {
            result.hasIsYikousan = input.ReadInt32(ref result.isYikousan_);
            break;
          }
          case 56: {
            result.hasRoomPeo = input.ReadInt32(ref result.roomPeo_);
            break;
          }
          case 64: {
            result.hasCount = input.ReadInt32(ref result.count_);
            break;
          }
          case 72: {
            result.hasIsLianzhuang = input.ReadInt32(ref result.isLianzhuang_);
            break;
          }
          case 82: {
            result.hasLatitude = input.ReadString(ref result.latitude_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasOpenid {
      get { return result.hasOpenid; }
    }
    public string Openid {
      get { return result.Openid; }
      set { SetOpenid(value); }
    }
    public Builder SetOpenid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOpenid = true;
      result.openid_ = value;
      return this;
    }
    public Builder ClearOpenid() {
      PrepareBuilder();
      result.hasOpenid = false;
      result.openid_ = "";
      return this;
    }
    
    public bool HasIsWgj {
      get { return result.hasIsWgj; }
    }
    public int IsWgj {
      get { return result.IsWgj; }
      set { SetIsWgj(value); }
    }
    public Builder SetIsWgj(int value) {
      PrepareBuilder();
      result.hasIsWgj = true;
      result.isWgj_ = value;
      return this;
    }
    public Builder ClearIsWgj() {
      PrepareBuilder();
      result.hasIsWgj = false;
      result.isWgj_ = 0;
      return this;
    }
    
    public bool HasIsXinqiji {
      get { return result.hasIsXinqiji; }
    }
    public int IsXinqiji {
      get { return result.IsXinqiji; }
      set { SetIsXinqiji(value); }
    }
    public Builder SetIsXinqiji(int value) {
      PrepareBuilder();
      result.hasIsXinqiji = true;
      result.isXinqiji_ = value;
      return this;
    }
    public Builder ClearIsXinqiji() {
      PrepareBuilder();
      result.hasIsXinqiji = false;
      result.isXinqiji_ = 0;
      return this;
    }
    
    public bool HasIsShangxiaji {
      get { return result.hasIsShangxiaji; }
    }
    public int IsShangxiaji {
      get { return result.IsShangxiaji; }
      set { SetIsShangxiaji(value); }
    }
    public Builder SetIsShangxiaji(int value) {
      PrepareBuilder();
      result.hasIsShangxiaji = true;
      result.isShangxiaji_ = value;
      return this;
    }
    public Builder ClearIsShangxiaji() {
      PrepareBuilder();
      result.hasIsShangxiaji = false;
      result.isShangxiaji_ = 0;
      return this;
    }
    
    public bool HasIsBenji {
      get { return result.hasIsBenji; }
    }
    public int IsBenji {
      get { return result.IsBenji; }
      set { SetIsBenji(value); }
    }
    public Builder SetIsBenji(int value) {
      PrepareBuilder();
      result.hasIsBenji = true;
      result.isBenji_ = value;
      return this;
    }
    public Builder ClearIsBenji() {
      PrepareBuilder();
      result.hasIsBenji = false;
      result.isBenji_ = 0;
      return this;
    }
    
    public bool HasIsYikousan {
      get { return result.hasIsYikousan; }
    }
    public int IsYikousan {
      get { return result.IsYikousan; }
      set { SetIsYikousan(value); }
    }
    public Builder SetIsYikousan(int value) {
      PrepareBuilder();
      result.hasIsYikousan = true;
      result.isYikousan_ = value;
      return this;
    }
    public Builder ClearIsYikousan() {
      PrepareBuilder();
      result.hasIsYikousan = false;
      result.isYikousan_ = 0;
      return this;
    }
    
    public bool HasRoomPeo {
      get { return result.hasRoomPeo; }
    }
    public int RoomPeo {
      get { return result.RoomPeo; }
      set { SetRoomPeo(value); }
    }
    public Builder SetRoomPeo(int value) {
      PrepareBuilder();
      result.hasRoomPeo = true;
      result.roomPeo_ = value;
      return this;
    }
    public Builder ClearRoomPeo() {
      PrepareBuilder();
      result.hasRoomPeo = false;
      result.roomPeo_ = 0;
      return this;
    }
    
    public bool HasCount {
      get { return result.hasCount; }
    }
    public int Count {
      get { return result.Count; }
      set { SetCount(value); }
    }
    public Builder SetCount(int value) {
      PrepareBuilder();
      result.hasCount = true;
      result.count_ = value;
      return this;
    }
    public Builder ClearCount() {
      PrepareBuilder();
      result.hasCount = false;
      result.count_ = 0;
      return this;
    }
    
    public bool HasIsLianzhuang {
      get { return result.hasIsLianzhuang; }
    }
    public int IsLianzhuang {
      get { return result.IsLianzhuang; }
      set { SetIsLianzhuang(value); }
    }
    public Builder SetIsLianzhuang(int value) {
      PrepareBuilder();
      result.hasIsLianzhuang = true;
      result.isLianzhuang_ = value;
      return this;
    }
    public Builder ClearIsLianzhuang() {
      PrepareBuilder();
      result.hasIsLianzhuang = false;
      result.isLianzhuang_ = 0;
      return this;
    }
    
    public bool HasLatitude {
      get { return result.hasLatitude; }
    }
    public string Latitude {
      get { return result.Latitude; }
      set { SetLatitude(value); }
    }
    public Builder SetLatitude(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasLatitude = true;
      result.latitude_ = value;
      return this;
    }
    public Builder ClearLatitude() {
      PrepareBuilder();
      result.hasLatitude = false;
      result.latitude_ = "";
      return this;
    }
  }
  static SendCreateRoom() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnCreateRoom : pb::GeneratedMessage<ReturnCreateRoom, ReturnCreateRoom.Builder> {
  private ReturnCreateRoom() { }
  private static readonly ReturnCreateRoom defaultInstance = new ReturnCreateRoom().MakeReadOnly();
  private static readonly string[] _returnCreateRoomFieldNames = new string[] { "roomID", "userinfo" };
  private static readonly uint[] _returnCreateRoomFieldTags = new uint[] { 8, 18 };
  public static ReturnCreateRoom DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnCreateRoom DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnCreateRoom ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnCreateRoom__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnCreateRoom, ReturnCreateRoom.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnCreateRoom__FieldAccessorTable; }
  }
  
  public const int RoomIDFieldNumber = 1;
  private bool hasRoomID;
  private int roomID_;
  public bool HasRoomID {
    get { return hasRoomID; }
  }
  public int RoomID {
    get { return roomID_; }
  }
  
  public const int UserinfoFieldNumber = 2;
  private bool hasUserinfo;
  private global::Userinfo userinfo_;
  public bool HasUserinfo {
    get { return hasUserinfo; }
  }
  public global::Userinfo Userinfo {
    get { return userinfo_ ?? global::Userinfo.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasRoomID) return false;
      if (!hasUserinfo) return false;
      if (!Userinfo.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnCreateRoomFieldNames;
    if (hasRoomID) {
      output.WriteInt32(1, field_names[0], RoomID);
    }
    if (hasUserinfo) {
      output.WriteMessage(2, field_names[1], Userinfo);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasRoomID) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, RoomID);
    }
    if (hasUserinfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, Userinfo);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnCreateRoom ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnCreateRoom ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnCreateRoom ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnCreateRoom ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnCreateRoom ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnCreateRoom ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnCreateRoom ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnCreateRoom ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnCreateRoom ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnCreateRoom ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnCreateRoom MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnCreateRoom prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnCreateRoom, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnCreateRoom cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnCreateRoom result;
    
    private ReturnCreateRoom PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnCreateRoom original = result;
        result = new ReturnCreateRoom();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnCreateRoom MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnCreateRoom.Descriptor; }
    }
    
    public override ReturnCreateRoom DefaultInstanceForType {
      get { return global::ReturnCreateRoom.DefaultInstance; }
    }
    
    public override ReturnCreateRoom BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnCreateRoom) {
        return MergeFrom((ReturnCreateRoom) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnCreateRoom other) {
      if (other == global::ReturnCreateRoom.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasRoomID) {
        RoomID = other.RoomID;
      }
      if (other.HasUserinfo) {
        MergeUserinfo(other.Userinfo);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnCreateRoomFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnCreateRoomFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasRoomID = input.ReadInt32(ref result.roomID_);
            break;
          }
          case 18: {
            global::Userinfo.Builder subBuilder = global::Userinfo.CreateBuilder();
            if (result.hasUserinfo) {
              subBuilder.MergeFrom(Userinfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Userinfo = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasRoomID {
      get { return result.hasRoomID; }
    }
    public int RoomID {
      get { return result.RoomID; }
      set { SetRoomID(value); }
    }
    public Builder SetRoomID(int value) {
      PrepareBuilder();
      result.hasRoomID = true;
      result.roomID_ = value;
      return this;
    }
    public Builder ClearRoomID() {
      PrepareBuilder();
      result.hasRoomID = false;
      result.roomID_ = 0;
      return this;
    }
    
    public bool HasUserinfo {
     get { return result.hasUserinfo; }
    }
    public global::Userinfo Userinfo {
      get { return result.Userinfo; }
      set { SetUserinfo(value); }
    }
    public Builder SetUserinfo(global::Userinfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUserinfo = true;
      result.userinfo_ = value;
      return this;
    }
    public Builder SetUserinfo(global::Userinfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasUserinfo = true;
      result.userinfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeUserinfo(global::Userinfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasUserinfo &&
          result.userinfo_ != global::Userinfo.DefaultInstance) {
          result.userinfo_ = global::Userinfo.CreateBuilder(result.userinfo_).MergeFrom(value).BuildPartial();
      } else {
        result.userinfo_ = value;
      }
      result.hasUserinfo = true;
      return this;
    }
    public Builder ClearUserinfo() {
      PrepareBuilder();
      result.hasUserinfo = false;
      result.userinfo_ = null;
      return this;
    }
  }
  static ReturnCreateRoom() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Userinfo : pb::GeneratedMessage<Userinfo, Userinfo.Builder> {
  private Userinfo() { }
  private static readonly Userinfo defaultInstance = new Userinfo().MakeReadOnly();
  private static readonly string[] _userinfoFieldNames = new string[] { "CumulativeScore", "UserID", "UserIP", "headimg", "nickname", "openid", "sex", "user_FW", "user_bean", "user_gold" };
  private static readonly uint[] _userinfoFieldTags = new uint[] { 80, 64, 74, 26, 18, 10, 32, 56, 40, 48 };
  public static Userinfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override Userinfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override Userinfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_Userinfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<Userinfo, Userinfo.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_Userinfo__FieldAccessorTable; }
  }
  
  public const int OpenidFieldNumber = 1;
  private bool hasOpenid;
  private string openid_ = "";
  public bool HasOpenid {
    get { return hasOpenid; }
  }
  public string Openid {
    get { return openid_; }
  }
  
  public const int NicknameFieldNumber = 2;
  private bool hasNickname;
  private string nickname_ = "";
  public bool HasNickname {
    get { return hasNickname; }
  }
  public string Nickname {
    get { return nickname_; }
  }
  
  public const int HeadimgFieldNumber = 3;
  private bool hasHeadimg;
  private string headimg_ = "";
  public bool HasHeadimg {
    get { return hasHeadimg; }
  }
  public string Headimg {
    get { return headimg_; }
  }
  
  public const int SexFieldNumber = 4;
  private bool hasSex;
  private int sex_;
  public bool HasSex {
    get { return hasSex; }
  }
  public int Sex {
    get { return sex_; }
  }
  
  public const int UserBeanFieldNumber = 5;
  private bool hasUserBean;
  private int userBean_;
  public bool HasUserBean {
    get { return hasUserBean; }
  }
  public int UserBean {
    get { return userBean_; }
  }
  
  public const int UserGoldFieldNumber = 6;
  private bool hasUserGold;
  private int userGold_;
  public bool HasUserGold {
    get { return hasUserGold; }
  }
  public int UserGold {
    get { return userGold_; }
  }
  
  public const int UserFWFieldNumber = 7;
  private bool hasUserFW;
  private int userFW_;
  public bool HasUserFW {
    get { return hasUserFW; }
  }
  public int UserFW {
    get { return userFW_; }
  }
  
  public const int UserIDFieldNumber = 8;
  private bool hasUserID;
  private long userID_;
  public bool HasUserID {
    get { return hasUserID; }
  }
  public long UserID {
    get { return userID_; }
  }
  
  public const int UserIPFieldNumber = 9;
  private bool hasUserIP;
  private string userIP_ = "";
  public bool HasUserIP {
    get { return hasUserIP; }
  }
  public string UserIP {
    get { return userIP_; }
  }
  
  public const int CumulativeScoreFieldNumber = 10;
  private bool hasCumulativeScore;
  private int cumulativeScore_;
  public bool HasCumulativeScore {
    get { return hasCumulativeScore; }
  }
  public int CumulativeScore {
    get { return cumulativeScore_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasOpenid) return false;
      if (!hasNickname) return false;
      if (!hasHeadimg) return false;
      if (!hasSex) return false;
      if (!hasUserBean) return false;
      if (!hasUserGold) return false;
      if (!hasUserFW) return false;
      if (!hasUserID) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _userinfoFieldNames;
    if (hasOpenid) {
      output.WriteString(1, field_names[5], Openid);
    }
    if (hasNickname) {
      output.WriteString(2, field_names[4], Nickname);
    }
    if (hasHeadimg) {
      output.WriteString(3, field_names[3], Headimg);
    }
    if (hasSex) {
      output.WriteInt32(4, field_names[6], Sex);
    }
    if (hasUserBean) {
      output.WriteInt32(5, field_names[8], UserBean);
    }
    if (hasUserGold) {
      output.WriteInt32(6, field_names[9], UserGold);
    }
    if (hasUserFW) {
      output.WriteInt32(7, field_names[7], UserFW);
    }
    if (hasUserID) {
      output.WriteInt64(8, field_names[1], UserID);
    }
    if (hasUserIP) {
      output.WriteString(9, field_names[2], UserIP);
    }
    if (hasCumulativeScore) {
      output.WriteInt32(10, field_names[0], CumulativeScore);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasOpenid) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Openid);
    }
    if (hasNickname) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Nickname);
    }
    if (hasHeadimg) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Headimg);
    }
    if (hasSex) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Sex);
    }
    if (hasUserBean) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, UserBean);
    }
    if (hasUserGold) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, UserGold);
    }
    if (hasUserFW) {
      size += pb::CodedOutputStream.ComputeInt32Size(7, UserFW);
    }
    if (hasUserID) {
      size += pb::CodedOutputStream.ComputeInt64Size(8, UserID);
    }
    if (hasUserIP) {
      size += pb::CodedOutputStream.ComputeStringSize(9, UserIP);
    }
    if (hasCumulativeScore) {
      size += pb::CodedOutputStream.ComputeInt32Size(10, CumulativeScore);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static Userinfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Userinfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Userinfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Userinfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Userinfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Userinfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static Userinfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static Userinfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static Userinfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Userinfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private Userinfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(Userinfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<Userinfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(Userinfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private Userinfo result;
    
    private Userinfo PrepareBuilder() {
      if (resultIsReadOnly) {
        Userinfo original = result;
        result = new Userinfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override Userinfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::Userinfo.Descriptor; }
    }
    
    public override Userinfo DefaultInstanceForType {
      get { return global::Userinfo.DefaultInstance; }
    }
    
    public override Userinfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is Userinfo) {
        return MergeFrom((Userinfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(Userinfo other) {
      if (other == global::Userinfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasOpenid) {
        Openid = other.Openid;
      }
      if (other.HasNickname) {
        Nickname = other.Nickname;
      }
      if (other.HasHeadimg) {
        Headimg = other.Headimg;
      }
      if (other.HasSex) {
        Sex = other.Sex;
      }
      if (other.HasUserBean) {
        UserBean = other.UserBean;
      }
      if (other.HasUserGold) {
        UserGold = other.UserGold;
      }
      if (other.HasUserFW) {
        UserFW = other.UserFW;
      }
      if (other.HasUserID) {
        UserID = other.UserID;
      }
      if (other.HasUserIP) {
        UserIP = other.UserIP;
      }
      if (other.HasCumulativeScore) {
        CumulativeScore = other.CumulativeScore;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_userinfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _userinfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasOpenid = input.ReadString(ref result.openid_);
            break;
          }
          case 18: {
            result.hasNickname = input.ReadString(ref result.nickname_);
            break;
          }
          case 26: {
            result.hasHeadimg = input.ReadString(ref result.headimg_);
            break;
          }
          case 32: {
            result.hasSex = input.ReadInt32(ref result.sex_);
            break;
          }
          case 40: {
            result.hasUserBean = input.ReadInt32(ref result.userBean_);
            break;
          }
          case 48: {
            result.hasUserGold = input.ReadInt32(ref result.userGold_);
            break;
          }
          case 56: {
            result.hasUserFW = input.ReadInt32(ref result.userFW_);
            break;
          }
          case 64: {
            result.hasUserID = input.ReadInt64(ref result.userID_);
            break;
          }
          case 74: {
            result.hasUserIP = input.ReadString(ref result.userIP_);
            break;
          }
          case 80: {
            result.hasCumulativeScore = input.ReadInt32(ref result.cumulativeScore_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasOpenid {
      get { return result.hasOpenid; }
    }
    public string Openid {
      get { return result.Openid; }
      set { SetOpenid(value); }
    }
    public Builder SetOpenid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOpenid = true;
      result.openid_ = value;
      return this;
    }
    public Builder ClearOpenid() {
      PrepareBuilder();
      result.hasOpenid = false;
      result.openid_ = "";
      return this;
    }
    
    public bool HasNickname {
      get { return result.hasNickname; }
    }
    public string Nickname {
      get { return result.Nickname; }
      set { SetNickname(value); }
    }
    public Builder SetNickname(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasNickname = true;
      result.nickname_ = value;
      return this;
    }
    public Builder ClearNickname() {
      PrepareBuilder();
      result.hasNickname = false;
      result.nickname_ = "";
      return this;
    }
    
    public bool HasHeadimg {
      get { return result.hasHeadimg; }
    }
    public string Headimg {
      get { return result.Headimg; }
      set { SetHeadimg(value); }
    }
    public Builder SetHeadimg(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasHeadimg = true;
      result.headimg_ = value;
      return this;
    }
    public Builder ClearHeadimg() {
      PrepareBuilder();
      result.hasHeadimg = false;
      result.headimg_ = "";
      return this;
    }
    
    public bool HasSex {
      get { return result.hasSex; }
    }
    public int Sex {
      get { return result.Sex; }
      set { SetSex(value); }
    }
    public Builder SetSex(int value) {
      PrepareBuilder();
      result.hasSex = true;
      result.sex_ = value;
      return this;
    }
    public Builder ClearSex() {
      PrepareBuilder();
      result.hasSex = false;
      result.sex_ = 0;
      return this;
    }
    
    public bool HasUserBean {
      get { return result.hasUserBean; }
    }
    public int UserBean {
      get { return result.UserBean; }
      set { SetUserBean(value); }
    }
    public Builder SetUserBean(int value) {
      PrepareBuilder();
      result.hasUserBean = true;
      result.userBean_ = value;
      return this;
    }
    public Builder ClearUserBean() {
      PrepareBuilder();
      result.hasUserBean = false;
      result.userBean_ = 0;
      return this;
    }
    
    public bool HasUserGold {
      get { return result.hasUserGold; }
    }
    public int UserGold {
      get { return result.UserGold; }
      set { SetUserGold(value); }
    }
    public Builder SetUserGold(int value) {
      PrepareBuilder();
      result.hasUserGold = true;
      result.userGold_ = value;
      return this;
    }
    public Builder ClearUserGold() {
      PrepareBuilder();
      result.hasUserGold = false;
      result.userGold_ = 0;
      return this;
    }
    
    public bool HasUserFW {
      get { return result.hasUserFW; }
    }
    public int UserFW {
      get { return result.UserFW; }
      set { SetUserFW(value); }
    }
    public Builder SetUserFW(int value) {
      PrepareBuilder();
      result.hasUserFW = true;
      result.userFW_ = value;
      return this;
    }
    public Builder ClearUserFW() {
      PrepareBuilder();
      result.hasUserFW = false;
      result.userFW_ = 0;
      return this;
    }
    
    public bool HasUserID {
      get { return result.hasUserID; }
    }
    public long UserID {
      get { return result.UserID; }
      set { SetUserID(value); }
    }
    public Builder SetUserID(long value) {
      PrepareBuilder();
      result.hasUserID = true;
      result.userID_ = value;
      return this;
    }
    public Builder ClearUserID() {
      PrepareBuilder();
      result.hasUserID = false;
      result.userID_ = 0L;
      return this;
    }
    
    public bool HasUserIP {
      get { return result.hasUserIP; }
    }
    public string UserIP {
      get { return result.UserIP; }
      set { SetUserIP(value); }
    }
    public Builder SetUserIP(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUserIP = true;
      result.userIP_ = value;
      return this;
    }
    public Builder ClearUserIP() {
      PrepareBuilder();
      result.hasUserIP = false;
      result.userIP_ = "";
      return this;
    }
    
    public bool HasCumulativeScore {
      get { return result.hasCumulativeScore; }
    }
    public int CumulativeScore {
      get { return result.CumulativeScore; }
      set { SetCumulativeScore(value); }
    }
    public Builder SetCumulativeScore(int value) {
      PrepareBuilder();
      result.hasCumulativeScore = true;
      result.cumulativeScore_ = value;
      return this;
    }
    public Builder ClearCumulativeScore() {
      PrepareBuilder();
      result.hasCumulativeScore = false;
      result.cumulativeScore_ = 0;
      return this;
    }
  }
  static Userinfo() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SendAddRoom : pb::GeneratedMessage<SendAddRoom, SendAddRoom.Builder> {
  private SendAddRoom() { }
  private static readonly SendAddRoom defaultInstance = new SendAddRoom().MakeReadOnly();
  private static readonly string[] _sendAddRoomFieldNames = new string[] { "Latitude", "openid", "roomID" };
  private static readonly uint[] _sendAddRoomFieldTags = new uint[] { 26, 18, 8 };
  public static SendAddRoom DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SendAddRoom DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SendAddRoom ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_SendAddRoom__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SendAddRoom, SendAddRoom.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_SendAddRoom__FieldAccessorTable; }
  }
  
  public const int RoomIDFieldNumber = 1;
  private bool hasRoomID;
  private int roomID_;
  public bool HasRoomID {
    get { return hasRoomID; }
  }
  public int RoomID {
    get { return roomID_; }
  }
  
  public const int OpenidFieldNumber = 2;
  private bool hasOpenid;
  private string openid_ = "";
  public bool HasOpenid {
    get { return hasOpenid; }
  }
  public string Openid {
    get { return openid_; }
  }
  
  public const int LatitudeFieldNumber = 3;
  private bool hasLatitude;
  private string latitude_ = "";
  public bool HasLatitude {
    get { return hasLatitude; }
  }
  public string Latitude {
    get { return latitude_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasRoomID) return false;
      if (!hasOpenid) return false;
      if (!hasLatitude) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sendAddRoomFieldNames;
    if (hasRoomID) {
      output.WriteInt32(1, field_names[2], RoomID);
    }
    if (hasOpenid) {
      output.WriteString(2, field_names[1], Openid);
    }
    if (hasLatitude) {
      output.WriteString(3, field_names[0], Latitude);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasRoomID) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, RoomID);
    }
    if (hasOpenid) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Openid);
    }
    if (hasLatitude) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Latitude);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SendAddRoom ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendAddRoom ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendAddRoom ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendAddRoom ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendAddRoom ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendAddRoom ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SendAddRoom ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SendAddRoom ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SendAddRoom ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendAddRoom ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SendAddRoom MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SendAddRoom prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SendAddRoom, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SendAddRoom cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SendAddRoom result;
    
    private SendAddRoom PrepareBuilder() {
      if (resultIsReadOnly) {
        SendAddRoom original = result;
        result = new SendAddRoom();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SendAddRoom MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SendAddRoom.Descriptor; }
    }
    
    public override SendAddRoom DefaultInstanceForType {
      get { return global::SendAddRoom.DefaultInstance; }
    }
    
    public override SendAddRoom BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SendAddRoom) {
        return MergeFrom((SendAddRoom) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SendAddRoom other) {
      if (other == global::SendAddRoom.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasRoomID) {
        RoomID = other.RoomID;
      }
      if (other.HasOpenid) {
        Openid = other.Openid;
      }
      if (other.HasLatitude) {
        Latitude = other.Latitude;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sendAddRoomFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sendAddRoomFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasRoomID = input.ReadInt32(ref result.roomID_);
            break;
          }
          case 18: {
            result.hasOpenid = input.ReadString(ref result.openid_);
            break;
          }
          case 26: {
            result.hasLatitude = input.ReadString(ref result.latitude_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasRoomID {
      get { return result.hasRoomID; }
    }
    public int RoomID {
      get { return result.RoomID; }
      set { SetRoomID(value); }
    }
    public Builder SetRoomID(int value) {
      PrepareBuilder();
      result.hasRoomID = true;
      result.roomID_ = value;
      return this;
    }
    public Builder ClearRoomID() {
      PrepareBuilder();
      result.hasRoomID = false;
      result.roomID_ = 0;
      return this;
    }
    
    public bool HasOpenid {
      get { return result.hasOpenid; }
    }
    public string Openid {
      get { return result.Openid; }
      set { SetOpenid(value); }
    }
    public Builder SetOpenid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOpenid = true;
      result.openid_ = value;
      return this;
    }
    public Builder ClearOpenid() {
      PrepareBuilder();
      result.hasOpenid = false;
      result.openid_ = "";
      return this;
    }
    
    public bool HasLatitude {
      get { return result.hasLatitude; }
    }
    public string Latitude {
      get { return result.Latitude; }
      set { SetLatitude(value); }
    }
    public Builder SetLatitude(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasLatitude = true;
      result.latitude_ = value;
      return this;
    }
    public Builder ClearLatitude() {
      PrepareBuilder();
      result.hasLatitude = false;
      result.latitude_ = "";
      return this;
    }
  }
  static SendAddRoom() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnAddRoom : pb::GeneratedMessage<ReturnAddRoom, ReturnAddRoom.Builder> {
  private ReturnAddRoom() { }
  private static readonly ReturnAddRoom defaultInstance = new ReturnAddRoom().MakeReadOnly();
  private static readonly string[] _returnAddRoomFieldNames = new string[] { "state", "userinfo" };
  private static readonly uint[] _returnAddRoomFieldTags = new uint[] { 8, 18 };
  public static ReturnAddRoom DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnAddRoom DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnAddRoom ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnAddRoom__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnAddRoom, ReturnAddRoom.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnAddRoom__FieldAccessorTable; }
  }
  
  public const int StateFieldNumber = 1;
  private bool hasState;
  private int state_;
  public bool HasState {
    get { return hasState; }
  }
  public int State {
    get { return state_; }
  }
  
  public const int UserinfoFieldNumber = 2;
  private pbc::PopsicleList<global::Userinfo> userinfo_ = new pbc::PopsicleList<global::Userinfo>();
  public scg::IList<global::Userinfo> UserinfoList {
    get { return userinfo_; }
  }
  public int UserinfoCount {
    get { return userinfo_.Count; }
  }
  public global::Userinfo GetUserinfo(int index) {
    return userinfo_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasState) return false;
      foreach (global::Userinfo element in UserinfoList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnAddRoomFieldNames;
    if (hasState) {
      output.WriteInt32(1, field_names[0], State);
    }
    if (userinfo_.Count > 0) {
      output.WriteMessageArray(2, field_names[1], userinfo_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasState) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, State);
    }
    foreach (global::Userinfo element in UserinfoList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnAddRoom ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnAddRoom ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnAddRoom ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnAddRoom ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnAddRoom ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnAddRoom ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnAddRoom ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnAddRoom ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnAddRoom ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnAddRoom ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnAddRoom MakeReadOnly() {
    userinfo_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnAddRoom prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnAddRoom, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnAddRoom cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnAddRoom result;
    
    private ReturnAddRoom PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnAddRoom original = result;
        result = new ReturnAddRoom();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnAddRoom MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnAddRoom.Descriptor; }
    }
    
    public override ReturnAddRoom DefaultInstanceForType {
      get { return global::ReturnAddRoom.DefaultInstance; }
    }
    
    public override ReturnAddRoom BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnAddRoom) {
        return MergeFrom((ReturnAddRoom) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnAddRoom other) {
      if (other == global::ReturnAddRoom.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasState) {
        State = other.State;
      }
      if (other.userinfo_.Count != 0) {
        result.userinfo_.Add(other.userinfo_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnAddRoomFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnAddRoomFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasState = input.ReadInt32(ref result.state_);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.userinfo_, global::Userinfo.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasState {
      get { return result.hasState; }
    }
    public int State {
      get { return result.State; }
      set { SetState(value); }
    }
    public Builder SetState(int value) {
      PrepareBuilder();
      result.hasState = true;
      result.state_ = value;
      return this;
    }
    public Builder ClearState() {
      PrepareBuilder();
      result.hasState = false;
      result.state_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::Userinfo> UserinfoList {
      get { return PrepareBuilder().userinfo_; }
    }
    public int UserinfoCount {
      get { return result.UserinfoCount; }
    }
    public global::Userinfo GetUserinfo(int index) {
      return result.GetUserinfo(index);
    }
    public Builder SetUserinfo(int index, global::Userinfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.userinfo_[index] = value;
      return this;
    }
    public Builder SetUserinfo(int index, global::Userinfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.userinfo_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddUserinfo(global::Userinfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.userinfo_.Add(value);
      return this;
    }
    public Builder AddUserinfo(global::Userinfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.userinfo_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeUserinfo(scg::IEnumerable<global::Userinfo> values) {
      PrepareBuilder();
      result.userinfo_.Add(values);
      return this;
    }
    public Builder ClearUserinfo() {
      PrepareBuilder();
      result.userinfo_.Clear();
      return this;
    }
  }
  static ReturnAddRoom() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnUserInfo : pb::GeneratedMessage<ReturnUserInfo, ReturnUserInfo.Builder> {
  private ReturnUserInfo() { }
  private static readonly ReturnUserInfo defaultInstance = new ReturnUserInfo().MakeReadOnly();
  private static readonly string[] _returnUserInfoFieldNames = new string[] { "userinfo" };
  private static readonly uint[] _returnUserInfoFieldTags = new uint[] { 10 };
  public static ReturnUserInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnUserInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnUserInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnUserInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnUserInfo, ReturnUserInfo.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnUserInfo__FieldAccessorTable; }
  }
  
  public const int UserinfoFieldNumber = 1;
  private pbc::PopsicleList<global::Userinfo> userinfo_ = new pbc::PopsicleList<global::Userinfo>();
  public scg::IList<global::Userinfo> UserinfoList {
    get { return userinfo_; }
  }
  public int UserinfoCount {
    get { return userinfo_.Count; }
  }
  public global::Userinfo GetUserinfo(int index) {
    return userinfo_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::Userinfo element in UserinfoList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnUserInfoFieldNames;
    if (userinfo_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], userinfo_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::Userinfo element in UserinfoList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnUserInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnUserInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnUserInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnUserInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnUserInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnUserInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnUserInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnUserInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnUserInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnUserInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnUserInfo MakeReadOnly() {
    userinfo_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnUserInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnUserInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnUserInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnUserInfo result;
    
    private ReturnUserInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnUserInfo original = result;
        result = new ReturnUserInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnUserInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnUserInfo.Descriptor; }
    }
    
    public override ReturnUserInfo DefaultInstanceForType {
      get { return global::ReturnUserInfo.DefaultInstance; }
    }
    
    public override ReturnUserInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnUserInfo) {
        return MergeFrom((ReturnUserInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnUserInfo other) {
      if (other == global::ReturnUserInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.userinfo_.Count != 0) {
        result.userinfo_.Add(other.userinfo_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnUserInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnUserInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.userinfo_, global::Userinfo.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::Userinfo> UserinfoList {
      get { return PrepareBuilder().userinfo_; }
    }
    public int UserinfoCount {
      get { return result.UserinfoCount; }
    }
    public global::Userinfo GetUserinfo(int index) {
      return result.GetUserinfo(index);
    }
    public Builder SetUserinfo(int index, global::Userinfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.userinfo_[index] = value;
      return this;
    }
    public Builder SetUserinfo(int index, global::Userinfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.userinfo_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddUserinfo(global::Userinfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.userinfo_.Add(value);
      return this;
    }
    public Builder AddUserinfo(global::Userinfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.userinfo_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeUserinfo(scg::IEnumerable<global::Userinfo> values) {
      PrepareBuilder();
      result.userinfo_.Add(values);
      return this;
    }
    public Builder ClearUserinfo() {
      PrepareBuilder();
      result.userinfo_.Clear();
      return this;
    }
  }
  static ReturnUserInfo() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MaJiang : pb::GeneratedMessage<MaJiang, MaJiang.Builder> {
  private MaJiang() { }
  private static readonly MaJiang defaultInstance = new MaJiang().MakeReadOnly();
  private static readonly string[] _maJiangFieldNames = new string[] { "PaiHS", "PaiID" };
  private static readonly uint[] _maJiangFieldTags = new uint[] { 16, 8 };
  public static MaJiang DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override MaJiang DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override MaJiang ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_MaJiang__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<MaJiang, MaJiang.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_MaJiang__FieldAccessorTable; }
  }
  
  public const int PaiIDFieldNumber = 1;
  private bool hasPaiID;
  private int paiID_;
  public bool HasPaiID {
    get { return hasPaiID; }
  }
  public int PaiID {
    get { return paiID_; }
  }
  
  public const int PaiHSFieldNumber = 2;
  private bool hasPaiHS;
  private int paiHS_;
  public bool HasPaiHS {
    get { return hasPaiHS; }
  }
  public int PaiHS {
    get { return paiHS_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPaiID) return false;
      if (!hasPaiHS) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _maJiangFieldNames;
    if (hasPaiID) {
      output.WriteInt32(1, field_names[1], PaiID);
    }
    if (hasPaiHS) {
      output.WriteInt32(2, field_names[0], PaiHS);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPaiID) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, PaiID);
    }
    if (hasPaiHS) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, PaiHS);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static MaJiang ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MaJiang ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MaJiang ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MaJiang ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MaJiang ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MaJiang ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static MaJiang ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static MaJiang ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static MaJiang ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MaJiang ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private MaJiang MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(MaJiang prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<MaJiang, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(MaJiang cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private MaJiang result;
    
    private MaJiang PrepareBuilder() {
      if (resultIsReadOnly) {
        MaJiang original = result;
        result = new MaJiang();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override MaJiang MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::MaJiang.Descriptor; }
    }
    
    public override MaJiang DefaultInstanceForType {
      get { return global::MaJiang.DefaultInstance; }
    }
    
    public override MaJiang BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is MaJiang) {
        return MergeFrom((MaJiang) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(MaJiang other) {
      if (other == global::MaJiang.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPaiID) {
        PaiID = other.PaiID;
      }
      if (other.HasPaiHS) {
        PaiHS = other.PaiHS;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_maJiangFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _maJiangFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPaiID = input.ReadInt32(ref result.paiID_);
            break;
          }
          case 16: {
            result.hasPaiHS = input.ReadInt32(ref result.paiHS_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPaiID {
      get { return result.hasPaiID; }
    }
    public int PaiID {
      get { return result.PaiID; }
      set { SetPaiID(value); }
    }
    public Builder SetPaiID(int value) {
      PrepareBuilder();
      result.hasPaiID = true;
      result.paiID_ = value;
      return this;
    }
    public Builder ClearPaiID() {
      PrepareBuilder();
      result.hasPaiID = false;
      result.paiID_ = 0;
      return this;
    }
    
    public bool HasPaiHS {
      get { return result.hasPaiHS; }
    }
    public int PaiHS {
      get { return result.PaiHS; }
      set { SetPaiHS(value); }
    }
    public Builder SetPaiHS(int value) {
      PrepareBuilder();
      result.hasPaiHS = true;
      result.paiHS_ = value;
      return this;
    }
    public Builder ClearPaiHS() {
      PrepareBuilder();
      result.hasPaiHS = false;
      result.paiHS_ = 0;
      return this;
    }
  }
  static MaJiang() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnStartGame : pb::GeneratedMessage<ReturnStartGame, ReturnStartGame.Builder> {
  private ReturnStartGame() { }
  private static readonly ReturnStartGame defaultInstance = new ReturnStartGame().MakeReadOnly();
  private static readonly string[] _returnStartGameFieldNames = new string[] { "chuuser", "mj" };
  private static readonly uint[] _returnStartGameFieldTags = new uint[] { 16, 10 };
  public static ReturnStartGame DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnStartGame DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnStartGame ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnStartGame__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnStartGame, ReturnStartGame.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnStartGame__FieldAccessorTable; }
  }
  
  public const int MjFieldNumber = 1;
  private pbc::PopsicleList<global::MaJiang> mj_ = new pbc::PopsicleList<global::MaJiang>();
  public scg::IList<global::MaJiang> MjList {
    get { return mj_; }
  }
  public int MjCount {
    get { return mj_.Count; }
  }
  public global::MaJiang GetMj(int index) {
    return mj_[index];
  }
  
  public const int ChuuserFieldNumber = 2;
  private bool hasChuuser;
  private int chuuser_;
  public bool HasChuuser {
    get { return hasChuuser; }
  }
  public int Chuuser {
    get { return chuuser_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasChuuser) return false;
      foreach (global::MaJiang element in MjList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnStartGameFieldNames;
    if (mj_.Count > 0) {
      output.WriteMessageArray(1, field_names[1], mj_);
    }
    if (hasChuuser) {
      output.WriteInt32(2, field_names[0], Chuuser);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::MaJiang element in MjList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    if (hasChuuser) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Chuuser);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnStartGame ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnStartGame ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnStartGame ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnStartGame ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnStartGame ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnStartGame ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnStartGame ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnStartGame ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnStartGame ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnStartGame ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnStartGame MakeReadOnly() {
    mj_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnStartGame prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnStartGame, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnStartGame cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnStartGame result;
    
    private ReturnStartGame PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnStartGame original = result;
        result = new ReturnStartGame();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnStartGame MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnStartGame.Descriptor; }
    }
    
    public override ReturnStartGame DefaultInstanceForType {
      get { return global::ReturnStartGame.DefaultInstance; }
    }
    
    public override ReturnStartGame BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnStartGame) {
        return MergeFrom((ReturnStartGame) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnStartGame other) {
      if (other == global::ReturnStartGame.DefaultInstance) return this;
      PrepareBuilder();
      if (other.mj_.Count != 0) {
        result.mj_.Add(other.mj_);
      }
      if (other.HasChuuser) {
        Chuuser = other.Chuuser;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnStartGameFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnStartGameFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.mj_, global::MaJiang.DefaultInstance, extensionRegistry);
            break;
          }
          case 16: {
            result.hasChuuser = input.ReadInt32(ref result.chuuser_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::MaJiang> MjList {
      get { return PrepareBuilder().mj_; }
    }
    public int MjCount {
      get { return result.MjCount; }
    }
    public global::MaJiang GetMj(int index) {
      return result.GetMj(index);
    }
    public Builder SetMj(int index, global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.mj_[index] = value;
      return this;
    }
    public Builder SetMj(int index, global::MaJiang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.mj_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddMj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.mj_.Add(value);
      return this;
    }
    public Builder AddMj(global::MaJiang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.mj_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeMj(scg::IEnumerable<global::MaJiang> values) {
      PrepareBuilder();
      result.mj_.Add(values);
      return this;
    }
    public Builder ClearMj() {
      PrepareBuilder();
      result.mj_.Clear();
      return this;
    }
    
    public bool HasChuuser {
      get { return result.hasChuuser; }
    }
    public int Chuuser {
      get { return result.Chuuser; }
      set { SetChuuser(value); }
    }
    public Builder SetChuuser(int value) {
      PrepareBuilder();
      result.hasChuuser = true;
      result.chuuser_ = value;
      return this;
    }
    public Builder ClearChuuser() {
      PrepareBuilder();
      result.hasChuuser = false;
      result.chuuser_ = 0;
      return this;
    }
  }
  static ReturnStartGame() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SendStart : pb::GeneratedMessage<SendStart, SendStart.Builder> {
  private SendStart() { }
  private static readonly SendStart defaultInstance = new SendStart().MakeReadOnly();
  private static readonly string[] _sendStartFieldNames = new string[] { "openid", "roomid" };
  private static readonly uint[] _sendStartFieldTags = new uint[] { 10, 16 };
  public static SendStart DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SendStart DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SendStart ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_SendStart__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SendStart, SendStart.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_SendStart__FieldAccessorTable; }
  }
  
  public const int OpenidFieldNumber = 1;
  private bool hasOpenid;
  private string openid_ = "";
  public bool HasOpenid {
    get { return hasOpenid; }
  }
  public string Openid {
    get { return openid_; }
  }
  
  public const int RoomidFieldNumber = 2;
  private bool hasRoomid;
  private int roomid_;
  public bool HasRoomid {
    get { return hasRoomid; }
  }
  public int Roomid {
    get { return roomid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasOpenid) return false;
      if (!hasRoomid) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sendStartFieldNames;
    if (hasOpenid) {
      output.WriteString(1, field_names[0], Openid);
    }
    if (hasRoomid) {
      output.WriteInt32(2, field_names[1], Roomid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasOpenid) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Openid);
    }
    if (hasRoomid) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Roomid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SendStart ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendStart ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendStart ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendStart ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendStart ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendStart ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SendStart ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SendStart ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SendStart ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendStart ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SendStart MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SendStart prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SendStart, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SendStart cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SendStart result;
    
    private SendStart PrepareBuilder() {
      if (resultIsReadOnly) {
        SendStart original = result;
        result = new SendStart();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SendStart MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SendStart.Descriptor; }
    }
    
    public override SendStart DefaultInstanceForType {
      get { return global::SendStart.DefaultInstance; }
    }
    
    public override SendStart BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SendStart) {
        return MergeFrom((SendStart) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SendStart other) {
      if (other == global::SendStart.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasOpenid) {
        Openid = other.Openid;
      }
      if (other.HasRoomid) {
        Roomid = other.Roomid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sendStartFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sendStartFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasOpenid = input.ReadString(ref result.openid_);
            break;
          }
          case 16: {
            result.hasRoomid = input.ReadInt32(ref result.roomid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasOpenid {
      get { return result.hasOpenid; }
    }
    public string Openid {
      get { return result.Openid; }
      set { SetOpenid(value); }
    }
    public Builder SetOpenid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOpenid = true;
      result.openid_ = value;
      return this;
    }
    public Builder ClearOpenid() {
      PrepareBuilder();
      result.hasOpenid = false;
      result.openid_ = "";
      return this;
    }
    
    public bool HasRoomid {
      get { return result.hasRoomid; }
    }
    public int Roomid {
      get { return result.Roomid; }
      set { SetRoomid(value); }
    }
    public Builder SetRoomid(int value) {
      PrepareBuilder();
      result.hasRoomid = true;
      result.roomid_ = value;
      return this;
    }
    public Builder ClearRoomid() {
      PrepareBuilder();
      result.hasRoomid = false;
      result.roomid_ = 0;
      return this;
    }
  }
  static SendStart() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnStart : pb::GeneratedMessage<ReturnStart, ReturnStart.Builder> {
  private ReturnStart() { }
  private static readonly ReturnStart defaultInstance = new ReturnStart().MakeReadOnly();
  private static readonly string[] _returnStartFieldNames = new string[] { "start" };
  private static readonly uint[] _returnStartFieldTags = new uint[] { 8 };
  public static ReturnStart DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnStart DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnStart ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnStart__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnStart, ReturnStart.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnStart__FieldAccessorTable; }
  }
  
  public const int StartFieldNumber = 1;
  private bool hasStart;
  private int start_;
  public bool HasStart {
    get { return hasStart; }
  }
  public int Start {
    get { return start_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasStart) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnStartFieldNames;
    if (hasStart) {
      output.WriteInt32(1, field_names[0], Start);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStart) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Start);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnStart ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnStart ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnStart ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnStart ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnStart ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnStart ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnStart ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnStart ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnStart ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnStart ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnStart MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnStart prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnStart, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnStart cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnStart result;
    
    private ReturnStart PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnStart original = result;
        result = new ReturnStart();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnStart MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnStart.Descriptor; }
    }
    
    public override ReturnStart DefaultInstanceForType {
      get { return global::ReturnStart.DefaultInstance; }
    }
    
    public override ReturnStart BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnStart) {
        return MergeFrom((ReturnStart) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnStart other) {
      if (other == global::ReturnStart.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStart) {
        Start = other.Start;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnStartFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnStartFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasStart = input.ReadInt32(ref result.start_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStart {
      get { return result.hasStart; }
    }
    public int Start {
      get { return result.Start; }
      set { SetStart(value); }
    }
    public Builder SetStart(int value) {
      PrepareBuilder();
      result.hasStart = true;
      result.start_ = value;
      return this;
    }
    public Builder ClearStart() {
      PrepareBuilder();
      result.hasStart = false;
      result.start_ = 0;
      return this;
    }
  }
  static ReturnStart() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnTP : pb::GeneratedMessage<ReturnTP, ReturnTP.Builder> {
  private ReturnTP() { }
  private static readonly ReturnTP defaultInstance = new ReturnTP().MakeReadOnly();
  private static readonly string[] _returnTPFieldNames = new string[] { "mj" };
  private static readonly uint[] _returnTPFieldTags = new uint[] { 10 };
  public static ReturnTP DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnTP DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnTP ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnTP__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnTP, ReturnTP.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnTP__FieldAccessorTable; }
  }
  
  public const int MjFieldNumber = 1;
  private pbc::PopsicleList<global::MaJiang> mj_ = new pbc::PopsicleList<global::MaJiang>();
  public scg::IList<global::MaJiang> MjList {
    get { return mj_; }
  }
  public int MjCount {
    get { return mj_.Count; }
  }
  public global::MaJiang GetMj(int index) {
    return mj_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::MaJiang element in MjList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnTPFieldNames;
    if (mj_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], mj_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::MaJiang element in MjList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnTP ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnTP ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnTP ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnTP ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnTP ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnTP ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnTP ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnTP ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnTP ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnTP ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnTP MakeReadOnly() {
    mj_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnTP prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnTP, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnTP cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnTP result;
    
    private ReturnTP PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnTP original = result;
        result = new ReturnTP();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnTP MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnTP.Descriptor; }
    }
    
    public override ReturnTP DefaultInstanceForType {
      get { return global::ReturnTP.DefaultInstance; }
    }
    
    public override ReturnTP BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnTP) {
        return MergeFrom((ReturnTP) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnTP other) {
      if (other == global::ReturnTP.DefaultInstance) return this;
      PrepareBuilder();
      if (other.mj_.Count != 0) {
        result.mj_.Add(other.mj_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnTPFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnTPFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.mj_, global::MaJiang.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::MaJiang> MjList {
      get { return PrepareBuilder().mj_; }
    }
    public int MjCount {
      get { return result.MjCount; }
    }
    public global::MaJiang GetMj(int index) {
      return result.GetMj(index);
    }
    public Builder SetMj(int index, global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.mj_[index] = value;
      return this;
    }
    public Builder SetMj(int index, global::MaJiang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.mj_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddMj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.mj_.Add(value);
      return this;
    }
    public Builder AddMj(global::MaJiang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.mj_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeMj(scg::IEnumerable<global::MaJiang> values) {
      PrepareBuilder();
      result.mj_.Add(values);
      return this;
    }
    public Builder ClearMj() {
      PrepareBuilder();
      result.mj_.Clear();
      return this;
    }
  }
  static ReturnTP() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnTTATH : pb::GeneratedMessage<ReturnTTATH, ReturnTTATH.Builder> {
  private ReturnTTATH() { }
  private static readonly ReturnTTATH defaultInstance = new ReturnTTATH().MakeReadOnly();
  private static readonly string[] _returnTTATHFieldNames = new string[] { "state" };
  private static readonly uint[] _returnTTATHFieldTags = new uint[] { 8 };
  public static ReturnTTATH DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnTTATH DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnTTATH ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnTTATH__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnTTATH, ReturnTTATH.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnTTATH__FieldAccessorTable; }
  }
  
  public const int StateFieldNumber = 1;
  private bool hasState;
  private int state_;
  public bool HasState {
    get { return hasState; }
  }
  public int State {
    get { return state_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasState) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnTTATHFieldNames;
    if (hasState) {
      output.WriteInt32(1, field_names[0], State);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasState) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, State);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnTTATH ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnTTATH ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnTTATH ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnTTATH ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnTTATH ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnTTATH ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnTTATH ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnTTATH ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnTTATH ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnTTATH ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnTTATH MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnTTATH prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnTTATH, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnTTATH cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnTTATH result;
    
    private ReturnTTATH PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnTTATH original = result;
        result = new ReturnTTATH();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnTTATH MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnTTATH.Descriptor; }
    }
    
    public override ReturnTTATH DefaultInstanceForType {
      get { return global::ReturnTTATH.DefaultInstance; }
    }
    
    public override ReturnTTATH BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnTTATH) {
        return MergeFrom((ReturnTTATH) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnTTATH other) {
      if (other == global::ReturnTTATH.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasState) {
        State = other.State;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnTTATHFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnTTATHFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasState = input.ReadInt32(ref result.state_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasState {
      get { return result.hasState; }
    }
    public int State {
      get { return result.State; }
      set { SetState(value); }
    }
    public Builder SetState(int value) {
      PrepareBuilder();
      result.hasState = true;
      result.state_ = value;
      return this;
    }
    public Builder ClearState() {
      PrepareBuilder();
      result.hasState = false;
      result.state_ = 0;
      return this;
    }
  }
  static ReturnTTATH() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SendMP : pb::GeneratedMessage<SendMP, SendMP.Builder> {
  private SendMP() { }
  private static readonly SendMP defaultInstance = new SendMP().MakeReadOnly();
  private static readonly string[] _sendMPFieldNames = new string[] { "mType", "openid", "roomid" };
  private static readonly uint[] _sendMPFieldTags = new uint[] { 24, 10, 16 };
  public static SendMP DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SendMP DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SendMP ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_SendMP__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SendMP, SendMP.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_SendMP__FieldAccessorTable; }
  }
  
  public const int OpenidFieldNumber = 1;
  private bool hasOpenid;
  private string openid_ = "";
  public bool HasOpenid {
    get { return hasOpenid; }
  }
  public string Openid {
    get { return openid_; }
  }
  
  public const int RoomidFieldNumber = 2;
  private bool hasRoomid;
  private int roomid_;
  public bool HasRoomid {
    get { return hasRoomid; }
  }
  public int Roomid {
    get { return roomid_; }
  }
  
  public const int MTypeFieldNumber = 3;
  private bool hasMType;
  private int mType_;
  public bool HasMType {
    get { return hasMType; }
  }
  public int MType {
    get { return mType_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasOpenid) return false;
      if (!hasRoomid) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sendMPFieldNames;
    if (hasOpenid) {
      output.WriteString(1, field_names[1], Openid);
    }
    if (hasRoomid) {
      output.WriteInt32(2, field_names[2], Roomid);
    }
    if (hasMType) {
      output.WriteInt32(3, field_names[0], MType);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasOpenid) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Openid);
    }
    if (hasRoomid) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Roomid);
    }
    if (hasMType) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, MType);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SendMP ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendMP ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendMP ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendMP ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendMP ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendMP ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SendMP ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SendMP ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SendMP ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendMP ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SendMP MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SendMP prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SendMP, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SendMP cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SendMP result;
    
    private SendMP PrepareBuilder() {
      if (resultIsReadOnly) {
        SendMP original = result;
        result = new SendMP();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SendMP MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SendMP.Descriptor; }
    }
    
    public override SendMP DefaultInstanceForType {
      get { return global::SendMP.DefaultInstance; }
    }
    
    public override SendMP BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SendMP) {
        return MergeFrom((SendMP) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SendMP other) {
      if (other == global::SendMP.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasOpenid) {
        Openid = other.Openid;
      }
      if (other.HasRoomid) {
        Roomid = other.Roomid;
      }
      if (other.HasMType) {
        MType = other.MType;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sendMPFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sendMPFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasOpenid = input.ReadString(ref result.openid_);
            break;
          }
          case 16: {
            result.hasRoomid = input.ReadInt32(ref result.roomid_);
            break;
          }
          case 24: {
            result.hasMType = input.ReadInt32(ref result.mType_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasOpenid {
      get { return result.hasOpenid; }
    }
    public string Openid {
      get { return result.Openid; }
      set { SetOpenid(value); }
    }
    public Builder SetOpenid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOpenid = true;
      result.openid_ = value;
      return this;
    }
    public Builder ClearOpenid() {
      PrepareBuilder();
      result.hasOpenid = false;
      result.openid_ = "";
      return this;
    }
    
    public bool HasRoomid {
      get { return result.hasRoomid; }
    }
    public int Roomid {
      get { return result.Roomid; }
      set { SetRoomid(value); }
    }
    public Builder SetRoomid(int value) {
      PrepareBuilder();
      result.hasRoomid = true;
      result.roomid_ = value;
      return this;
    }
    public Builder ClearRoomid() {
      PrepareBuilder();
      result.hasRoomid = false;
      result.roomid_ = 0;
      return this;
    }
    
    public bool HasMType {
      get { return result.hasMType; }
    }
    public int MType {
      get { return result.MType; }
      set { SetMType(value); }
    }
    public Builder SetMType(int value) {
      PrepareBuilder();
      result.hasMType = true;
      result.mType_ = value;
      return this;
    }
    public Builder ClearMType() {
      PrepareBuilder();
      result.hasMType = false;
      result.mType_ = 0;
      return this;
    }
  }
  static SendMP() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnMP : pb::GeneratedMessage<ReturnMP, ReturnMP.Builder> {
  private ReturnMP() { }
  private static readonly ReturnMP defaultInstance = new ReturnMP().MakeReadOnly();
  private static readonly string[] _returnMPFieldNames = new string[] { "gang", "hu", "mj" };
  private static readonly uint[] _returnMPFieldTags = new uint[] { 16, 24, 10 };
  public static ReturnMP DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnMP DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnMP ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnMP__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnMP, ReturnMP.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnMP__FieldAccessorTable; }
  }
  
  public const int MjFieldNumber = 1;
  private bool hasMj;
  private global::MaJiang mj_;
  public bool HasMj {
    get { return hasMj; }
  }
  public global::MaJiang Mj {
    get { return mj_ ?? global::MaJiang.DefaultInstance; }
  }
  
  public const int GangFieldNumber = 2;
  private bool hasGang;
  private int gang_;
  public bool HasGang {
    get { return hasGang; }
  }
  public int Gang {
    get { return gang_; }
  }
  
  public const int HuFieldNumber = 3;
  private bool hasHu;
  private int hu_;
  public bool HasHu {
    get { return hasHu; }
  }
  public int Hu {
    get { return hu_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasMj) return false;
      if (!Mj.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnMPFieldNames;
    if (hasMj) {
      output.WriteMessage(1, field_names[2], Mj);
    }
    if (hasGang) {
      output.WriteInt32(2, field_names[0], Gang);
    }
    if (hasHu) {
      output.WriteInt32(3, field_names[1], Hu);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasMj) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Mj);
    }
    if (hasGang) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Gang);
    }
    if (hasHu) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Hu);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnMP ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnMP ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnMP ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnMP ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnMP ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnMP ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnMP ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnMP ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnMP ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnMP ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnMP MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnMP prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnMP, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnMP cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnMP result;
    
    private ReturnMP PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnMP original = result;
        result = new ReturnMP();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnMP MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnMP.Descriptor; }
    }
    
    public override ReturnMP DefaultInstanceForType {
      get { return global::ReturnMP.DefaultInstance; }
    }
    
    public override ReturnMP BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnMP) {
        return MergeFrom((ReturnMP) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnMP other) {
      if (other == global::ReturnMP.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMj) {
        MergeMj(other.Mj);
      }
      if (other.HasGang) {
        Gang = other.Gang;
      }
      if (other.HasHu) {
        Hu = other.Hu;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnMPFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnMPFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::MaJiang.Builder subBuilder = global::MaJiang.CreateBuilder();
            if (result.hasMj) {
              subBuilder.MergeFrom(Mj);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Mj = subBuilder.BuildPartial();
            break;
          }
          case 16: {
            result.hasGang = input.ReadInt32(ref result.gang_);
            break;
          }
          case 24: {
            result.hasHu = input.ReadInt32(ref result.hu_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMj {
     get { return result.hasMj; }
    }
    public global::MaJiang Mj {
      get { return result.Mj; }
      set { SetMj(value); }
    }
    public Builder SetMj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMj = true;
      result.mj_ = value;
      return this;
    }
    public Builder SetMj(global::MaJiang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasMj = true;
      result.mj_ = builderForValue.Build();
      return this;
    }
    public Builder MergeMj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasMj &&
          result.mj_ != global::MaJiang.DefaultInstance) {
          result.mj_ = global::MaJiang.CreateBuilder(result.mj_).MergeFrom(value).BuildPartial();
      } else {
        result.mj_ = value;
      }
      result.hasMj = true;
      return this;
    }
    public Builder ClearMj() {
      PrepareBuilder();
      result.hasMj = false;
      result.mj_ = null;
      return this;
    }
    
    public bool HasGang {
      get { return result.hasGang; }
    }
    public int Gang {
      get { return result.Gang; }
      set { SetGang(value); }
    }
    public Builder SetGang(int value) {
      PrepareBuilder();
      result.hasGang = true;
      result.gang_ = value;
      return this;
    }
    public Builder ClearGang() {
      PrepareBuilder();
      result.hasGang = false;
      result.gang_ = 0;
      return this;
    }
    
    public bool HasHu {
      get { return result.hasHu; }
    }
    public int Hu {
      get { return result.Hu; }
      set { SetHu(value); }
    }
    public Builder SetHu(int value) {
      PrepareBuilder();
      result.hasHu = true;
      result.hu_ = value;
      return this;
    }
    public Builder ClearHu() {
      PrepareBuilder();
      result.hasHu = false;
      result.hu_ = 0;
      return this;
    }
  }
  static ReturnMP() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SendCP : pb::GeneratedMessage<SendCP, SendCP.Builder> {
  private SendCP() { }
  private static readonly SendCP defaultInstance = new SendCP().MakeReadOnly();
  private static readonly string[] _sendCPFieldNames = new string[] { "mj", "openid", "roomid", "type" };
  private static readonly uint[] _sendCPFieldTags = new uint[] { 26, 10, 16, 32 };
  public static SendCP DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SendCP DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SendCP ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_SendCP__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SendCP, SendCP.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_SendCP__FieldAccessorTable; }
  }
  
  public const int OpenidFieldNumber = 1;
  private bool hasOpenid;
  private string openid_ = "";
  public bool HasOpenid {
    get { return hasOpenid; }
  }
  public string Openid {
    get { return openid_; }
  }
  
  public const int RoomidFieldNumber = 2;
  private bool hasRoomid;
  private int roomid_;
  public bool HasRoomid {
    get { return hasRoomid; }
  }
  public int Roomid {
    get { return roomid_; }
  }
  
  public const int MjFieldNumber = 3;
  private bool hasMj;
  private global::MaJiang mj_;
  public bool HasMj {
    get { return hasMj; }
  }
  public global::MaJiang Mj {
    get { return mj_ ?? global::MaJiang.DefaultInstance; }
  }
  
  public const int TypeFieldNumber = 4;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasOpenid) return false;
      if (!hasRoomid) return false;
      if (!hasMj) return false;
      if (!hasType) return false;
      if (!Mj.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sendCPFieldNames;
    if (hasOpenid) {
      output.WriteString(1, field_names[1], Openid);
    }
    if (hasRoomid) {
      output.WriteInt32(2, field_names[2], Roomid);
    }
    if (hasMj) {
      output.WriteMessage(3, field_names[0], Mj);
    }
    if (hasType) {
      output.WriteInt32(4, field_names[3], Type);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasOpenid) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Openid);
    }
    if (hasRoomid) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Roomid);
    }
    if (hasMj) {
      size += pb::CodedOutputStream.ComputeMessageSize(3, Mj);
    }
    if (hasType) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Type);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SendCP ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendCP ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendCP ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendCP ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendCP ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendCP ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SendCP ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SendCP ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SendCP ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendCP ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SendCP MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SendCP prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SendCP, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SendCP cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SendCP result;
    
    private SendCP PrepareBuilder() {
      if (resultIsReadOnly) {
        SendCP original = result;
        result = new SendCP();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SendCP MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SendCP.Descriptor; }
    }
    
    public override SendCP DefaultInstanceForType {
      get { return global::SendCP.DefaultInstance; }
    }
    
    public override SendCP BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SendCP) {
        return MergeFrom((SendCP) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SendCP other) {
      if (other == global::SendCP.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasOpenid) {
        Openid = other.Openid;
      }
      if (other.HasRoomid) {
        Roomid = other.Roomid;
      }
      if (other.HasMj) {
        MergeMj(other.Mj);
      }
      if (other.HasType) {
        Type = other.Type;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sendCPFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sendCPFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasOpenid = input.ReadString(ref result.openid_);
            break;
          }
          case 16: {
            result.hasRoomid = input.ReadInt32(ref result.roomid_);
            break;
          }
          case 26: {
            global::MaJiang.Builder subBuilder = global::MaJiang.CreateBuilder();
            if (result.hasMj) {
              subBuilder.MergeFrom(Mj);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Mj = subBuilder.BuildPartial();
            break;
          }
          case 32: {
            result.hasType = input.ReadInt32(ref result.type_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasOpenid {
      get { return result.hasOpenid; }
    }
    public string Openid {
      get { return result.Openid; }
      set { SetOpenid(value); }
    }
    public Builder SetOpenid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOpenid = true;
      result.openid_ = value;
      return this;
    }
    public Builder ClearOpenid() {
      PrepareBuilder();
      result.hasOpenid = false;
      result.openid_ = "";
      return this;
    }
    
    public bool HasRoomid {
      get { return result.hasRoomid; }
    }
    public int Roomid {
      get { return result.Roomid; }
      set { SetRoomid(value); }
    }
    public Builder SetRoomid(int value) {
      PrepareBuilder();
      result.hasRoomid = true;
      result.roomid_ = value;
      return this;
    }
    public Builder ClearRoomid() {
      PrepareBuilder();
      result.hasRoomid = false;
      result.roomid_ = 0;
      return this;
    }
    
    public bool HasMj {
     get { return result.hasMj; }
    }
    public global::MaJiang Mj {
      get { return result.Mj; }
      set { SetMj(value); }
    }
    public Builder SetMj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMj = true;
      result.mj_ = value;
      return this;
    }
    public Builder SetMj(global::MaJiang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasMj = true;
      result.mj_ = builderForValue.Build();
      return this;
    }
    public Builder MergeMj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasMj &&
          result.mj_ != global::MaJiang.DefaultInstance) {
          result.mj_ = global::MaJiang.CreateBuilder(result.mj_).MergeFrom(value).BuildPartial();
      } else {
        result.mj_ = value;
      }
      result.hasMj = true;
      return this;
    }
    public Builder ClearMj() {
      PrepareBuilder();
      result.hasMj = false;
      result.mj_ = null;
      return this;
    }
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
  }
  static SendCP() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnAll : pb::GeneratedMessage<ReturnAll, ReturnAll.Builder> {
  private ReturnAll() { }
  private static readonly ReturnAll defaultInstance = new ReturnAll().MakeReadOnly();
  private static readonly string[] _returnAllFieldNames = new string[] { "fw", "gang", "hu", "mType", "mj", "mo", "peng" };
  private static readonly uint[] _returnAllFieldTags = new uint[] { 48, 16, 24, 56, 42, 32, 8 };
  public static ReturnAll DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnAll DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnAll ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnAll__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnAll, ReturnAll.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnAll__FieldAccessorTable; }
  }
  
  public const int PengFieldNumber = 1;
  private bool hasPeng;
  private int peng_;
  public bool HasPeng {
    get { return hasPeng; }
  }
  public int Peng {
    get { return peng_; }
  }
  
  public const int GangFieldNumber = 2;
  private bool hasGang;
  private int gang_;
  public bool HasGang {
    get { return hasGang; }
  }
  public int Gang {
    get { return gang_; }
  }
  
  public const int HuFieldNumber = 3;
  private bool hasHu;
  private int hu_;
  public bool HasHu {
    get { return hasHu; }
  }
  public int Hu {
    get { return hu_; }
  }
  
  public const int MoFieldNumber = 4;
  private bool hasMo;
  private int mo_;
  public bool HasMo {
    get { return hasMo; }
  }
  public int Mo {
    get { return mo_; }
  }
  
  public const int MjFieldNumber = 5;
  private bool hasMj;
  private global::MaJiang mj_;
  public bool HasMj {
    get { return hasMj; }
  }
  public global::MaJiang Mj {
    get { return mj_ ?? global::MaJiang.DefaultInstance; }
  }
  
  public const int FwFieldNumber = 6;
  private bool hasFw;
  private int fw_;
  public bool HasFw {
    get { return hasFw; }
  }
  public int Fw {
    get { return fw_; }
  }
  
  public const int MTypeFieldNumber = 7;
  private bool hasMType;
  private int mType_;
  public bool HasMType {
    get { return hasMType; }
  }
  public int MType {
    get { return mType_; }
  }
  
  public override bool IsInitialized {
    get {
      if (HasMj) {
        if (!Mj.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnAllFieldNames;
    if (hasPeng) {
      output.WriteInt32(1, field_names[6], Peng);
    }
    if (hasGang) {
      output.WriteInt32(2, field_names[1], Gang);
    }
    if (hasHu) {
      output.WriteInt32(3, field_names[2], Hu);
    }
    if (hasMo) {
      output.WriteInt32(4, field_names[5], Mo);
    }
    if (hasMj) {
      output.WriteMessage(5, field_names[4], Mj);
    }
    if (hasFw) {
      output.WriteInt32(6, field_names[0], Fw);
    }
    if (hasMType) {
      output.WriteInt32(7, field_names[3], MType);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPeng) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Peng);
    }
    if (hasGang) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Gang);
    }
    if (hasHu) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Hu);
    }
    if (hasMo) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Mo);
    }
    if (hasMj) {
      size += pb::CodedOutputStream.ComputeMessageSize(5, Mj);
    }
    if (hasFw) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Fw);
    }
    if (hasMType) {
      size += pb::CodedOutputStream.ComputeInt32Size(7, MType);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnAll ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnAll ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnAll ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnAll ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnAll ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnAll ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnAll ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnAll ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnAll ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnAll ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnAll MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnAll prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnAll, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnAll cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnAll result;
    
    private ReturnAll PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnAll original = result;
        result = new ReturnAll();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnAll MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnAll.Descriptor; }
    }
    
    public override ReturnAll DefaultInstanceForType {
      get { return global::ReturnAll.DefaultInstance; }
    }
    
    public override ReturnAll BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnAll) {
        return MergeFrom((ReturnAll) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnAll other) {
      if (other == global::ReturnAll.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPeng) {
        Peng = other.Peng;
      }
      if (other.HasGang) {
        Gang = other.Gang;
      }
      if (other.HasHu) {
        Hu = other.Hu;
      }
      if (other.HasMo) {
        Mo = other.Mo;
      }
      if (other.HasMj) {
        MergeMj(other.Mj);
      }
      if (other.HasFw) {
        Fw = other.Fw;
      }
      if (other.HasMType) {
        MType = other.MType;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnAllFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnAllFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPeng = input.ReadInt32(ref result.peng_);
            break;
          }
          case 16: {
            result.hasGang = input.ReadInt32(ref result.gang_);
            break;
          }
          case 24: {
            result.hasHu = input.ReadInt32(ref result.hu_);
            break;
          }
          case 32: {
            result.hasMo = input.ReadInt32(ref result.mo_);
            break;
          }
          case 42: {
            global::MaJiang.Builder subBuilder = global::MaJiang.CreateBuilder();
            if (result.hasMj) {
              subBuilder.MergeFrom(Mj);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Mj = subBuilder.BuildPartial();
            break;
          }
          case 48: {
            result.hasFw = input.ReadInt32(ref result.fw_);
            break;
          }
          case 56: {
            result.hasMType = input.ReadInt32(ref result.mType_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPeng {
      get { return result.hasPeng; }
    }
    public int Peng {
      get { return result.Peng; }
      set { SetPeng(value); }
    }
    public Builder SetPeng(int value) {
      PrepareBuilder();
      result.hasPeng = true;
      result.peng_ = value;
      return this;
    }
    public Builder ClearPeng() {
      PrepareBuilder();
      result.hasPeng = false;
      result.peng_ = 0;
      return this;
    }
    
    public bool HasGang {
      get { return result.hasGang; }
    }
    public int Gang {
      get { return result.Gang; }
      set { SetGang(value); }
    }
    public Builder SetGang(int value) {
      PrepareBuilder();
      result.hasGang = true;
      result.gang_ = value;
      return this;
    }
    public Builder ClearGang() {
      PrepareBuilder();
      result.hasGang = false;
      result.gang_ = 0;
      return this;
    }
    
    public bool HasHu {
      get { return result.hasHu; }
    }
    public int Hu {
      get { return result.Hu; }
      set { SetHu(value); }
    }
    public Builder SetHu(int value) {
      PrepareBuilder();
      result.hasHu = true;
      result.hu_ = value;
      return this;
    }
    public Builder ClearHu() {
      PrepareBuilder();
      result.hasHu = false;
      result.hu_ = 0;
      return this;
    }
    
    public bool HasMo {
      get { return result.hasMo; }
    }
    public int Mo {
      get { return result.Mo; }
      set { SetMo(value); }
    }
    public Builder SetMo(int value) {
      PrepareBuilder();
      result.hasMo = true;
      result.mo_ = value;
      return this;
    }
    public Builder ClearMo() {
      PrepareBuilder();
      result.hasMo = false;
      result.mo_ = 0;
      return this;
    }
    
    public bool HasMj {
     get { return result.hasMj; }
    }
    public global::MaJiang Mj {
      get { return result.Mj; }
      set { SetMj(value); }
    }
    public Builder SetMj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMj = true;
      result.mj_ = value;
      return this;
    }
    public Builder SetMj(global::MaJiang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasMj = true;
      result.mj_ = builderForValue.Build();
      return this;
    }
    public Builder MergeMj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasMj &&
          result.mj_ != global::MaJiang.DefaultInstance) {
          result.mj_ = global::MaJiang.CreateBuilder(result.mj_).MergeFrom(value).BuildPartial();
      } else {
        result.mj_ = value;
      }
      result.hasMj = true;
      return this;
    }
    public Builder ClearMj() {
      PrepareBuilder();
      result.hasMj = false;
      result.mj_ = null;
      return this;
    }
    
    public bool HasFw {
      get { return result.hasFw; }
    }
    public int Fw {
      get { return result.Fw; }
      set { SetFw(value); }
    }
    public Builder SetFw(int value) {
      PrepareBuilder();
      result.hasFw = true;
      result.fw_ = value;
      return this;
    }
    public Builder ClearFw() {
      PrepareBuilder();
      result.hasFw = false;
      result.fw_ = 0;
      return this;
    }
    
    public bool HasMType {
      get { return result.hasMType; }
    }
    public int MType {
      get { return result.MType; }
      set { SetMType(value); }
    }
    public Builder SetMType(int value) {
      PrepareBuilder();
      result.hasMType = true;
      result.mType_ = value;
      return this;
    }
    public Builder ClearMType() {
      PrepareBuilder();
      result.hasMType = false;
      result.mType_ = 0;
      return this;
    }
  }
  static ReturnAll() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnMsg : pb::GeneratedMessage<ReturnMsg, ReturnMsg.Builder> {
  private ReturnMsg() { }
  private static readonly ReturnMsg defaultInstance = new ReturnMsg().MakeReadOnly();
  private static readonly string[] _returnMsgFieldNames = new string[] { "FW", "mj", "msg" };
  private static readonly uint[] _returnMsgFieldTags = new uint[] { 24, 18, 10 };
  public static ReturnMsg DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnMsg DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnMsg ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnMsg__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnMsg, ReturnMsg.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnMsg__FieldAccessorTable; }
  }
  
  public const int MsgFieldNumber = 1;
  private bool hasMsg;
  private string msg_ = "";
  public bool HasMsg {
    get { return hasMsg; }
  }
  public string Msg {
    get { return msg_; }
  }
  
  public const int MjFieldNumber = 2;
  private bool hasMj;
  private global::MaJiang mj_;
  public bool HasMj {
    get { return hasMj; }
  }
  public global::MaJiang Mj {
    get { return mj_ ?? global::MaJiang.DefaultInstance; }
  }
  
  public const int FWFieldNumber = 3;
  private bool hasFW;
  private int fW_;
  public bool HasFW {
    get { return hasFW; }
  }
  public int FW {
    get { return fW_; }
  }
  
  public override bool IsInitialized {
    get {
      if (HasMj) {
        if (!Mj.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnMsgFieldNames;
    if (hasMsg) {
      output.WriteString(1, field_names[2], Msg);
    }
    if (hasMj) {
      output.WriteMessage(2, field_names[1], Mj);
    }
    if (hasFW) {
      output.WriteInt32(3, field_names[0], FW);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasMsg) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Msg);
    }
    if (hasMj) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, Mj);
    }
    if (hasFW) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, FW);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnMsg ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnMsg ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnMsg ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnMsg ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnMsg ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnMsg MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnMsg prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnMsg, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnMsg cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnMsg result;
    
    private ReturnMsg PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnMsg original = result;
        result = new ReturnMsg();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnMsg MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnMsg.Descriptor; }
    }
    
    public override ReturnMsg DefaultInstanceForType {
      get { return global::ReturnMsg.DefaultInstance; }
    }
    
    public override ReturnMsg BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnMsg) {
        return MergeFrom((ReturnMsg) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnMsg other) {
      if (other == global::ReturnMsg.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMsg) {
        Msg = other.Msg;
      }
      if (other.HasMj) {
        MergeMj(other.Mj);
      }
      if (other.HasFW) {
        FW = other.FW;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnMsgFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasMsg = input.ReadString(ref result.msg_);
            break;
          }
          case 18: {
            global::MaJiang.Builder subBuilder = global::MaJiang.CreateBuilder();
            if (result.hasMj) {
              subBuilder.MergeFrom(Mj);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Mj = subBuilder.BuildPartial();
            break;
          }
          case 24: {
            result.hasFW = input.ReadInt32(ref result.fW_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMsg {
      get { return result.hasMsg; }
    }
    public string Msg {
      get { return result.Msg; }
      set { SetMsg(value); }
    }
    public Builder SetMsg(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMsg = true;
      result.msg_ = value;
      return this;
    }
    public Builder ClearMsg() {
      PrepareBuilder();
      result.hasMsg = false;
      result.msg_ = "";
      return this;
    }
    
    public bool HasMj {
     get { return result.hasMj; }
    }
    public global::MaJiang Mj {
      get { return result.Mj; }
      set { SetMj(value); }
    }
    public Builder SetMj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMj = true;
      result.mj_ = value;
      return this;
    }
    public Builder SetMj(global::MaJiang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasMj = true;
      result.mj_ = builderForValue.Build();
      return this;
    }
    public Builder MergeMj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasMj &&
          result.mj_ != global::MaJiang.DefaultInstance) {
          result.mj_ = global::MaJiang.CreateBuilder(result.mj_).MergeFrom(value).BuildPartial();
      } else {
        result.mj_ = value;
      }
      result.hasMj = true;
      return this;
    }
    public Builder ClearMj() {
      PrepareBuilder();
      result.hasMj = false;
      result.mj_ = null;
      return this;
    }
    
    public bool HasFW {
      get { return result.hasFW; }
    }
    public int FW {
      get { return result.FW; }
      set { SetFW(value); }
    }
    public Builder SetFW(int value) {
      PrepareBuilder();
      result.hasFW = true;
      result.fW_ = value;
      return this;
    }
    public Builder ClearFW() {
      PrepareBuilder();
      result.hasFW = false;
      result.fW_ = 0;
      return this;
    }
  }
  static ReturnMsg() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SendPeng : pb::GeneratedMessage<SendPeng, SendPeng.Builder> {
  private SendPeng() { }
  private static readonly SendPeng defaultInstance = new SendPeng().MakeReadOnly();
  private static readonly string[] _sendPengFieldNames = new string[] { "FW", "Gtype", "mj", "openid", "roomid", "state", "types" };
  private static readonly uint[] _sendPengFieldTags = new uint[] { 40, 58, 50, 26, 32, 16, 8 };
  public static SendPeng DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SendPeng DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SendPeng ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_SendPeng__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SendPeng, SendPeng.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_SendPeng__FieldAccessorTable; }
  }
  
  public const int TypesFieldNumber = 1;
  private bool hasTypes;
  private int types_;
  public bool HasTypes {
    get { return hasTypes; }
  }
  public int Types {
    get { return types_; }
  }
  
  public const int StateFieldNumber = 2;
  private bool hasState;
  private int state_;
  public bool HasState {
    get { return hasState; }
  }
  public int State {
    get { return state_; }
  }
  
  public const int OpenidFieldNumber = 3;
  private bool hasOpenid;
  private string openid_ = "";
  public bool HasOpenid {
    get { return hasOpenid; }
  }
  public string Openid {
    get { return openid_; }
  }
  
  public const int RoomidFieldNumber = 4;
  private bool hasRoomid;
  private int roomid_;
  public bool HasRoomid {
    get { return hasRoomid; }
  }
  public int Roomid {
    get { return roomid_; }
  }
  
  public const int FWFieldNumber = 5;
  private bool hasFW;
  private int fW_;
  public bool HasFW {
    get { return hasFW; }
  }
  public int FW {
    get { return fW_; }
  }
  
  public const int MjFieldNumber = 6;
  private bool hasMj;
  private global::MaJiang mj_;
  public bool HasMj {
    get { return hasMj; }
  }
  public global::MaJiang Mj {
    get { return mj_ ?? global::MaJiang.DefaultInstance; }
  }
  
  public const int GtypeFieldNumber = 7;
  private bool hasGtype;
  private string gtype_ = "";
  public bool HasGtype {
    get { return hasGtype; }
  }
  public string Gtype {
    get { return gtype_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasTypes) return false;
      if (!hasState) return false;
      if (!hasOpenid) return false;
      if (!hasRoomid) return false;
      if (!hasFW) return false;
      if (HasMj) {
        if (!Mj.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sendPengFieldNames;
    if (hasTypes) {
      output.WriteInt32(1, field_names[6], Types);
    }
    if (hasState) {
      output.WriteInt32(2, field_names[5], State);
    }
    if (hasOpenid) {
      output.WriteString(3, field_names[3], Openid);
    }
    if (hasRoomid) {
      output.WriteInt32(4, field_names[4], Roomid);
    }
    if (hasFW) {
      output.WriteInt32(5, field_names[0], FW);
    }
    if (hasMj) {
      output.WriteMessage(6, field_names[2], Mj);
    }
    if (hasGtype) {
      output.WriteString(7, field_names[1], Gtype);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasTypes) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Types);
    }
    if (hasState) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, State);
    }
    if (hasOpenid) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Openid);
    }
    if (hasRoomid) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Roomid);
    }
    if (hasFW) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, FW);
    }
    if (hasMj) {
      size += pb::CodedOutputStream.ComputeMessageSize(6, Mj);
    }
    if (hasGtype) {
      size += pb::CodedOutputStream.ComputeStringSize(7, Gtype);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SendPeng ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendPeng ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendPeng ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendPeng ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendPeng ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendPeng ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SendPeng ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SendPeng ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SendPeng ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendPeng ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SendPeng MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SendPeng prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SendPeng, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SendPeng cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SendPeng result;
    
    private SendPeng PrepareBuilder() {
      if (resultIsReadOnly) {
        SendPeng original = result;
        result = new SendPeng();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SendPeng MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SendPeng.Descriptor; }
    }
    
    public override SendPeng DefaultInstanceForType {
      get { return global::SendPeng.DefaultInstance; }
    }
    
    public override SendPeng BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SendPeng) {
        return MergeFrom((SendPeng) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SendPeng other) {
      if (other == global::SendPeng.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasTypes) {
        Types = other.Types;
      }
      if (other.HasState) {
        State = other.State;
      }
      if (other.HasOpenid) {
        Openid = other.Openid;
      }
      if (other.HasRoomid) {
        Roomid = other.Roomid;
      }
      if (other.HasFW) {
        FW = other.FW;
      }
      if (other.HasMj) {
        MergeMj(other.Mj);
      }
      if (other.HasGtype) {
        Gtype = other.Gtype;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sendPengFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sendPengFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasTypes = input.ReadInt32(ref result.types_);
            break;
          }
          case 16: {
            result.hasState = input.ReadInt32(ref result.state_);
            break;
          }
          case 26: {
            result.hasOpenid = input.ReadString(ref result.openid_);
            break;
          }
          case 32: {
            result.hasRoomid = input.ReadInt32(ref result.roomid_);
            break;
          }
          case 40: {
            result.hasFW = input.ReadInt32(ref result.fW_);
            break;
          }
          case 50: {
            global::MaJiang.Builder subBuilder = global::MaJiang.CreateBuilder();
            if (result.hasMj) {
              subBuilder.MergeFrom(Mj);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Mj = subBuilder.BuildPartial();
            break;
          }
          case 58: {
            result.hasGtype = input.ReadString(ref result.gtype_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasTypes {
      get { return result.hasTypes; }
    }
    public int Types {
      get { return result.Types; }
      set { SetTypes(value); }
    }
    public Builder SetTypes(int value) {
      PrepareBuilder();
      result.hasTypes = true;
      result.types_ = value;
      return this;
    }
    public Builder ClearTypes() {
      PrepareBuilder();
      result.hasTypes = false;
      result.types_ = 0;
      return this;
    }
    
    public bool HasState {
      get { return result.hasState; }
    }
    public int State {
      get { return result.State; }
      set { SetState(value); }
    }
    public Builder SetState(int value) {
      PrepareBuilder();
      result.hasState = true;
      result.state_ = value;
      return this;
    }
    public Builder ClearState() {
      PrepareBuilder();
      result.hasState = false;
      result.state_ = 0;
      return this;
    }
    
    public bool HasOpenid {
      get { return result.hasOpenid; }
    }
    public string Openid {
      get { return result.Openid; }
      set { SetOpenid(value); }
    }
    public Builder SetOpenid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOpenid = true;
      result.openid_ = value;
      return this;
    }
    public Builder ClearOpenid() {
      PrepareBuilder();
      result.hasOpenid = false;
      result.openid_ = "";
      return this;
    }
    
    public bool HasRoomid {
      get { return result.hasRoomid; }
    }
    public int Roomid {
      get { return result.Roomid; }
      set { SetRoomid(value); }
    }
    public Builder SetRoomid(int value) {
      PrepareBuilder();
      result.hasRoomid = true;
      result.roomid_ = value;
      return this;
    }
    public Builder ClearRoomid() {
      PrepareBuilder();
      result.hasRoomid = false;
      result.roomid_ = 0;
      return this;
    }
    
    public bool HasFW {
      get { return result.hasFW; }
    }
    public int FW {
      get { return result.FW; }
      set { SetFW(value); }
    }
    public Builder SetFW(int value) {
      PrepareBuilder();
      result.hasFW = true;
      result.fW_ = value;
      return this;
    }
    public Builder ClearFW() {
      PrepareBuilder();
      result.hasFW = false;
      result.fW_ = 0;
      return this;
    }
    
    public bool HasMj {
     get { return result.hasMj; }
    }
    public global::MaJiang Mj {
      get { return result.Mj; }
      set { SetMj(value); }
    }
    public Builder SetMj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMj = true;
      result.mj_ = value;
      return this;
    }
    public Builder SetMj(global::MaJiang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasMj = true;
      result.mj_ = builderForValue.Build();
      return this;
    }
    public Builder MergeMj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasMj &&
          result.mj_ != global::MaJiang.DefaultInstance) {
          result.mj_ = global::MaJiang.CreateBuilder(result.mj_).MergeFrom(value).BuildPartial();
      } else {
        result.mj_ = value;
      }
      result.hasMj = true;
      return this;
    }
    public Builder ClearMj() {
      PrepareBuilder();
      result.hasMj = false;
      result.mj_ = null;
      return this;
    }
    
    public bool HasGtype {
      get { return result.hasGtype; }
    }
    public string Gtype {
      get { return result.Gtype; }
      set { SetGtype(value); }
    }
    public Builder SetGtype(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGtype = true;
      result.gtype_ = value;
      return this;
    }
    public Builder ClearGtype() {
      PrepareBuilder();
      result.hasGtype = false;
      result.gtype_ = "";
      return this;
    }
  }
  static SendPeng() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnPeng : pb::GeneratedMessage<ReturnPeng, ReturnPeng.Builder> {
  private ReturnPeng() { }
  private static readonly ReturnPeng defaultInstance = new ReturnPeng().MakeReadOnly();
  private static readonly string[] _returnPengFieldNames = new string[] { "Gtype", "Pfw", "fw", "mj", "state" };
  private static readonly uint[] _returnPengFieldTags = new uint[] { 42, 32, 24, 18, 8 };
  public static ReturnPeng DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnPeng DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnPeng ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnPeng__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnPeng, ReturnPeng.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnPeng__FieldAccessorTable; }
  }
  
  public const int StateFieldNumber = 1;
  private bool hasState;
  private int state_;
  public bool HasState {
    get { return hasState; }
  }
  public int State {
    get { return state_; }
  }
  
  public const int MjFieldNumber = 2;
  private bool hasMj;
  private global::MaJiang mj_;
  public bool HasMj {
    get { return hasMj; }
  }
  public global::MaJiang Mj {
    get { return mj_ ?? global::MaJiang.DefaultInstance; }
  }
  
  public const int FwFieldNumber = 3;
  private bool hasFw;
  private int fw_;
  public bool HasFw {
    get { return hasFw; }
  }
  public int Fw {
    get { return fw_; }
  }
  
  public const int PfwFieldNumber = 4;
  private bool hasPfw;
  private int pfw_;
  public bool HasPfw {
    get { return hasPfw; }
  }
  public int Pfw {
    get { return pfw_; }
  }
  
  public const int GtypeFieldNumber = 5;
  private bool hasGtype;
  private string gtype_ = "";
  public bool HasGtype {
    get { return hasGtype; }
  }
  public string Gtype {
    get { return gtype_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasState) return false;
      if (HasMj) {
        if (!Mj.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnPengFieldNames;
    if (hasState) {
      output.WriteInt32(1, field_names[4], State);
    }
    if (hasMj) {
      output.WriteMessage(2, field_names[3], Mj);
    }
    if (hasFw) {
      output.WriteInt32(3, field_names[2], Fw);
    }
    if (hasPfw) {
      output.WriteInt32(4, field_names[1], Pfw);
    }
    if (hasGtype) {
      output.WriteString(5, field_names[0], Gtype);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasState) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, State);
    }
    if (hasMj) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, Mj);
    }
    if (hasFw) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Fw);
    }
    if (hasPfw) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Pfw);
    }
    if (hasGtype) {
      size += pb::CodedOutputStream.ComputeStringSize(5, Gtype);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnPeng ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnPeng ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnPeng ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnPeng ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnPeng ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnPeng ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnPeng ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnPeng ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnPeng ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnPeng ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnPeng MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnPeng prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnPeng, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnPeng cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnPeng result;
    
    private ReturnPeng PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnPeng original = result;
        result = new ReturnPeng();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnPeng MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnPeng.Descriptor; }
    }
    
    public override ReturnPeng DefaultInstanceForType {
      get { return global::ReturnPeng.DefaultInstance; }
    }
    
    public override ReturnPeng BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnPeng) {
        return MergeFrom((ReturnPeng) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnPeng other) {
      if (other == global::ReturnPeng.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasState) {
        State = other.State;
      }
      if (other.HasMj) {
        MergeMj(other.Mj);
      }
      if (other.HasFw) {
        Fw = other.Fw;
      }
      if (other.HasPfw) {
        Pfw = other.Pfw;
      }
      if (other.HasGtype) {
        Gtype = other.Gtype;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnPengFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnPengFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasState = input.ReadInt32(ref result.state_);
            break;
          }
          case 18: {
            global::MaJiang.Builder subBuilder = global::MaJiang.CreateBuilder();
            if (result.hasMj) {
              subBuilder.MergeFrom(Mj);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Mj = subBuilder.BuildPartial();
            break;
          }
          case 24: {
            result.hasFw = input.ReadInt32(ref result.fw_);
            break;
          }
          case 32: {
            result.hasPfw = input.ReadInt32(ref result.pfw_);
            break;
          }
          case 42: {
            result.hasGtype = input.ReadString(ref result.gtype_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasState {
      get { return result.hasState; }
    }
    public int State {
      get { return result.State; }
      set { SetState(value); }
    }
    public Builder SetState(int value) {
      PrepareBuilder();
      result.hasState = true;
      result.state_ = value;
      return this;
    }
    public Builder ClearState() {
      PrepareBuilder();
      result.hasState = false;
      result.state_ = 0;
      return this;
    }
    
    public bool HasMj {
     get { return result.hasMj; }
    }
    public global::MaJiang Mj {
      get { return result.Mj; }
      set { SetMj(value); }
    }
    public Builder SetMj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMj = true;
      result.mj_ = value;
      return this;
    }
    public Builder SetMj(global::MaJiang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasMj = true;
      result.mj_ = builderForValue.Build();
      return this;
    }
    public Builder MergeMj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasMj &&
          result.mj_ != global::MaJiang.DefaultInstance) {
          result.mj_ = global::MaJiang.CreateBuilder(result.mj_).MergeFrom(value).BuildPartial();
      } else {
        result.mj_ = value;
      }
      result.hasMj = true;
      return this;
    }
    public Builder ClearMj() {
      PrepareBuilder();
      result.hasMj = false;
      result.mj_ = null;
      return this;
    }
    
    public bool HasFw {
      get { return result.hasFw; }
    }
    public int Fw {
      get { return result.Fw; }
      set { SetFw(value); }
    }
    public Builder SetFw(int value) {
      PrepareBuilder();
      result.hasFw = true;
      result.fw_ = value;
      return this;
    }
    public Builder ClearFw() {
      PrepareBuilder();
      result.hasFw = false;
      result.fw_ = 0;
      return this;
    }
    
    public bool HasPfw {
      get { return result.hasPfw; }
    }
    public int Pfw {
      get { return result.Pfw; }
      set { SetPfw(value); }
    }
    public Builder SetPfw(int value) {
      PrepareBuilder();
      result.hasPfw = true;
      result.pfw_ = value;
      return this;
    }
    public Builder ClearPfw() {
      PrepareBuilder();
      result.hasPfw = false;
      result.pfw_ = 0;
      return this;
    }
    
    public bool HasGtype {
      get { return result.hasGtype; }
    }
    public string Gtype {
      get { return result.Gtype; }
      set { SetGtype(value); }
    }
    public Builder SetGtype(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGtype = true;
      result.gtype_ = value;
      return this;
    }
    public Builder ClearGtype() {
      PrepareBuilder();
      result.hasGtype = false;
      result.gtype_ = "";
      return this;
    }
  }
  static ReturnPeng() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SendBT : pb::GeneratedMessage<SendBT, SendBT.Builder> {
  private SendBT() { }
  private static readonly SendBT defaultInstance = new SendBT().MakeReadOnly();
  private static readonly string[] _sendBTFieldNames = new string[] { "mj", "openid", "roomID", "type" };
  private static readonly uint[] _sendBTFieldTags = new uint[] { 34, 10, 24, 16 };
  public static SendBT DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SendBT DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SendBT ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_SendBT__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SendBT, SendBT.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_SendBT__FieldAccessorTable; }
  }
  
  public const int OpenidFieldNumber = 1;
  private bool hasOpenid;
  private string openid_ = "";
  public bool HasOpenid {
    get { return hasOpenid; }
  }
  public string Openid {
    get { return openid_; }
  }
  
  public const int TypeFieldNumber = 2;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public const int RoomIDFieldNumber = 3;
  private bool hasRoomID;
  private int roomID_;
  public bool HasRoomID {
    get { return hasRoomID; }
  }
  public int RoomID {
    get { return roomID_; }
  }
  
  public const int MjFieldNumber = 4;
  private bool hasMj;
  private global::MaJiang mj_;
  public bool HasMj {
    get { return hasMj; }
  }
  public global::MaJiang Mj {
    get { return mj_ ?? global::MaJiang.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasOpenid) return false;
      if (!hasType) return false;
      if (!hasRoomID) return false;
      if (!hasMj) return false;
      if (!Mj.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sendBTFieldNames;
    if (hasOpenid) {
      output.WriteString(1, field_names[1], Openid);
    }
    if (hasType) {
      output.WriteInt32(2, field_names[3], Type);
    }
    if (hasRoomID) {
      output.WriteInt32(3, field_names[2], RoomID);
    }
    if (hasMj) {
      output.WriteMessage(4, field_names[0], Mj);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasOpenid) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Openid);
    }
    if (hasType) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
    }
    if (hasRoomID) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, RoomID);
    }
    if (hasMj) {
      size += pb::CodedOutputStream.ComputeMessageSize(4, Mj);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SendBT ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendBT ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendBT ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendBT ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendBT ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendBT ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SendBT ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SendBT ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SendBT ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendBT ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SendBT MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SendBT prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SendBT, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SendBT cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SendBT result;
    
    private SendBT PrepareBuilder() {
      if (resultIsReadOnly) {
        SendBT original = result;
        result = new SendBT();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SendBT MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SendBT.Descriptor; }
    }
    
    public override SendBT DefaultInstanceForType {
      get { return global::SendBT.DefaultInstance; }
    }
    
    public override SendBT BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SendBT) {
        return MergeFrom((SendBT) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SendBT other) {
      if (other == global::SendBT.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasOpenid) {
        Openid = other.Openid;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasRoomID) {
        RoomID = other.RoomID;
      }
      if (other.HasMj) {
        MergeMj(other.Mj);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sendBTFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sendBTFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasOpenid = input.ReadString(ref result.openid_);
            break;
          }
          case 16: {
            result.hasType = input.ReadInt32(ref result.type_);
            break;
          }
          case 24: {
            result.hasRoomID = input.ReadInt32(ref result.roomID_);
            break;
          }
          case 34: {
            global::MaJiang.Builder subBuilder = global::MaJiang.CreateBuilder();
            if (result.hasMj) {
              subBuilder.MergeFrom(Mj);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Mj = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasOpenid {
      get { return result.hasOpenid; }
    }
    public string Openid {
      get { return result.Openid; }
      set { SetOpenid(value); }
    }
    public Builder SetOpenid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOpenid = true;
      result.openid_ = value;
      return this;
    }
    public Builder ClearOpenid() {
      PrepareBuilder();
      result.hasOpenid = false;
      result.openid_ = "";
      return this;
    }
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
    
    public bool HasRoomID {
      get { return result.hasRoomID; }
    }
    public int RoomID {
      get { return result.RoomID; }
      set { SetRoomID(value); }
    }
    public Builder SetRoomID(int value) {
      PrepareBuilder();
      result.hasRoomID = true;
      result.roomID_ = value;
      return this;
    }
    public Builder ClearRoomID() {
      PrepareBuilder();
      result.hasRoomID = false;
      result.roomID_ = 0;
      return this;
    }
    
    public bool HasMj {
     get { return result.hasMj; }
    }
    public global::MaJiang Mj {
      get { return result.Mj; }
      set { SetMj(value); }
    }
    public Builder SetMj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMj = true;
      result.mj_ = value;
      return this;
    }
    public Builder SetMj(global::MaJiang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasMj = true;
      result.mj_ = builderForValue.Build();
      return this;
    }
    public Builder MergeMj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasMj &&
          result.mj_ != global::MaJiang.DefaultInstance) {
          result.mj_ = global::MaJiang.CreateBuilder(result.mj_).MergeFrom(value).BuildPartial();
      } else {
        result.mj_ = value;
      }
      result.hasMj = true;
      return this;
    }
    public Builder ClearMj() {
      PrepareBuilder();
      result.hasMj = false;
      result.mj_ = null;
      return this;
    }
  }
  static SendBT() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnBTMsg : pb::GeneratedMessage<ReturnBTMsg, ReturnBTMsg.Builder> {
  private ReturnBTMsg() { }
  private static readonly ReturnBTMsg defaultInstance = new ReturnBTMsg().MakeReadOnly();
  private static readonly string[] _returnBTMsgFieldNames = new string[] { "fw" };
  private static readonly uint[] _returnBTMsgFieldTags = new uint[] { 8 };
  public static ReturnBTMsg DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnBTMsg DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnBTMsg ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnBTMsg__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnBTMsg, ReturnBTMsg.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnBTMsg__FieldAccessorTable; }
  }
  
  public const int FwFieldNumber = 1;
  private bool hasFw;
  private int fw_;
  public bool HasFw {
    get { return hasFw; }
  }
  public int Fw {
    get { return fw_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasFw) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnBTMsgFieldNames;
    if (hasFw) {
      output.WriteInt32(1, field_names[0], Fw);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasFw) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Fw);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnBTMsg ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnBTMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnBTMsg ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnBTMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnBTMsg ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnBTMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnBTMsg ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnBTMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnBTMsg ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnBTMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnBTMsg MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnBTMsg prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnBTMsg, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnBTMsg cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnBTMsg result;
    
    private ReturnBTMsg PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnBTMsg original = result;
        result = new ReturnBTMsg();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnBTMsg MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnBTMsg.Descriptor; }
    }
    
    public override ReturnBTMsg DefaultInstanceForType {
      get { return global::ReturnBTMsg.DefaultInstance; }
    }
    
    public override ReturnBTMsg BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnBTMsg) {
        return MergeFrom((ReturnBTMsg) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnBTMsg other) {
      if (other == global::ReturnBTMsg.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasFw) {
        Fw = other.Fw;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnBTMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnBTMsgFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasFw = input.ReadInt32(ref result.fw_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasFw {
      get { return result.hasFw; }
    }
    public int Fw {
      get { return result.Fw; }
      set { SetFw(value); }
    }
    public Builder SetFw(int value) {
      PrepareBuilder();
      result.hasFw = true;
      result.fw_ = value;
      return this;
    }
    public Builder ClearFw() {
      PrepareBuilder();
      result.hasFw = false;
      result.fw_ = 0;
      return this;
    }
  }
  static ReturnBTMsg() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SendJS : pb::GeneratedMessage<SendJS, SendJS.Builder> {
  private SendJS() { }
  private static readonly SendJS defaultInstance = new SendJS().MakeReadOnly();
  private static readonly string[] _sendJSFieldNames = new string[] { "openid", "roomid" };
  private static readonly uint[] _sendJSFieldTags = new uint[] { 10, 16 };
  public static SendJS DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SendJS DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SendJS ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_SendJS__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SendJS, SendJS.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_SendJS__FieldAccessorTable; }
  }
  
  public const int OpenidFieldNumber = 1;
  private bool hasOpenid;
  private string openid_ = "";
  public bool HasOpenid {
    get { return hasOpenid; }
  }
  public string Openid {
    get { return openid_; }
  }
  
  public const int RoomidFieldNumber = 2;
  private bool hasRoomid;
  private int roomid_;
  public bool HasRoomid {
    get { return hasRoomid; }
  }
  public int Roomid {
    get { return roomid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasOpenid) return false;
      if (!hasRoomid) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sendJSFieldNames;
    if (hasOpenid) {
      output.WriteString(1, field_names[0], Openid);
    }
    if (hasRoomid) {
      output.WriteInt32(2, field_names[1], Roomid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasOpenid) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Openid);
    }
    if (hasRoomid) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Roomid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SendJS ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendJS ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendJS ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendJS ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendJS ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendJS ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SendJS ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SendJS ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SendJS ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendJS ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SendJS MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SendJS prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SendJS, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SendJS cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SendJS result;
    
    private SendJS PrepareBuilder() {
      if (resultIsReadOnly) {
        SendJS original = result;
        result = new SendJS();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SendJS MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SendJS.Descriptor; }
    }
    
    public override SendJS DefaultInstanceForType {
      get { return global::SendJS.DefaultInstance; }
    }
    
    public override SendJS BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SendJS) {
        return MergeFrom((SendJS) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SendJS other) {
      if (other == global::SendJS.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasOpenid) {
        Openid = other.Openid;
      }
      if (other.HasRoomid) {
        Roomid = other.Roomid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sendJSFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sendJSFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasOpenid = input.ReadString(ref result.openid_);
            break;
          }
          case 16: {
            result.hasRoomid = input.ReadInt32(ref result.roomid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasOpenid {
      get { return result.hasOpenid; }
    }
    public string Openid {
      get { return result.Openid; }
      set { SetOpenid(value); }
    }
    public Builder SetOpenid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOpenid = true;
      result.openid_ = value;
      return this;
    }
    public Builder ClearOpenid() {
      PrepareBuilder();
      result.hasOpenid = false;
      result.openid_ = "";
      return this;
    }
    
    public bool HasRoomid {
      get { return result.hasRoomid; }
    }
    public int Roomid {
      get { return result.Roomid; }
      set { SetRoomid(value); }
    }
    public Builder SetRoomid(int value) {
      PrepareBuilder();
      result.hasRoomid = true;
      result.roomid_ = value;
      return this;
    }
    public Builder ClearRoomid() {
      PrepareBuilder();
      result.hasRoomid = false;
      result.roomid_ = 0;
      return this;
    }
  }
  static SendJS() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnJSMsg : pb::GeneratedMessage<ReturnJSMsg, ReturnJSMsg.Builder> {
  private ReturnJSMsg() { }
  private static readonly ReturnJSMsg defaultInstance = new ReturnJSMsg().MakeReadOnly();
  private static readonly string[] _returnJSMsgFieldNames = new string[] { "NickName", "fw" };
  private static readonly uint[] _returnJSMsgFieldTags = new uint[] { 10, 16 };
  public static ReturnJSMsg DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnJSMsg DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnJSMsg ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnJSMsg__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnJSMsg, ReturnJSMsg.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnJSMsg__FieldAccessorTable; }
  }
  
  public const int NickNameFieldNumber = 1;
  private bool hasNickName;
  private string nickName_ = "";
  public bool HasNickName {
    get { return hasNickName; }
  }
  public string NickName {
    get { return nickName_; }
  }
  
  public const int FwFieldNumber = 2;
  private bool hasFw;
  private int fw_;
  public bool HasFw {
    get { return hasFw; }
  }
  public int Fw {
    get { return fw_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasNickName) return false;
      if (!hasFw) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnJSMsgFieldNames;
    if (hasNickName) {
      output.WriteString(1, field_names[0], NickName);
    }
    if (hasFw) {
      output.WriteInt32(2, field_names[1], Fw);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasNickName) {
      size += pb::CodedOutputStream.ComputeStringSize(1, NickName);
    }
    if (hasFw) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Fw);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnJSMsg ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnJSMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnJSMsg ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnJSMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnJSMsg ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnJSMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnJSMsg ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnJSMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnJSMsg ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnJSMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnJSMsg MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnJSMsg prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnJSMsg, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnJSMsg cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnJSMsg result;
    
    private ReturnJSMsg PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnJSMsg original = result;
        result = new ReturnJSMsg();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnJSMsg MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnJSMsg.Descriptor; }
    }
    
    public override ReturnJSMsg DefaultInstanceForType {
      get { return global::ReturnJSMsg.DefaultInstance; }
    }
    
    public override ReturnJSMsg BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnJSMsg) {
        return MergeFrom((ReturnJSMsg) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnJSMsg other) {
      if (other == global::ReturnJSMsg.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasNickName) {
        NickName = other.NickName;
      }
      if (other.HasFw) {
        Fw = other.Fw;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnJSMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnJSMsgFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasNickName = input.ReadString(ref result.nickName_);
            break;
          }
          case 16: {
            result.hasFw = input.ReadInt32(ref result.fw_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasNickName {
      get { return result.hasNickName; }
    }
    public string NickName {
      get { return result.NickName; }
      set { SetNickName(value); }
    }
    public Builder SetNickName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasNickName = true;
      result.nickName_ = value;
      return this;
    }
    public Builder ClearNickName() {
      PrepareBuilder();
      result.hasNickName = false;
      result.nickName_ = "";
      return this;
    }
    
    public bool HasFw {
      get { return result.hasFw; }
    }
    public int Fw {
      get { return result.Fw; }
      set { SetFw(value); }
    }
    public Builder SetFw(int value) {
      PrepareBuilder();
      result.hasFw = true;
      result.fw_ = value;
      return this;
    }
    public Builder ClearFw() {
      PrepareBuilder();
      result.hasFw = false;
      result.fw_ = 0;
      return this;
    }
  }
  static ReturnJSMsg() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SendJSIdea : pb::GeneratedMessage<SendJSIdea, SendJSIdea.Builder> {
  private SendJSIdea() { }
  private static readonly SendJSIdea defaultInstance = new SendJSIdea().MakeReadOnly();
  private static readonly string[] _sendJSIdeaFieldNames = new string[] { "openid", "roomid", "state" };
  private static readonly uint[] _sendJSIdeaFieldTags = new uint[] { 18, 8, 24 };
  public static SendJSIdea DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SendJSIdea DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SendJSIdea ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_SendJSIdea__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SendJSIdea, SendJSIdea.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_SendJSIdea__FieldAccessorTable; }
  }
  
  public const int RoomidFieldNumber = 1;
  private bool hasRoomid;
  private int roomid_;
  public bool HasRoomid {
    get { return hasRoomid; }
  }
  public int Roomid {
    get { return roomid_; }
  }
  
  public const int OpenidFieldNumber = 2;
  private bool hasOpenid;
  private string openid_ = "";
  public bool HasOpenid {
    get { return hasOpenid; }
  }
  public string Openid {
    get { return openid_; }
  }
  
  public const int StateFieldNumber = 3;
  private bool hasState;
  private int state_;
  public bool HasState {
    get { return hasState; }
  }
  public int State {
    get { return state_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasRoomid) return false;
      if (!hasOpenid) return false;
      if (!hasState) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sendJSIdeaFieldNames;
    if (hasRoomid) {
      output.WriteInt32(1, field_names[1], Roomid);
    }
    if (hasOpenid) {
      output.WriteString(2, field_names[0], Openid);
    }
    if (hasState) {
      output.WriteInt32(3, field_names[2], State);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasRoomid) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Roomid);
    }
    if (hasOpenid) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Openid);
    }
    if (hasState) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, State);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SendJSIdea ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendJSIdea ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendJSIdea ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendJSIdea ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendJSIdea ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendJSIdea ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SendJSIdea ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SendJSIdea ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SendJSIdea ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendJSIdea ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SendJSIdea MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SendJSIdea prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SendJSIdea, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SendJSIdea cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SendJSIdea result;
    
    private SendJSIdea PrepareBuilder() {
      if (resultIsReadOnly) {
        SendJSIdea original = result;
        result = new SendJSIdea();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SendJSIdea MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SendJSIdea.Descriptor; }
    }
    
    public override SendJSIdea DefaultInstanceForType {
      get { return global::SendJSIdea.DefaultInstance; }
    }
    
    public override SendJSIdea BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SendJSIdea) {
        return MergeFrom((SendJSIdea) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SendJSIdea other) {
      if (other == global::SendJSIdea.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasRoomid) {
        Roomid = other.Roomid;
      }
      if (other.HasOpenid) {
        Openid = other.Openid;
      }
      if (other.HasState) {
        State = other.State;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sendJSIdeaFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sendJSIdeaFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasRoomid = input.ReadInt32(ref result.roomid_);
            break;
          }
          case 18: {
            result.hasOpenid = input.ReadString(ref result.openid_);
            break;
          }
          case 24: {
            result.hasState = input.ReadInt32(ref result.state_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasRoomid {
      get { return result.hasRoomid; }
    }
    public int Roomid {
      get { return result.Roomid; }
      set { SetRoomid(value); }
    }
    public Builder SetRoomid(int value) {
      PrepareBuilder();
      result.hasRoomid = true;
      result.roomid_ = value;
      return this;
    }
    public Builder ClearRoomid() {
      PrepareBuilder();
      result.hasRoomid = false;
      result.roomid_ = 0;
      return this;
    }
    
    public bool HasOpenid {
      get { return result.hasOpenid; }
    }
    public string Openid {
      get { return result.Openid; }
      set { SetOpenid(value); }
    }
    public Builder SetOpenid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOpenid = true;
      result.openid_ = value;
      return this;
    }
    public Builder ClearOpenid() {
      PrepareBuilder();
      result.hasOpenid = false;
      result.openid_ = "";
      return this;
    }
    
    public bool HasState {
      get { return result.hasState; }
    }
    public int State {
      get { return result.State; }
      set { SetState(value); }
    }
    public Builder SetState(int value) {
      PrepareBuilder();
      result.hasState = true;
      result.state_ = value;
      return this;
    }
    public Builder ClearState() {
      PrepareBuilder();
      result.hasState = false;
      result.state_ = 0;
      return this;
    }
  }
  static SendJSIdea() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnJSByOnew : pb::GeneratedMessage<ReturnJSByOnew, ReturnJSByOnew.Builder> {
  private ReturnJSByOnew() { }
  private static readonly ReturnJSByOnew defaultInstance = new ReturnJSByOnew().MakeReadOnly();
  private static readonly string[] _returnJSByOnewFieldNames = new string[] { "NickName", "fw", "state" };
  private static readonly uint[] _returnJSByOnewFieldTags = new uint[] { 10, 24, 16 };
  public static ReturnJSByOnew DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnJSByOnew DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnJSByOnew ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnJSByOnew__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnJSByOnew, ReturnJSByOnew.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnJSByOnew__FieldAccessorTable; }
  }
  
  public const int NickNameFieldNumber = 1;
  private bool hasNickName;
  private string nickName_ = "";
  public bool HasNickName {
    get { return hasNickName; }
  }
  public string NickName {
    get { return nickName_; }
  }
  
  public const int StateFieldNumber = 2;
  private bool hasState;
  private int state_;
  public bool HasState {
    get { return hasState; }
  }
  public int State {
    get { return state_; }
  }
  
  public const int FwFieldNumber = 3;
  private bool hasFw;
  private int fw_;
  public bool HasFw {
    get { return hasFw; }
  }
  public int Fw {
    get { return fw_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasNickName) return false;
      if (!hasState) return false;
      if (!hasFw) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnJSByOnewFieldNames;
    if (hasNickName) {
      output.WriteString(1, field_names[0], NickName);
    }
    if (hasState) {
      output.WriteInt32(2, field_names[2], State);
    }
    if (hasFw) {
      output.WriteInt32(3, field_names[1], Fw);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasNickName) {
      size += pb::CodedOutputStream.ComputeStringSize(1, NickName);
    }
    if (hasState) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, State);
    }
    if (hasFw) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Fw);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnJSByOnew ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnJSByOnew ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnJSByOnew ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnJSByOnew ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnJSByOnew ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnJSByOnew ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnJSByOnew ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnJSByOnew ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnJSByOnew ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnJSByOnew ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnJSByOnew MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnJSByOnew prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnJSByOnew, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnJSByOnew cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnJSByOnew result;
    
    private ReturnJSByOnew PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnJSByOnew original = result;
        result = new ReturnJSByOnew();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnJSByOnew MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnJSByOnew.Descriptor; }
    }
    
    public override ReturnJSByOnew DefaultInstanceForType {
      get { return global::ReturnJSByOnew.DefaultInstance; }
    }
    
    public override ReturnJSByOnew BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnJSByOnew) {
        return MergeFrom((ReturnJSByOnew) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnJSByOnew other) {
      if (other == global::ReturnJSByOnew.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasNickName) {
        NickName = other.NickName;
      }
      if (other.HasState) {
        State = other.State;
      }
      if (other.HasFw) {
        Fw = other.Fw;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnJSByOnewFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnJSByOnewFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasNickName = input.ReadString(ref result.nickName_);
            break;
          }
          case 16: {
            result.hasState = input.ReadInt32(ref result.state_);
            break;
          }
          case 24: {
            result.hasFw = input.ReadInt32(ref result.fw_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasNickName {
      get { return result.hasNickName; }
    }
    public string NickName {
      get { return result.NickName; }
      set { SetNickName(value); }
    }
    public Builder SetNickName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasNickName = true;
      result.nickName_ = value;
      return this;
    }
    public Builder ClearNickName() {
      PrepareBuilder();
      result.hasNickName = false;
      result.nickName_ = "";
      return this;
    }
    
    public bool HasState {
      get { return result.hasState; }
    }
    public int State {
      get { return result.State; }
      set { SetState(value); }
    }
    public Builder SetState(int value) {
      PrepareBuilder();
      result.hasState = true;
      result.state_ = value;
      return this;
    }
    public Builder ClearState() {
      PrepareBuilder();
      result.hasState = false;
      result.state_ = 0;
      return this;
    }
    
    public bool HasFw {
      get { return result.hasFw; }
    }
    public int Fw {
      get { return result.Fw; }
      set { SetFw(value); }
    }
    public Builder SetFw(int value) {
      PrepareBuilder();
      result.hasFw = true;
      result.fw_ = value;
      return this;
    }
    public Builder ClearFw() {
      PrepareBuilder();
      result.hasFw = false;
      result.fw_ = 0;
      return this;
    }
  }
  static ReturnJSByOnew() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnAllIdea : pb::GeneratedMessage<ReturnAllIdea, ReturnAllIdea.Builder> {
  private ReturnAllIdea() { }
  private static readonly ReturnAllIdea defaultInstance = new ReturnAllIdea().MakeReadOnly();
  private static readonly string[] _returnAllIdeaFieldNames = new string[] { "MessgaeType", "state" };
  private static readonly uint[] _returnAllIdeaFieldTags = new uint[] { 16, 8 };
  public static ReturnAllIdea DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnAllIdea DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnAllIdea ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnAllIdea__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnAllIdea, ReturnAllIdea.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnAllIdea__FieldAccessorTable; }
  }
  
  public const int StateFieldNumber = 1;
  private bool hasState;
  private int state_;
  public bool HasState {
    get { return hasState; }
  }
  public int State {
    get { return state_; }
  }
  
  public const int MessgaeTypeFieldNumber = 2;
  private bool hasMessgaeType;
  private int messgaeType_;
  public bool HasMessgaeType {
    get { return hasMessgaeType; }
  }
  public int MessgaeType {
    get { return messgaeType_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasState) return false;
      if (!hasMessgaeType) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnAllIdeaFieldNames;
    if (hasState) {
      output.WriteInt32(1, field_names[1], State);
    }
    if (hasMessgaeType) {
      output.WriteInt32(2, field_names[0], MessgaeType);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasState) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, State);
    }
    if (hasMessgaeType) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, MessgaeType);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnAllIdea ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnAllIdea ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnAllIdea ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnAllIdea ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnAllIdea ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnAllIdea ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnAllIdea ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnAllIdea ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnAllIdea ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnAllIdea ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnAllIdea MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnAllIdea prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnAllIdea, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnAllIdea cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnAllIdea result;
    
    private ReturnAllIdea PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnAllIdea original = result;
        result = new ReturnAllIdea();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnAllIdea MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnAllIdea.Descriptor; }
    }
    
    public override ReturnAllIdea DefaultInstanceForType {
      get { return global::ReturnAllIdea.DefaultInstance; }
    }
    
    public override ReturnAllIdea BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnAllIdea) {
        return MergeFrom((ReturnAllIdea) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnAllIdea other) {
      if (other == global::ReturnAllIdea.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasState) {
        State = other.State;
      }
      if (other.HasMessgaeType) {
        MessgaeType = other.MessgaeType;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnAllIdeaFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnAllIdeaFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasState = input.ReadInt32(ref result.state_);
            break;
          }
          case 16: {
            result.hasMessgaeType = input.ReadInt32(ref result.messgaeType_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasState {
      get { return result.hasState; }
    }
    public int State {
      get { return result.State; }
      set { SetState(value); }
    }
    public Builder SetState(int value) {
      PrepareBuilder();
      result.hasState = true;
      result.state_ = value;
      return this;
    }
    public Builder ClearState() {
      PrepareBuilder();
      result.hasState = false;
      result.state_ = 0;
      return this;
    }
    
    public bool HasMessgaeType {
      get { return result.hasMessgaeType; }
    }
    public int MessgaeType {
      get { return result.MessgaeType; }
      set { SetMessgaeType(value); }
    }
    public Builder SetMessgaeType(int value) {
      PrepareBuilder();
      result.hasMessgaeType = true;
      result.messgaeType_ = value;
      return this;
    }
    public Builder ClearMessgaeType() {
      PrepareBuilder();
      result.hasMessgaeType = false;
      result.messgaeType_ = 0;
      return this;
    }
  }
  static ReturnAllIdea() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SendRemove : pb::GeneratedMessage<SendRemove, SendRemove.Builder> {
  private SendRemove() { }
  private static readonly SendRemove defaultInstance = new SendRemove().MakeReadOnly();
  private static readonly string[] _sendRemoveFieldNames = new string[] { "RoomID", "openid" };
  private static readonly uint[] _sendRemoveFieldTags = new uint[] { 16, 10 };
  public static SendRemove DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SendRemove DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SendRemove ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_SendRemove__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SendRemove, SendRemove.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_SendRemove__FieldAccessorTable; }
  }
  
  public const int OpenidFieldNumber = 1;
  private bool hasOpenid;
  private string openid_ = "";
  public bool HasOpenid {
    get { return hasOpenid; }
  }
  public string Openid {
    get { return openid_; }
  }
  
  public const int RoomIDFieldNumber = 2;
  private bool hasRoomID;
  private int roomID_;
  public bool HasRoomID {
    get { return hasRoomID; }
  }
  public int RoomID {
    get { return roomID_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasOpenid) return false;
      if (!hasRoomID) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sendRemoveFieldNames;
    if (hasOpenid) {
      output.WriteString(1, field_names[1], Openid);
    }
    if (hasRoomID) {
      output.WriteInt32(2, field_names[0], RoomID);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasOpenid) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Openid);
    }
    if (hasRoomID) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, RoomID);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SendRemove ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendRemove ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendRemove ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendRemove ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendRemove ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendRemove ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SendRemove ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SendRemove ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SendRemove ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendRemove ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SendRemove MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SendRemove prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SendRemove, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SendRemove cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SendRemove result;
    
    private SendRemove PrepareBuilder() {
      if (resultIsReadOnly) {
        SendRemove original = result;
        result = new SendRemove();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SendRemove MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SendRemove.Descriptor; }
    }
    
    public override SendRemove DefaultInstanceForType {
      get { return global::SendRemove.DefaultInstance; }
    }
    
    public override SendRemove BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SendRemove) {
        return MergeFrom((SendRemove) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SendRemove other) {
      if (other == global::SendRemove.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasOpenid) {
        Openid = other.Openid;
      }
      if (other.HasRoomID) {
        RoomID = other.RoomID;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sendRemoveFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sendRemoveFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasOpenid = input.ReadString(ref result.openid_);
            break;
          }
          case 16: {
            result.hasRoomID = input.ReadInt32(ref result.roomID_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasOpenid {
      get { return result.hasOpenid; }
    }
    public string Openid {
      get { return result.Openid; }
      set { SetOpenid(value); }
    }
    public Builder SetOpenid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOpenid = true;
      result.openid_ = value;
      return this;
    }
    public Builder ClearOpenid() {
      PrepareBuilder();
      result.hasOpenid = false;
      result.openid_ = "";
      return this;
    }
    
    public bool HasRoomID {
      get { return result.hasRoomID; }
    }
    public int RoomID {
      get { return result.RoomID; }
      set { SetRoomID(value); }
    }
    public Builder SetRoomID(int value) {
      PrepareBuilder();
      result.hasRoomID = true;
      result.roomID_ = value;
      return this;
    }
    public Builder ClearRoomID() {
      PrepareBuilder();
      result.hasRoomID = false;
      result.roomID_ = 0;
      return this;
    }
  }
  static SendRemove() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnRemoveUser : pb::GeneratedMessage<ReturnRemoveUser, ReturnRemoveUser.Builder> {
  private ReturnRemoveUser() { }
  private static readonly ReturnRemoveUser defaultInstance = new ReturnRemoveUser().MakeReadOnly();
  private static readonly string[] _returnRemoveUserFieldNames = new string[] { "openid", "status" };
  private static readonly uint[] _returnRemoveUserFieldTags = new uint[] { 10, 16 };
  public static ReturnRemoveUser DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnRemoveUser DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnRemoveUser ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnRemoveUser__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnRemoveUser, ReturnRemoveUser.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnRemoveUser__FieldAccessorTable; }
  }
  
  public const int OpenidFieldNumber = 1;
  private bool hasOpenid;
  private string openid_ = "";
  public bool HasOpenid {
    get { return hasOpenid; }
  }
  public string Openid {
    get { return openid_; }
  }
  
  public const int StatusFieldNumber = 2;
  private bool hasStatus;
  private int status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public int Status {
    get { return status_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasOpenid) return false;
      if (!hasStatus) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnRemoveUserFieldNames;
    if (hasOpenid) {
      output.WriteString(1, field_names[0], Openid);
    }
    if (hasStatus) {
      output.WriteInt32(2, field_names[1], Status);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasOpenid) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Openid);
    }
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Status);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnRemoveUser ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnRemoveUser ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnRemoveUser ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnRemoveUser ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnRemoveUser ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnRemoveUser ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnRemoveUser ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnRemoveUser ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnRemoveUser ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnRemoveUser ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnRemoveUser MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnRemoveUser prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnRemoveUser, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnRemoveUser cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnRemoveUser result;
    
    private ReturnRemoveUser PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnRemoveUser original = result;
        result = new ReturnRemoveUser();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnRemoveUser MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnRemoveUser.Descriptor; }
    }
    
    public override ReturnRemoveUser DefaultInstanceForType {
      get { return global::ReturnRemoveUser.DefaultInstance; }
    }
    
    public override ReturnRemoveUser BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnRemoveUser) {
        return MergeFrom((ReturnRemoveUser) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnRemoveUser other) {
      if (other == global::ReturnRemoveUser.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasOpenid) {
        Openid = other.Openid;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnRemoveUserFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnRemoveUserFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasOpenid = input.ReadString(ref result.openid_);
            break;
          }
          case 16: {
            result.hasStatus = input.ReadInt32(ref result.status_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasOpenid {
      get { return result.hasOpenid; }
    }
    public string Openid {
      get { return result.Openid; }
      set { SetOpenid(value); }
    }
    public Builder SetOpenid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOpenid = true;
      result.openid_ = value;
      return this;
    }
    public Builder ClearOpenid() {
      PrepareBuilder();
      result.hasOpenid = false;
      result.openid_ = "";
      return this;
    }
    
    public bool HasStatus {
      get { return result.hasStatus; }
    }
    public int Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(int value) {
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = 0;
      return this;
    }
  }
  static ReturnRemoveUser() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SendQYM : pb::GeneratedMessage<SendQYM, SendQYM.Builder> {
  private SendQYM() { }
  private static readonly SendQYM defaultInstance = new SendQYM().MakeReadOnly();
  private static readonly string[] _sendQYMFieldNames = new string[] { "openid", "type" };
  private static readonly uint[] _sendQYMFieldTags = new uint[] { 18, 8 };
  public static SendQYM DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SendQYM DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SendQYM ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_SendQYM__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SendQYM, SendQYM.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_SendQYM__FieldAccessorTable; }
  }
  
  public const int TypeFieldNumber = 1;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public const int OpenidFieldNumber = 2;
  private bool hasOpenid;
  private string openid_ = "";
  public bool HasOpenid {
    get { return hasOpenid; }
  }
  public string Openid {
    get { return openid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasType) return false;
      if (!hasOpenid) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sendQYMFieldNames;
    if (hasType) {
      output.WriteInt32(1, field_names[1], Type);
    }
    if (hasOpenid) {
      output.WriteString(2, field_names[0], Openid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasType) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
    }
    if (hasOpenid) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Openid);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SendQYM ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendQYM ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendQYM ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendQYM ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendQYM ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendQYM ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SendQYM ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SendQYM ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SendQYM ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendQYM ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SendQYM MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SendQYM prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SendQYM, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SendQYM cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SendQYM result;
    
    private SendQYM PrepareBuilder() {
      if (resultIsReadOnly) {
        SendQYM original = result;
        result = new SendQYM();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SendQYM MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SendQYM.Descriptor; }
    }
    
    public override SendQYM DefaultInstanceForType {
      get { return global::SendQYM.DefaultInstance; }
    }
    
    public override SendQYM BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SendQYM) {
        return MergeFrom((SendQYM) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SendQYM other) {
      if (other == global::SendQYM.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasOpenid) {
        Openid = other.Openid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sendQYMFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sendQYMFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasType = input.ReadInt32(ref result.type_);
            break;
          }
          case 18: {
            result.hasOpenid = input.ReadString(ref result.openid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
    
    public bool HasOpenid {
      get { return result.hasOpenid; }
    }
    public string Openid {
      get { return result.Openid; }
      set { SetOpenid(value); }
    }
    public Builder SetOpenid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOpenid = true;
      result.openid_ = value;
      return this;
    }
    public Builder ClearOpenid() {
      PrepareBuilder();
      result.hasOpenid = false;
      result.openid_ = "";
      return this;
    }
  }
  static SendQYM() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnQYM : pb::GeneratedMessage<ReturnQYM, ReturnQYM.Builder> {
  private ReturnQYM() { }
  private static readonly ReturnQYM defaultInstance = new ReturnQYM().MakeReadOnly();
  private static readonly string[] _returnQYMFieldNames = new string[] { "fw", "type" };
  private static readonly uint[] _returnQYMFieldTags = new uint[] { 8, 16 };
  public static ReturnQYM DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnQYM DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnQYM ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnQYM__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnQYM, ReturnQYM.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnQYM__FieldAccessorTable; }
  }
  
  public const int FwFieldNumber = 1;
  private bool hasFw;
  private int fw_;
  public bool HasFw {
    get { return hasFw; }
  }
  public int Fw {
    get { return fw_; }
  }
  
  public const int TypeFieldNumber = 2;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasFw) return false;
      if (!hasType) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnQYMFieldNames;
    if (hasFw) {
      output.WriteInt32(1, field_names[0], Fw);
    }
    if (hasType) {
      output.WriteInt32(2, field_names[1], Type);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasFw) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Fw);
    }
    if (hasType) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnQYM ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnQYM ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnQYM ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnQYM ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnQYM ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnQYM ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnQYM ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnQYM ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnQYM ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnQYM ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnQYM MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnQYM prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnQYM, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnQYM cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnQYM result;
    
    private ReturnQYM PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnQYM original = result;
        result = new ReturnQYM();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnQYM MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnQYM.Descriptor; }
    }
    
    public override ReturnQYM DefaultInstanceForType {
      get { return global::ReturnQYM.DefaultInstance; }
    }
    
    public override ReturnQYM BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnQYM) {
        return MergeFrom((ReturnQYM) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnQYM other) {
      if (other == global::ReturnQYM.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasFw) {
        Fw = other.Fw;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnQYMFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnQYMFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasFw = input.ReadInt32(ref result.fw_);
            break;
          }
          case 16: {
            result.hasType = input.ReadInt32(ref result.type_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasFw {
      get { return result.hasFw; }
    }
    public int Fw {
      get { return result.Fw; }
      set { SetFw(value); }
    }
    public Builder SetFw(int value) {
      PrepareBuilder();
      result.hasFw = true;
      result.fw_ = value;
      return this;
    }
    public Builder ClearFw() {
      PrepareBuilder();
      result.hasFw = false;
      result.fw_ = 0;
      return this;
    }
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
  }
  static ReturnQYM() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnAYM : pb::GeneratedMessage<ReturnAYM, ReturnAYM.Builder> {
  private ReturnAYM() { }
  private static readonly ReturnAYM defaultInstance = new ReturnAYM().MakeReadOnly();
  private static readonly string[] _returnAYMFieldNames = new string[] { "QP" };
  private static readonly uint[] _returnAYMFieldTags = new uint[] { 10 };
  public static ReturnAYM DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnAYM DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnAYM ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnAYM__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnAYM, ReturnAYM.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnAYM__FieldAccessorTable; }
  }
  
  public const int QPFieldNumber = 1;
  private pbc::PopsicleList<global::ReturnQYM> qP_ = new pbc::PopsicleList<global::ReturnQYM>();
  public scg::IList<global::ReturnQYM> QPList {
    get { return qP_; }
  }
  public int QPCount {
    get { return qP_.Count; }
  }
  public global::ReturnQYM GetQP(int index) {
    return qP_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::ReturnQYM element in QPList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnAYMFieldNames;
    if (qP_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], qP_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::ReturnQYM element in QPList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnAYM ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnAYM ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnAYM ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnAYM ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnAYM ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnAYM ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnAYM ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnAYM ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnAYM ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnAYM ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnAYM MakeReadOnly() {
    qP_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnAYM prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnAYM, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnAYM cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnAYM result;
    
    private ReturnAYM PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnAYM original = result;
        result = new ReturnAYM();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnAYM MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnAYM.Descriptor; }
    }
    
    public override ReturnAYM DefaultInstanceForType {
      get { return global::ReturnAYM.DefaultInstance; }
    }
    
    public override ReturnAYM BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnAYM) {
        return MergeFrom((ReturnAYM) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnAYM other) {
      if (other == global::ReturnAYM.DefaultInstance) return this;
      PrepareBuilder();
      if (other.qP_.Count != 0) {
        result.qP_.Add(other.qP_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnAYMFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnAYMFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.qP_, global::ReturnQYM.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::ReturnQYM> QPList {
      get { return PrepareBuilder().qP_; }
    }
    public int QPCount {
      get { return result.QPCount; }
    }
    public global::ReturnQYM GetQP(int index) {
      return result.GetQP(index);
    }
    public Builder SetQP(int index, global::ReturnQYM value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.qP_[index] = value;
      return this;
    }
    public Builder SetQP(int index, global::ReturnQYM.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.qP_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddQP(global::ReturnQYM value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.qP_.Add(value);
      return this;
    }
    public Builder AddQP(global::ReturnQYM.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.qP_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeQP(scg::IEnumerable<global::ReturnQYM> values) {
      PrepareBuilder();
      result.qP_.Add(values);
      return this;
    }
    public Builder ClearQP() {
      PrepareBuilder();
      result.qP_.Clear();
      return this;
    }
  }
  static ReturnAYM() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnTT : pb::GeneratedMessage<ReturnTT, ReturnTT.Builder> {
  private ReturnTT() { }
  private static readonly ReturnTT defaultInstance = new ReturnTT().MakeReadOnly();
  private static readonly string[] _returnTTFieldNames = new string[] { "fw" };
  private static readonly uint[] _returnTTFieldTags = new uint[] { 8 };
  public static ReturnTT DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnTT DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnTT ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnTT__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnTT, ReturnTT.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnTT__FieldAccessorTable; }
  }
  
  public const int FwFieldNumber = 1;
  private bool hasFw;
  private int fw_;
  public bool HasFw {
    get { return hasFw; }
  }
  public int Fw {
    get { return fw_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasFw) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnTTFieldNames;
    if (hasFw) {
      output.WriteInt32(1, field_names[0], Fw);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasFw) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Fw);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnTT ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnTT ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnTT ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnTT ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnTT ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnTT ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnTT ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnTT ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnTT ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnTT ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnTT MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnTT prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnTT, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnTT cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnTT result;
    
    private ReturnTT PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnTT original = result;
        result = new ReturnTT();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnTT MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnTT.Descriptor; }
    }
    
    public override ReturnTT DefaultInstanceForType {
      get { return global::ReturnTT.DefaultInstance; }
    }
    
    public override ReturnTT BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnTT) {
        return MergeFrom((ReturnTT) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnTT other) {
      if (other == global::ReturnTT.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasFw) {
        Fw = other.Fw;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnTTFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnTTFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasFw = input.ReadInt32(ref result.fw_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasFw {
      get { return result.hasFw; }
    }
    public int Fw {
      get { return result.Fw; }
      set { SetFw(value); }
    }
    public Builder SetFw(int value) {
      PrepareBuilder();
      result.hasFw = true;
      result.fw_ = value;
      return this;
    }
    public Builder ClearFw() {
      PrepareBuilder();
      result.hasFw = false;
      result.fw_ = 0;
      return this;
    }
  }
  static ReturnTT() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class UserAJS : pb::GeneratedMessage<UserAJS, UserAJS.Builder> {
  private UserAJS() { }
  private static readonly UserAJS defaultInstance = new UserAJS().MakeReadOnly();
  private static readonly string[] _userAJSFieldNames = new string[] { "Mdou", "Scare", "Zdou", "andou", "dianpao", "user", "zimo" };
  private static readonly uint[] _userAJSFieldTags = new uint[] { 40, 56, 48, 32, 24, 10, 16 };
  public static UserAJS DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override UserAJS DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override UserAJS ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_UserAJS__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<UserAJS, UserAJS.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_UserAJS__FieldAccessorTable; }
  }
  
  public const int UserFieldNumber = 1;
  private bool hasUser;
  private global::Userinfo user_;
  public bool HasUser {
    get { return hasUser; }
  }
  public global::Userinfo User {
    get { return user_ ?? global::Userinfo.DefaultInstance; }
  }
  
  public const int ZimoFieldNumber = 2;
  private bool hasZimo;
  private int zimo_;
  public bool HasZimo {
    get { return hasZimo; }
  }
  public int Zimo {
    get { return zimo_; }
  }
  
  public const int DianpaoFieldNumber = 3;
  private bool hasDianpao;
  private int dianpao_;
  public bool HasDianpao {
    get { return hasDianpao; }
  }
  public int Dianpao {
    get { return dianpao_; }
  }
  
  public const int AndouFieldNumber = 4;
  private bool hasAndou;
  private int andou_;
  public bool HasAndou {
    get { return hasAndou; }
  }
  public int Andou {
    get { return andou_; }
  }
  
  public const int MdouFieldNumber = 5;
  private bool hasMdou;
  private int mdou_;
  public bool HasMdou {
    get { return hasMdou; }
  }
  public int Mdou {
    get { return mdou_; }
  }
  
  public const int ZdouFieldNumber = 6;
  private bool hasZdou;
  private int zdou_;
  public bool HasZdou {
    get { return hasZdou; }
  }
  public int Zdou {
    get { return zdou_; }
  }
  
  public const int ScareFieldNumber = 7;
  private bool hasScare;
  private int scare_;
  public bool HasScare {
    get { return hasScare; }
  }
  public int Scare {
    get { return scare_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasUser) return false;
      if (!hasZimo) return false;
      if (!hasDianpao) return false;
      if (!hasAndou) return false;
      if (!hasMdou) return false;
      if (!hasZdou) return false;
      if (!hasScare) return false;
      if (!User.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _userAJSFieldNames;
    if (hasUser) {
      output.WriteMessage(1, field_names[5], User);
    }
    if (hasZimo) {
      output.WriteInt32(2, field_names[6], Zimo);
    }
    if (hasDianpao) {
      output.WriteInt32(3, field_names[4], Dianpao);
    }
    if (hasAndou) {
      output.WriteInt32(4, field_names[3], Andou);
    }
    if (hasMdou) {
      output.WriteInt32(5, field_names[0], Mdou);
    }
    if (hasZdou) {
      output.WriteInt32(6, field_names[2], Zdou);
    }
    if (hasScare) {
      output.WriteInt32(7, field_names[1], Scare);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasUser) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, User);
    }
    if (hasZimo) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Zimo);
    }
    if (hasDianpao) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Dianpao);
    }
    if (hasAndou) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Andou);
    }
    if (hasMdou) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Mdou);
    }
    if (hasZdou) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Zdou);
    }
    if (hasScare) {
      size += pb::CodedOutputStream.ComputeInt32Size(7, Scare);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static UserAJS ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserAJS ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserAJS ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserAJS ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserAJS ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserAJS ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static UserAJS ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static UserAJS ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static UserAJS ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserAJS ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private UserAJS MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(UserAJS prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<UserAJS, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(UserAJS cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private UserAJS result;
    
    private UserAJS PrepareBuilder() {
      if (resultIsReadOnly) {
        UserAJS original = result;
        result = new UserAJS();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override UserAJS MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::UserAJS.Descriptor; }
    }
    
    public override UserAJS DefaultInstanceForType {
      get { return global::UserAJS.DefaultInstance; }
    }
    
    public override UserAJS BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is UserAJS) {
        return MergeFrom((UserAJS) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(UserAJS other) {
      if (other == global::UserAJS.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasUser) {
        MergeUser(other.User);
      }
      if (other.HasZimo) {
        Zimo = other.Zimo;
      }
      if (other.HasDianpao) {
        Dianpao = other.Dianpao;
      }
      if (other.HasAndou) {
        Andou = other.Andou;
      }
      if (other.HasMdou) {
        Mdou = other.Mdou;
      }
      if (other.HasZdou) {
        Zdou = other.Zdou;
      }
      if (other.HasScare) {
        Scare = other.Scare;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_userAJSFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _userAJSFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::Userinfo.Builder subBuilder = global::Userinfo.CreateBuilder();
            if (result.hasUser) {
              subBuilder.MergeFrom(User);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            User = subBuilder.BuildPartial();
            break;
          }
          case 16: {
            result.hasZimo = input.ReadInt32(ref result.zimo_);
            break;
          }
          case 24: {
            result.hasDianpao = input.ReadInt32(ref result.dianpao_);
            break;
          }
          case 32: {
            result.hasAndou = input.ReadInt32(ref result.andou_);
            break;
          }
          case 40: {
            result.hasMdou = input.ReadInt32(ref result.mdou_);
            break;
          }
          case 48: {
            result.hasZdou = input.ReadInt32(ref result.zdou_);
            break;
          }
          case 56: {
            result.hasScare = input.ReadInt32(ref result.scare_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasUser {
     get { return result.hasUser; }
    }
    public global::Userinfo User {
      get { return result.User; }
      set { SetUser(value); }
    }
    public Builder SetUser(global::Userinfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUser = true;
      result.user_ = value;
      return this;
    }
    public Builder SetUser(global::Userinfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasUser = true;
      result.user_ = builderForValue.Build();
      return this;
    }
    public Builder MergeUser(global::Userinfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasUser &&
          result.user_ != global::Userinfo.DefaultInstance) {
          result.user_ = global::Userinfo.CreateBuilder(result.user_).MergeFrom(value).BuildPartial();
      } else {
        result.user_ = value;
      }
      result.hasUser = true;
      return this;
    }
    public Builder ClearUser() {
      PrepareBuilder();
      result.hasUser = false;
      result.user_ = null;
      return this;
    }
    
    public bool HasZimo {
      get { return result.hasZimo; }
    }
    public int Zimo {
      get { return result.Zimo; }
      set { SetZimo(value); }
    }
    public Builder SetZimo(int value) {
      PrepareBuilder();
      result.hasZimo = true;
      result.zimo_ = value;
      return this;
    }
    public Builder ClearZimo() {
      PrepareBuilder();
      result.hasZimo = false;
      result.zimo_ = 0;
      return this;
    }
    
    public bool HasDianpao {
      get { return result.hasDianpao; }
    }
    public int Dianpao {
      get { return result.Dianpao; }
      set { SetDianpao(value); }
    }
    public Builder SetDianpao(int value) {
      PrepareBuilder();
      result.hasDianpao = true;
      result.dianpao_ = value;
      return this;
    }
    public Builder ClearDianpao() {
      PrepareBuilder();
      result.hasDianpao = false;
      result.dianpao_ = 0;
      return this;
    }
    
    public bool HasAndou {
      get { return result.hasAndou; }
    }
    public int Andou {
      get { return result.Andou; }
      set { SetAndou(value); }
    }
    public Builder SetAndou(int value) {
      PrepareBuilder();
      result.hasAndou = true;
      result.andou_ = value;
      return this;
    }
    public Builder ClearAndou() {
      PrepareBuilder();
      result.hasAndou = false;
      result.andou_ = 0;
      return this;
    }
    
    public bool HasMdou {
      get { return result.hasMdou; }
    }
    public int Mdou {
      get { return result.Mdou; }
      set { SetMdou(value); }
    }
    public Builder SetMdou(int value) {
      PrepareBuilder();
      result.hasMdou = true;
      result.mdou_ = value;
      return this;
    }
    public Builder ClearMdou() {
      PrepareBuilder();
      result.hasMdou = false;
      result.mdou_ = 0;
      return this;
    }
    
    public bool HasZdou {
      get { return result.hasZdou; }
    }
    public int Zdou {
      get { return result.Zdou; }
      set { SetZdou(value); }
    }
    public Builder SetZdou(int value) {
      PrepareBuilder();
      result.hasZdou = true;
      result.zdou_ = value;
      return this;
    }
    public Builder ClearZdou() {
      PrepareBuilder();
      result.hasZdou = false;
      result.zdou_ = 0;
      return this;
    }
    
    public bool HasScare {
      get { return result.hasScare; }
    }
    public int Scare {
      get { return result.Scare; }
      set { SetScare(value); }
    }
    public Builder SetScare(int value) {
      PrepareBuilder();
      result.hasScare = true;
      result.scare_ = value;
      return this;
    }
    public Builder ClearScare() {
      PrepareBuilder();
      result.hasScare = false;
      result.scare_ = 0;
      return this;
    }
  }
  static UserAJS() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnDJS : pb::GeneratedMessage<ReturnDJS, ReturnDJS.Builder> {
  private ReturnDJS() { }
  private static readonly ReturnDJS defaultInstance = new ReturnDJS().MakeReadOnly();
  private static readonly string[] _returnDJSFieldNames = new string[] { "state", "userjs" };
  private static readonly uint[] _returnDJSFieldTags = new uint[] { 16, 10 };
  public static ReturnDJS DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnDJS DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnDJS ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnDJS__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnDJS, ReturnDJS.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnDJS__FieldAccessorTable; }
  }
  
  public const int UserjsFieldNumber = 1;
  private pbc::PopsicleList<global::UserAJS> userjs_ = new pbc::PopsicleList<global::UserAJS>();
  public scg::IList<global::UserAJS> UserjsList {
    get { return userjs_; }
  }
  public int UserjsCount {
    get { return userjs_.Count; }
  }
  public global::UserAJS GetUserjs(int index) {
    return userjs_[index];
  }
  
  public const int StateFieldNumber = 2;
  private bool hasState;
  private int state_;
  public bool HasState {
    get { return hasState; }
  }
  public int State {
    get { return state_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasState) return false;
      foreach (global::UserAJS element in UserjsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnDJSFieldNames;
    if (userjs_.Count > 0) {
      output.WriteMessageArray(1, field_names[1], userjs_);
    }
    if (hasState) {
      output.WriteInt32(2, field_names[0], State);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::UserAJS element in UserjsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    if (hasState) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, State);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnDJS ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnDJS ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnDJS ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnDJS ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnDJS ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnDJS ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnDJS ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnDJS ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnDJS ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnDJS ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnDJS MakeReadOnly() {
    userjs_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnDJS prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnDJS, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnDJS cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnDJS result;
    
    private ReturnDJS PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnDJS original = result;
        result = new ReturnDJS();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnDJS MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnDJS.Descriptor; }
    }
    
    public override ReturnDJS DefaultInstanceForType {
      get { return global::ReturnDJS.DefaultInstance; }
    }
    
    public override ReturnDJS BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnDJS) {
        return MergeFrom((ReturnDJS) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnDJS other) {
      if (other == global::ReturnDJS.DefaultInstance) return this;
      PrepareBuilder();
      if (other.userjs_.Count != 0) {
        result.userjs_.Add(other.userjs_);
      }
      if (other.HasState) {
        State = other.State;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnDJSFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnDJSFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.userjs_, global::UserAJS.DefaultInstance, extensionRegistry);
            break;
          }
          case 16: {
            result.hasState = input.ReadInt32(ref result.state_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::UserAJS> UserjsList {
      get { return PrepareBuilder().userjs_; }
    }
    public int UserjsCount {
      get { return result.UserjsCount; }
    }
    public global::UserAJS GetUserjs(int index) {
      return result.GetUserjs(index);
    }
    public Builder SetUserjs(int index, global::UserAJS value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.userjs_[index] = value;
      return this;
    }
    public Builder SetUserjs(int index, global::UserAJS.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.userjs_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddUserjs(global::UserAJS value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.userjs_.Add(value);
      return this;
    }
    public Builder AddUserjs(global::UserAJS.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.userjs_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeUserjs(scg::IEnumerable<global::UserAJS> values) {
      PrepareBuilder();
      result.userjs_.Add(values);
      return this;
    }
    public Builder ClearUserjs() {
      PrepareBuilder();
      result.userjs_.Clear();
      return this;
    }
    
    public bool HasState {
      get { return result.hasState; }
    }
    public int State {
      get { return result.State; }
      set { SetState(value); }
    }
    public Builder SetState(int value) {
      PrepareBuilder();
      result.hasState = true;
      result.state_ = value;
      return this;
    }
    public Builder ClearState() {
      PrepareBuilder();
      result.hasState = false;
      result.state_ = 0;
      return this;
    }
  }
  static ReturnDJS() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnHByType : pb::GeneratedMessage<ReturnHByType, ReturnHByType.Builder> {
  private ReturnHByType() { }
  private static readonly ReturnHByType defaultInstance = new ReturnHByType().MakeReadOnly();
  private static readonly string[] _returnHByTypeFieldNames = new string[] { "FWB", "FWZ", "MJ", "type" };
  private static readonly uint[] _returnHByTypeFieldTags = new uint[] { 24, 8, 34, 16 };
  public static ReturnHByType DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnHByType DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnHByType ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnHByType__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnHByType, ReturnHByType.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnHByType__FieldAccessorTable; }
  }
  
  public const int FWZFieldNumber = 1;
  private bool hasFWZ;
  private int fWZ_;
  public bool HasFWZ {
    get { return hasFWZ; }
  }
  public int FWZ {
    get { return fWZ_; }
  }
  
  public const int TypeFieldNumber = 2;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public const int FWBFieldNumber = 3;
  private bool hasFWB;
  private int fWB_;
  public bool HasFWB {
    get { return hasFWB; }
  }
  public int FWB {
    get { return fWB_; }
  }
  
  public const int MJFieldNumber = 4;
  private bool hasMJ;
  private global::MaJiang mJ_;
  public bool HasMJ {
    get { return hasMJ; }
  }
  public global::MaJiang MJ {
    get { return mJ_ ?? global::MaJiang.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasFWZ) return false;
      if (!hasType) return false;
      if (!hasMJ) return false;
      if (!MJ.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnHByTypeFieldNames;
    if (hasFWZ) {
      output.WriteInt32(1, field_names[1], FWZ);
    }
    if (hasType) {
      output.WriteInt32(2, field_names[3], Type);
    }
    if (hasFWB) {
      output.WriteInt32(3, field_names[0], FWB);
    }
    if (hasMJ) {
      output.WriteMessage(4, field_names[2], MJ);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasFWZ) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, FWZ);
    }
    if (hasType) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
    }
    if (hasFWB) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, FWB);
    }
    if (hasMJ) {
      size += pb::CodedOutputStream.ComputeMessageSize(4, MJ);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnHByType ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnHByType ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnHByType ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnHByType ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnHByType ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnHByType ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnHByType ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnHByType ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnHByType ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnHByType ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnHByType MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnHByType prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnHByType, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnHByType cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnHByType result;
    
    private ReturnHByType PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnHByType original = result;
        result = new ReturnHByType();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnHByType MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnHByType.Descriptor; }
    }
    
    public override ReturnHByType DefaultInstanceForType {
      get { return global::ReturnHByType.DefaultInstance; }
    }
    
    public override ReturnHByType BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnHByType) {
        return MergeFrom((ReturnHByType) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnHByType other) {
      if (other == global::ReturnHByType.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasFWZ) {
        FWZ = other.FWZ;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasFWB) {
        FWB = other.FWB;
      }
      if (other.HasMJ) {
        MergeMJ(other.MJ);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnHByTypeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnHByTypeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasFWZ = input.ReadInt32(ref result.fWZ_);
            break;
          }
          case 16: {
            result.hasType = input.ReadInt32(ref result.type_);
            break;
          }
          case 24: {
            result.hasFWB = input.ReadInt32(ref result.fWB_);
            break;
          }
          case 34: {
            global::MaJiang.Builder subBuilder = global::MaJiang.CreateBuilder();
            if (result.hasMJ) {
              subBuilder.MergeFrom(MJ);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            MJ = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasFWZ {
      get { return result.hasFWZ; }
    }
    public int FWZ {
      get { return result.FWZ; }
      set { SetFWZ(value); }
    }
    public Builder SetFWZ(int value) {
      PrepareBuilder();
      result.hasFWZ = true;
      result.fWZ_ = value;
      return this;
    }
    public Builder ClearFWZ() {
      PrepareBuilder();
      result.hasFWZ = false;
      result.fWZ_ = 0;
      return this;
    }
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
    
    public bool HasFWB {
      get { return result.hasFWB; }
    }
    public int FWB {
      get { return result.FWB; }
      set { SetFWB(value); }
    }
    public Builder SetFWB(int value) {
      PrepareBuilder();
      result.hasFWB = true;
      result.fWB_ = value;
      return this;
    }
    public Builder ClearFWB() {
      PrepareBuilder();
      result.hasFWB = false;
      result.fWB_ = 0;
      return this;
    }
    
    public bool HasMJ {
     get { return result.hasMJ; }
    }
    public global::MaJiang MJ {
      get { return result.MJ; }
      set { SetMJ(value); }
    }
    public Builder SetMJ(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMJ = true;
      result.mJ_ = value;
      return this;
    }
    public Builder SetMJ(global::MaJiang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasMJ = true;
      result.mJ_ = builderForValue.Build();
      return this;
    }
    public Builder MergeMJ(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasMJ &&
          result.mJ_ != global::MaJiang.DefaultInstance) {
          result.mJ_ = global::MaJiang.CreateBuilder(result.mJ_).MergeFrom(value).BuildPartial();
      } else {
        result.mJ_ = value;
      }
      result.hasMJ = true;
      return this;
    }
    public Builder ClearMJ() {
      PrepareBuilder();
      result.hasMJ = false;
      result.mJ_ = null;
      return this;
    }
  }
  static ReturnHByType() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SendHu : pb::GeneratedMessage<SendHu, SendHu.Builder> {
  private SendHu() { }
  private static readonly SendHu defaultInstance = new SendHu().MakeReadOnly();
  private static readonly string[] _sendHuFieldNames = new string[] { "DXInfo", "FWB", "FWZ", "MJ", "openid", "roomid", "type" };
  private static readonly uint[] _sendHuFieldTags = new uint[] { 58, 24, 8, 34, 42, 48, 16 };
  public static SendHu DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SendHu DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SendHu ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_SendHu__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SendHu, SendHu.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_SendHu__FieldAccessorTable; }
  }
  
  public const int FWZFieldNumber = 1;
  private bool hasFWZ;
  private int fWZ_;
  public bool HasFWZ {
    get { return hasFWZ; }
  }
  public int FWZ {
    get { return fWZ_; }
  }
  
  public const int TypeFieldNumber = 2;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public const int FWBFieldNumber = 3;
  private bool hasFWB;
  private int fWB_;
  public bool HasFWB {
    get { return hasFWB; }
  }
  public int FWB {
    get { return fWB_; }
  }
  
  public const int MJFieldNumber = 4;
  private bool hasMJ;
  private global::MaJiang mJ_;
  public bool HasMJ {
    get { return hasMJ; }
  }
  public global::MaJiang MJ {
    get { return mJ_ ?? global::MaJiang.DefaultInstance; }
  }
  
  public const int OpenidFieldNumber = 5;
  private bool hasOpenid;
  private string openid_ = "";
  public bool HasOpenid {
    get { return hasOpenid; }
  }
  public string Openid {
    get { return openid_; }
  }
  
  public const int RoomidFieldNumber = 6;
  private bool hasRoomid;
  private int roomid_;
  public bool HasRoomid {
    get { return hasRoomid; }
  }
  public int Roomid {
    get { return roomid_; }
  }
  
  public const int DXInfoFieldNumber = 7;
  private pbc::PopsicleList<global::DuoXiangHu> dXInfo_ = new pbc::PopsicleList<global::DuoXiangHu>();
  public scg::IList<global::DuoXiangHu> DXInfoList {
    get { return dXInfo_; }
  }
  public int DXInfoCount {
    get { return dXInfo_.Count; }
  }
  public global::DuoXiangHu GetDXInfo(int index) {
    return dXInfo_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasFWZ) return false;
      if (!hasType) return false;
      if (!hasMJ) return false;
      if (!hasOpenid) return false;
      if (!hasRoomid) return false;
      if (!MJ.IsInitialized) return false;
      foreach (global::DuoXiangHu element in DXInfoList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sendHuFieldNames;
    if (hasFWZ) {
      output.WriteInt32(1, field_names[2], FWZ);
    }
    if (hasType) {
      output.WriteInt32(2, field_names[6], Type);
    }
    if (hasFWB) {
      output.WriteInt32(3, field_names[1], FWB);
    }
    if (hasMJ) {
      output.WriteMessage(4, field_names[3], MJ);
    }
    if (hasOpenid) {
      output.WriteString(5, field_names[4], Openid);
    }
    if (hasRoomid) {
      output.WriteInt32(6, field_names[5], Roomid);
    }
    if (dXInfo_.Count > 0) {
      output.WriteMessageArray(7, field_names[0], dXInfo_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasFWZ) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, FWZ);
    }
    if (hasType) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
    }
    if (hasFWB) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, FWB);
    }
    if (hasMJ) {
      size += pb::CodedOutputStream.ComputeMessageSize(4, MJ);
    }
    if (hasOpenid) {
      size += pb::CodedOutputStream.ComputeStringSize(5, Openid);
    }
    if (hasRoomid) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Roomid);
    }
    foreach (global::DuoXiangHu element in DXInfoList) {
      size += pb::CodedOutputStream.ComputeMessageSize(7, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SendHu ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendHu ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendHu ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendHu ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendHu ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendHu ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SendHu ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SendHu ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SendHu ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendHu ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SendHu MakeReadOnly() {
    dXInfo_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SendHu prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SendHu, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SendHu cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SendHu result;
    
    private SendHu PrepareBuilder() {
      if (resultIsReadOnly) {
        SendHu original = result;
        result = new SendHu();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SendHu MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SendHu.Descriptor; }
    }
    
    public override SendHu DefaultInstanceForType {
      get { return global::SendHu.DefaultInstance; }
    }
    
    public override SendHu BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SendHu) {
        return MergeFrom((SendHu) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SendHu other) {
      if (other == global::SendHu.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasFWZ) {
        FWZ = other.FWZ;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasFWB) {
        FWB = other.FWB;
      }
      if (other.HasMJ) {
        MergeMJ(other.MJ);
      }
      if (other.HasOpenid) {
        Openid = other.Openid;
      }
      if (other.HasRoomid) {
        Roomid = other.Roomid;
      }
      if (other.dXInfo_.Count != 0) {
        result.dXInfo_.Add(other.dXInfo_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sendHuFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sendHuFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasFWZ = input.ReadInt32(ref result.fWZ_);
            break;
          }
          case 16: {
            result.hasType = input.ReadInt32(ref result.type_);
            break;
          }
          case 24: {
            result.hasFWB = input.ReadInt32(ref result.fWB_);
            break;
          }
          case 34: {
            global::MaJiang.Builder subBuilder = global::MaJiang.CreateBuilder();
            if (result.hasMJ) {
              subBuilder.MergeFrom(MJ);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            MJ = subBuilder.BuildPartial();
            break;
          }
          case 42: {
            result.hasOpenid = input.ReadString(ref result.openid_);
            break;
          }
          case 48: {
            result.hasRoomid = input.ReadInt32(ref result.roomid_);
            break;
          }
          case 58: {
            input.ReadMessageArray(tag, field_name, result.dXInfo_, global::DuoXiangHu.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasFWZ {
      get { return result.hasFWZ; }
    }
    public int FWZ {
      get { return result.FWZ; }
      set { SetFWZ(value); }
    }
    public Builder SetFWZ(int value) {
      PrepareBuilder();
      result.hasFWZ = true;
      result.fWZ_ = value;
      return this;
    }
    public Builder ClearFWZ() {
      PrepareBuilder();
      result.hasFWZ = false;
      result.fWZ_ = 0;
      return this;
    }
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
    
    public bool HasFWB {
      get { return result.hasFWB; }
    }
    public int FWB {
      get { return result.FWB; }
      set { SetFWB(value); }
    }
    public Builder SetFWB(int value) {
      PrepareBuilder();
      result.hasFWB = true;
      result.fWB_ = value;
      return this;
    }
    public Builder ClearFWB() {
      PrepareBuilder();
      result.hasFWB = false;
      result.fWB_ = 0;
      return this;
    }
    
    public bool HasMJ {
     get { return result.hasMJ; }
    }
    public global::MaJiang MJ {
      get { return result.MJ; }
      set { SetMJ(value); }
    }
    public Builder SetMJ(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMJ = true;
      result.mJ_ = value;
      return this;
    }
    public Builder SetMJ(global::MaJiang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasMJ = true;
      result.mJ_ = builderForValue.Build();
      return this;
    }
    public Builder MergeMJ(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasMJ &&
          result.mJ_ != global::MaJiang.DefaultInstance) {
          result.mJ_ = global::MaJiang.CreateBuilder(result.mJ_).MergeFrom(value).BuildPartial();
      } else {
        result.mJ_ = value;
      }
      result.hasMJ = true;
      return this;
    }
    public Builder ClearMJ() {
      PrepareBuilder();
      result.hasMJ = false;
      result.mJ_ = null;
      return this;
    }
    
    public bool HasOpenid {
      get { return result.hasOpenid; }
    }
    public string Openid {
      get { return result.Openid; }
      set { SetOpenid(value); }
    }
    public Builder SetOpenid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOpenid = true;
      result.openid_ = value;
      return this;
    }
    public Builder ClearOpenid() {
      PrepareBuilder();
      result.hasOpenid = false;
      result.openid_ = "";
      return this;
    }
    
    public bool HasRoomid {
      get { return result.hasRoomid; }
    }
    public int Roomid {
      get { return result.Roomid; }
      set { SetRoomid(value); }
    }
    public Builder SetRoomid(int value) {
      PrepareBuilder();
      result.hasRoomid = true;
      result.roomid_ = value;
      return this;
    }
    public Builder ClearRoomid() {
      PrepareBuilder();
      result.hasRoomid = false;
      result.roomid_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::DuoXiangHu> DXInfoList {
      get { return PrepareBuilder().dXInfo_; }
    }
    public int DXInfoCount {
      get { return result.DXInfoCount; }
    }
    public global::DuoXiangHu GetDXInfo(int index) {
      return result.GetDXInfo(index);
    }
    public Builder SetDXInfo(int index, global::DuoXiangHu value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.dXInfo_[index] = value;
      return this;
    }
    public Builder SetDXInfo(int index, global::DuoXiangHu.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.dXInfo_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddDXInfo(global::DuoXiangHu value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.dXInfo_.Add(value);
      return this;
    }
    public Builder AddDXInfo(global::DuoXiangHu.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.dXInfo_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeDXInfo(scg::IEnumerable<global::DuoXiangHu> values) {
      PrepareBuilder();
      result.dXInfo_.Add(values);
      return this;
    }
    public Builder ClearDXInfo() {
      PrepareBuilder();
      result.dXInfo_.Clear();
      return this;
    }
  }
  static SendHu() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DuoXiangHu : pb::GeneratedMessage<DuoXiangHu, DuoXiangHu.Builder> {
  private DuoXiangHu() { }
  private static readonly DuoXiangHu defaultInstance = new DuoXiangHu().MakeReadOnly();
  private static readonly string[] _duoXiangHuFieldNames = new string[] { "DXFW", "DXType" };
  private static readonly uint[] _duoXiangHuFieldTags = new uint[] { 8, 16 };
  public static DuoXiangHu DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override DuoXiangHu DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override DuoXiangHu ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_DuoXiangHu__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<DuoXiangHu, DuoXiangHu.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_DuoXiangHu__FieldAccessorTable; }
  }
  
  public const int DXFWFieldNumber = 1;
  private bool hasDXFW;
  private int dXFW_;
  public bool HasDXFW {
    get { return hasDXFW; }
  }
  public int DXFW {
    get { return dXFW_; }
  }
  
  public const int DXTypeFieldNumber = 2;
  private bool hasDXType;
  private int dXType_;
  public bool HasDXType {
    get { return hasDXType; }
  }
  public int DXType {
    get { return dXType_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasDXFW) return false;
      if (!hasDXType) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _duoXiangHuFieldNames;
    if (hasDXFW) {
      output.WriteInt32(1, field_names[0], DXFW);
    }
    if (hasDXType) {
      output.WriteInt32(2, field_names[1], DXType);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasDXFW) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, DXFW);
    }
    if (hasDXType) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, DXType);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static DuoXiangHu ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static DuoXiangHu ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static DuoXiangHu ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static DuoXiangHu ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static DuoXiangHu ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static DuoXiangHu ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static DuoXiangHu ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static DuoXiangHu ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static DuoXiangHu ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static DuoXiangHu ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private DuoXiangHu MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(DuoXiangHu prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<DuoXiangHu, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(DuoXiangHu cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private DuoXiangHu result;
    
    private DuoXiangHu PrepareBuilder() {
      if (resultIsReadOnly) {
        DuoXiangHu original = result;
        result = new DuoXiangHu();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override DuoXiangHu MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::DuoXiangHu.Descriptor; }
    }
    
    public override DuoXiangHu DefaultInstanceForType {
      get { return global::DuoXiangHu.DefaultInstance; }
    }
    
    public override DuoXiangHu BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is DuoXiangHu) {
        return MergeFrom((DuoXiangHu) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(DuoXiangHu other) {
      if (other == global::DuoXiangHu.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasDXFW) {
        DXFW = other.DXFW;
      }
      if (other.HasDXType) {
        DXType = other.DXType;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_duoXiangHuFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _duoXiangHuFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasDXFW = input.ReadInt32(ref result.dXFW_);
            break;
          }
          case 16: {
            result.hasDXType = input.ReadInt32(ref result.dXType_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasDXFW {
      get { return result.hasDXFW; }
    }
    public int DXFW {
      get { return result.DXFW; }
      set { SetDXFW(value); }
    }
    public Builder SetDXFW(int value) {
      PrepareBuilder();
      result.hasDXFW = true;
      result.dXFW_ = value;
      return this;
    }
    public Builder ClearDXFW() {
      PrepareBuilder();
      result.hasDXFW = false;
      result.dXFW_ = 0;
      return this;
    }
    
    public bool HasDXType {
      get { return result.hasDXType; }
    }
    public int DXType {
      get { return result.DXType; }
      set { SetDXType(value); }
    }
    public Builder SetDXType(int value) {
      PrepareBuilder();
      result.hasDXType = true;
      result.dXType_ = value;
      return this;
    }
    public Builder ClearDXType() {
      PrepareBuilder();
      result.hasDXType = false;
      result.dXType_ = 0;
      return this;
    }
  }
  static DuoXiangHu() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SendGetGame : pb::GeneratedMessage<SendGetGame, SendGetGame.Builder> {
  private SendGetGame() { }
  private static readonly SendGetGame defaultInstance = new SendGetGame().MakeReadOnly();
  private static readonly string[] _sendGetGameFieldNames = new string[] { "fw", "room_ID" };
  private static readonly uint[] _sendGetGameFieldTags = new uint[] { 16, 8 };
  public static SendGetGame DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SendGetGame DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SendGetGame ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_SendGetGame__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SendGetGame, SendGetGame.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_SendGetGame__FieldAccessorTable; }
  }
  
  public const int RoomIDFieldNumber = 1;
  private bool hasRoomID;
  private int roomID_;
  public bool HasRoomID {
    get { return hasRoomID; }
  }
  public int RoomID {
    get { return roomID_; }
  }
  
  public const int FwFieldNumber = 2;
  private bool hasFw;
  private int fw_;
  public bool HasFw {
    get { return hasFw; }
  }
  public int Fw {
    get { return fw_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasRoomID) return false;
      if (!hasFw) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sendGetGameFieldNames;
    if (hasRoomID) {
      output.WriteInt32(1, field_names[1], RoomID);
    }
    if (hasFw) {
      output.WriteInt32(2, field_names[0], Fw);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasRoomID) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, RoomID);
    }
    if (hasFw) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Fw);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SendGetGame ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendGetGame ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendGetGame ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendGetGame ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendGetGame ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendGetGame ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SendGetGame ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SendGetGame ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SendGetGame ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendGetGame ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SendGetGame MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SendGetGame prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SendGetGame, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SendGetGame cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SendGetGame result;
    
    private SendGetGame PrepareBuilder() {
      if (resultIsReadOnly) {
        SendGetGame original = result;
        result = new SendGetGame();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SendGetGame MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SendGetGame.Descriptor; }
    }
    
    public override SendGetGame DefaultInstanceForType {
      get { return global::SendGetGame.DefaultInstance; }
    }
    
    public override SendGetGame BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SendGetGame) {
        return MergeFrom((SendGetGame) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SendGetGame other) {
      if (other == global::SendGetGame.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasRoomID) {
        RoomID = other.RoomID;
      }
      if (other.HasFw) {
        Fw = other.Fw;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sendGetGameFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sendGetGameFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasRoomID = input.ReadInt32(ref result.roomID_);
            break;
          }
          case 16: {
            result.hasFw = input.ReadInt32(ref result.fw_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasRoomID {
      get { return result.hasRoomID; }
    }
    public int RoomID {
      get { return result.RoomID; }
      set { SetRoomID(value); }
    }
    public Builder SetRoomID(int value) {
      PrepareBuilder();
      result.hasRoomID = true;
      result.roomID_ = value;
      return this;
    }
    public Builder ClearRoomID() {
      PrepareBuilder();
      result.hasRoomID = false;
      result.roomID_ = 0;
      return this;
    }
    
    public bool HasFw {
      get { return result.hasFw; }
    }
    public int Fw {
      get { return result.Fw; }
      set { SetFw(value); }
    }
    public Builder SetFw(int value) {
      PrepareBuilder();
      result.hasFw = true;
      result.fw_ = value;
      return this;
    }
    public Builder ClearFw() {
      PrepareBuilder();
      result.hasFw = false;
      result.fw_ = 0;
      return this;
    }
  }
  static SendGetGame() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnZR : pb::GeneratedMessage<ReturnZR, ReturnZR.Builder> {
  private ReturnZR() { }
  private static readonly ReturnZR defaultInstance = new ReturnZR().MakeReadOnly();
  private static readonly string[] _returnZRFieldNames = new string[] { "dzrfw", "gtype", "zrfw" };
  private static readonly uint[] _returnZRFieldTags = new uint[] { 24, 8, 16 };
  public static ReturnZR DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnZR DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnZR ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnZR__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnZR, ReturnZR.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnZR__FieldAccessorTable; }
  }
  
  public const int GtypeFieldNumber = 1;
  private bool hasGtype;
  private int gtype_;
  public bool HasGtype {
    get { return hasGtype; }
  }
  public int Gtype {
    get { return gtype_; }
  }
  
  public const int ZrfwFieldNumber = 2;
  private bool hasZrfw;
  private int zrfw_;
  public bool HasZrfw {
    get { return hasZrfw; }
  }
  public int Zrfw {
    get { return zrfw_; }
  }
  
  public const int DzrfwFieldNumber = 3;
  private bool hasDzrfw;
  private int dzrfw_;
  public bool HasDzrfw {
    get { return hasDzrfw; }
  }
  public int Dzrfw {
    get { return dzrfw_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasGtype) return false;
      if (!hasZrfw) return false;
      if (!hasDzrfw) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnZRFieldNames;
    if (hasGtype) {
      output.WriteInt32(1, field_names[1], Gtype);
    }
    if (hasZrfw) {
      output.WriteInt32(2, field_names[2], Zrfw);
    }
    if (hasDzrfw) {
      output.WriteInt32(3, field_names[0], Dzrfw);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasGtype) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Gtype);
    }
    if (hasZrfw) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Zrfw);
    }
    if (hasDzrfw) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Dzrfw);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnZR ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnZR ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnZR ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnZR ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnZR ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnZR ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnZR ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnZR ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnZR ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnZR ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnZR MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnZR prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnZR, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnZR cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnZR result;
    
    private ReturnZR PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnZR original = result;
        result = new ReturnZR();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnZR MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnZR.Descriptor; }
    }
    
    public override ReturnZR DefaultInstanceForType {
      get { return global::ReturnZR.DefaultInstance; }
    }
    
    public override ReturnZR BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnZR) {
        return MergeFrom((ReturnZR) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnZR other) {
      if (other == global::ReturnZR.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasGtype) {
        Gtype = other.Gtype;
      }
      if (other.HasZrfw) {
        Zrfw = other.Zrfw;
      }
      if (other.HasDzrfw) {
        Dzrfw = other.Dzrfw;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnZRFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnZRFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasGtype = input.ReadInt32(ref result.gtype_);
            break;
          }
          case 16: {
            result.hasZrfw = input.ReadInt32(ref result.zrfw_);
            break;
          }
          case 24: {
            result.hasDzrfw = input.ReadInt32(ref result.dzrfw_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasGtype {
      get { return result.hasGtype; }
    }
    public int Gtype {
      get { return result.Gtype; }
      set { SetGtype(value); }
    }
    public Builder SetGtype(int value) {
      PrepareBuilder();
      result.hasGtype = true;
      result.gtype_ = value;
      return this;
    }
    public Builder ClearGtype() {
      PrepareBuilder();
      result.hasGtype = false;
      result.gtype_ = 0;
      return this;
    }
    
    public bool HasZrfw {
      get { return result.hasZrfw; }
    }
    public int Zrfw {
      get { return result.Zrfw; }
      set { SetZrfw(value); }
    }
    public Builder SetZrfw(int value) {
      PrepareBuilder();
      result.hasZrfw = true;
      result.zrfw_ = value;
      return this;
    }
    public Builder ClearZrfw() {
      PrepareBuilder();
      result.hasZrfw = false;
      result.zrfw_ = 0;
      return this;
    }
    
    public bool HasDzrfw {
      get { return result.hasDzrfw; }
    }
    public int Dzrfw {
      get { return result.Dzrfw; }
      set { SetDzrfw(value); }
    }
    public Builder SetDzrfw(int value) {
      PrepareBuilder();
      result.hasDzrfw = true;
      result.dzrfw_ = value;
      return this;
    }
    public Builder ClearDzrfw() {
      PrepareBuilder();
      result.hasDzrfw = false;
      result.dzrfw_ = 0;
      return this;
    }
  }
  static ReturnZR() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SendConnData : pb::GeneratedMessage<SendConnData, SendConnData.Builder> {
  private SendConnData() { }
  private static readonly SendConnData defaultInstance = new SendConnData().MakeReadOnly();
  private static readonly string[] _sendConnDataFieldNames = new string[] { "RoomID", "openid" };
  private static readonly uint[] _sendConnDataFieldTags = new uint[] { 16, 10 };
  public static SendConnData DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SendConnData DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SendConnData ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_SendConnData__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SendConnData, SendConnData.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_SendConnData__FieldAccessorTable; }
  }
  
  public const int OpenidFieldNumber = 1;
  private bool hasOpenid;
  private string openid_ = "";
  public bool HasOpenid {
    get { return hasOpenid; }
  }
  public string Openid {
    get { return openid_; }
  }
  
  public const int RoomIDFieldNumber = 2;
  private bool hasRoomID;
  private int roomID_;
  public bool HasRoomID {
    get { return hasRoomID; }
  }
  public int RoomID {
    get { return roomID_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasOpenid) return false;
      if (!hasRoomID) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sendConnDataFieldNames;
    if (hasOpenid) {
      output.WriteString(1, field_names[1], Openid);
    }
    if (hasRoomID) {
      output.WriteInt32(2, field_names[0], RoomID);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasOpenid) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Openid);
    }
    if (hasRoomID) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, RoomID);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SendConnData ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendConnData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendConnData ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendConnData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendConnData ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendConnData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SendConnData ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SendConnData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SendConnData ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendConnData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SendConnData MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SendConnData prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SendConnData, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SendConnData cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SendConnData result;
    
    private SendConnData PrepareBuilder() {
      if (resultIsReadOnly) {
        SendConnData original = result;
        result = new SendConnData();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SendConnData MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SendConnData.Descriptor; }
    }
    
    public override SendConnData DefaultInstanceForType {
      get { return global::SendConnData.DefaultInstance; }
    }
    
    public override SendConnData BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SendConnData) {
        return MergeFrom((SendConnData) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SendConnData other) {
      if (other == global::SendConnData.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasOpenid) {
        Openid = other.Openid;
      }
      if (other.HasRoomID) {
        RoomID = other.RoomID;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sendConnDataFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sendConnDataFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasOpenid = input.ReadString(ref result.openid_);
            break;
          }
          case 16: {
            result.hasRoomID = input.ReadInt32(ref result.roomID_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasOpenid {
      get { return result.hasOpenid; }
    }
    public string Openid {
      get { return result.Openid; }
      set { SetOpenid(value); }
    }
    public Builder SetOpenid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOpenid = true;
      result.openid_ = value;
      return this;
    }
    public Builder ClearOpenid() {
      PrepareBuilder();
      result.hasOpenid = false;
      result.openid_ = "";
      return this;
    }
    
    public bool HasRoomID {
      get { return result.hasRoomID; }
    }
    public int RoomID {
      get { return result.RoomID; }
      set { SetRoomID(value); }
    }
    public Builder SetRoomID(int value) {
      PrepareBuilder();
      result.hasRoomID = true;
      result.roomID_ = value;
      return this;
    }
    public Builder ClearRoomID() {
      PrepareBuilder();
      result.hasRoomID = false;
      result.roomID_ = 0;
      return this;
    }
  }
  static SendConnData() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnZhuang : pb::GeneratedMessage<ReturnZhuang, ReturnZhuang.Builder> {
  private ReturnZhuang() { }
  private static readonly ReturnZhuang defaultInstance = new ReturnZhuang().MakeReadOnly();
  private static readonly string[] _returnZhuangFieldNames = new string[] { "seizi", "zhuang" };
  private static readonly uint[] _returnZhuangFieldTags = new uint[] { 18, 8 };
  public static ReturnZhuang DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnZhuang DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnZhuang ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnZhuang__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnZhuang, ReturnZhuang.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnZhuang__FieldAccessorTable; }
  }
  
  public const int ZhuangFieldNumber = 1;
  private bool hasZhuang;
  private int zhuang_;
  public bool HasZhuang {
    get { return hasZhuang; }
  }
  public int Zhuang {
    get { return zhuang_; }
  }
  
  public const int SeiziFieldNumber = 2;
  private bool hasSeizi;
  private string seizi_ = "";
  public bool HasSeizi {
    get { return hasSeizi; }
  }
  public string Seizi {
    get { return seizi_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasZhuang) return false;
      if (!hasSeizi) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnZhuangFieldNames;
    if (hasZhuang) {
      output.WriteInt32(1, field_names[1], Zhuang);
    }
    if (hasSeizi) {
      output.WriteString(2, field_names[0], Seizi);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasZhuang) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Zhuang);
    }
    if (hasSeizi) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Seizi);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnZhuang ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnZhuang ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnZhuang ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnZhuang ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnZhuang ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnZhuang ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnZhuang ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnZhuang ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnZhuang ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnZhuang ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnZhuang MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnZhuang prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnZhuang, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnZhuang cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnZhuang result;
    
    private ReturnZhuang PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnZhuang original = result;
        result = new ReturnZhuang();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnZhuang MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnZhuang.Descriptor; }
    }
    
    public override ReturnZhuang DefaultInstanceForType {
      get { return global::ReturnZhuang.DefaultInstance; }
    }
    
    public override ReturnZhuang BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnZhuang) {
        return MergeFrom((ReturnZhuang) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnZhuang other) {
      if (other == global::ReturnZhuang.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasZhuang) {
        Zhuang = other.Zhuang;
      }
      if (other.HasSeizi) {
        Seizi = other.Seizi;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnZhuangFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnZhuangFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasZhuang = input.ReadInt32(ref result.zhuang_);
            break;
          }
          case 18: {
            result.hasSeizi = input.ReadString(ref result.seizi_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasZhuang {
      get { return result.hasZhuang; }
    }
    public int Zhuang {
      get { return result.Zhuang; }
      set { SetZhuang(value); }
    }
    public Builder SetZhuang(int value) {
      PrepareBuilder();
      result.hasZhuang = true;
      result.zhuang_ = value;
      return this;
    }
    public Builder ClearZhuang() {
      PrepareBuilder();
      result.hasZhuang = false;
      result.zhuang_ = 0;
      return this;
    }
    
    public bool HasSeizi {
      get { return result.hasSeizi; }
    }
    public string Seizi {
      get { return result.Seizi; }
      set { SetSeizi(value); }
    }
    public Builder SetSeizi(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasSeizi = true;
      result.seizi_ = value;
      return this;
    }
    public Builder ClearSeizi() {
      PrepareBuilder();
      result.hasSeizi = false;
      result.seizi_ = "";
      return this;
    }
  }
  static ReturnZhuang() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnHType : pb::GeneratedMessage<ReturnHType, ReturnHType.Builder> {
  private ReturnHType() { }
  private static readonly ReturnHType defaultInstance = new ReturnHType().MakeReadOnly();
  private static readonly string[] _returnHTypeFieldNames = new string[] { "FWB", "FWZ", "MJ", "type" };
  private static readonly uint[] _returnHTypeFieldTags = new uint[] { 24, 8, 34, 16 };
  public static ReturnHType DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnHType DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnHType ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnHType__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnHType, ReturnHType.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnHType__FieldAccessorTable; }
  }
  
  public const int FWZFieldNumber = 1;
  private bool hasFWZ;
  private int fWZ_;
  public bool HasFWZ {
    get { return hasFWZ; }
  }
  public int FWZ {
    get { return fWZ_; }
  }
  
  public const int TypeFieldNumber = 2;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public const int FWBFieldNumber = 3;
  private bool hasFWB;
  private int fWB_;
  public bool HasFWB {
    get { return hasFWB; }
  }
  public int FWB {
    get { return fWB_; }
  }
  
  public const int MJFieldNumber = 4;
  private bool hasMJ;
  private global::MaJiang mJ_;
  public bool HasMJ {
    get { return hasMJ; }
  }
  public global::MaJiang MJ {
    get { return mJ_ ?? global::MaJiang.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasFWZ) return false;
      if (!hasType) return false;
      if (!hasMJ) return false;
      if (!MJ.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnHTypeFieldNames;
    if (hasFWZ) {
      output.WriteInt32(1, field_names[1], FWZ);
    }
    if (hasType) {
      output.WriteInt32(2, field_names[3], Type);
    }
    if (hasFWB) {
      output.WriteInt32(3, field_names[0], FWB);
    }
    if (hasMJ) {
      output.WriteMessage(4, field_names[2], MJ);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasFWZ) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, FWZ);
    }
    if (hasType) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
    }
    if (hasFWB) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, FWB);
    }
    if (hasMJ) {
      size += pb::CodedOutputStream.ComputeMessageSize(4, MJ);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnHType ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnHType ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnHType ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnHType ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnHType ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnHType ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnHType ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnHType ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnHType ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnHType ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnHType MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnHType prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnHType, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnHType cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnHType result;
    
    private ReturnHType PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnHType original = result;
        result = new ReturnHType();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnHType MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnHType.Descriptor; }
    }
    
    public override ReturnHType DefaultInstanceForType {
      get { return global::ReturnHType.DefaultInstance; }
    }
    
    public override ReturnHType BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnHType) {
        return MergeFrom((ReturnHType) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnHType other) {
      if (other == global::ReturnHType.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasFWZ) {
        FWZ = other.FWZ;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasFWB) {
        FWB = other.FWB;
      }
      if (other.HasMJ) {
        MergeMJ(other.MJ);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnHTypeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnHTypeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasFWZ = input.ReadInt32(ref result.fWZ_);
            break;
          }
          case 16: {
            result.hasType = input.ReadInt32(ref result.type_);
            break;
          }
          case 24: {
            result.hasFWB = input.ReadInt32(ref result.fWB_);
            break;
          }
          case 34: {
            global::MaJiang.Builder subBuilder = global::MaJiang.CreateBuilder();
            if (result.hasMJ) {
              subBuilder.MergeFrom(MJ);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            MJ = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasFWZ {
      get { return result.hasFWZ; }
    }
    public int FWZ {
      get { return result.FWZ; }
      set { SetFWZ(value); }
    }
    public Builder SetFWZ(int value) {
      PrepareBuilder();
      result.hasFWZ = true;
      result.fWZ_ = value;
      return this;
    }
    public Builder ClearFWZ() {
      PrepareBuilder();
      result.hasFWZ = false;
      result.fWZ_ = 0;
      return this;
    }
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
    
    public bool HasFWB {
      get { return result.hasFWB; }
    }
    public int FWB {
      get { return result.FWB; }
      set { SetFWB(value); }
    }
    public Builder SetFWB(int value) {
      PrepareBuilder();
      result.hasFWB = true;
      result.fWB_ = value;
      return this;
    }
    public Builder ClearFWB() {
      PrepareBuilder();
      result.hasFWB = false;
      result.fWB_ = 0;
      return this;
    }
    
    public bool HasMJ {
     get { return result.hasMJ; }
    }
    public global::MaJiang MJ {
      get { return result.MJ; }
      set { SetMJ(value); }
    }
    public Builder SetMJ(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMJ = true;
      result.mJ_ = value;
      return this;
    }
    public Builder SetMJ(global::MaJiang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasMJ = true;
      result.mJ_ = builderForValue.Build();
      return this;
    }
    public Builder MergeMJ(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasMJ &&
          result.mJ_ != global::MaJiang.DefaultInstance) {
          result.mJ_ = global::MaJiang.CreateBuilder(result.mJ_).MergeFrom(value).BuildPartial();
      } else {
        result.mJ_ = value;
      }
      result.hasMJ = true;
      return this;
    }
    public Builder ClearMJ() {
      PrepareBuilder();
      result.hasMJ = false;
      result.mJ_ = null;
      return this;
    }
  }
  static ReturnHType() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class GangMSG : pb::GeneratedMessage<GangMSG, GangMSG.Builder> {
  private GangMSG() { }
  private static readonly GangMSG defaultInstance = new GangMSG().MakeReadOnly();
  private static readonly string[] _gangMSGFieldNames = new string[] { "Type", "fw", "mj" };
  private static readonly uint[] _gangMSGFieldTags = new uint[] { 16, 8, 26 };
  public static GangMSG DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override GangMSG DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override GangMSG ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_GangMSG__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<GangMSG, GangMSG.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_GangMSG__FieldAccessorTable; }
  }
  
  public const int FwFieldNumber = 1;
  private bool hasFw;
  private int fw_;
  public bool HasFw {
    get { return hasFw; }
  }
  public int Fw {
    get { return fw_; }
  }
  
  public const int TypeFieldNumber = 2;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public const int MjFieldNumber = 3;
  private bool hasMj;
  private global::MaJiang mj_;
  public bool HasMj {
    get { return hasMj; }
  }
  public global::MaJiang Mj {
    get { return mj_ ?? global::MaJiang.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasFw) return false;
      if (!hasType) return false;
      if (!hasMj) return false;
      if (!Mj.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _gangMSGFieldNames;
    if (hasFw) {
      output.WriteInt32(1, field_names[1], Fw);
    }
    if (hasType) {
      output.WriteInt32(2, field_names[0], Type);
    }
    if (hasMj) {
      output.WriteMessage(3, field_names[2], Mj);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasFw) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Fw);
    }
    if (hasType) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
    }
    if (hasMj) {
      size += pb::CodedOutputStream.ComputeMessageSize(3, Mj);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static GangMSG ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GangMSG ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GangMSG ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GangMSG ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GangMSG ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GangMSG ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static GangMSG ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static GangMSG ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static GangMSG ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GangMSG ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private GangMSG MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(GangMSG prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<GangMSG, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(GangMSG cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private GangMSG result;
    
    private GangMSG PrepareBuilder() {
      if (resultIsReadOnly) {
        GangMSG original = result;
        result = new GangMSG();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override GangMSG MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::GangMSG.Descriptor; }
    }
    
    public override GangMSG DefaultInstanceForType {
      get { return global::GangMSG.DefaultInstance; }
    }
    
    public override GangMSG BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is GangMSG) {
        return MergeFrom((GangMSG) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(GangMSG other) {
      if (other == global::GangMSG.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasFw) {
        Fw = other.Fw;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasMj) {
        MergeMj(other.Mj);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_gangMSGFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _gangMSGFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasFw = input.ReadInt32(ref result.fw_);
            break;
          }
          case 16: {
            result.hasType = input.ReadInt32(ref result.type_);
            break;
          }
          case 26: {
            global::MaJiang.Builder subBuilder = global::MaJiang.CreateBuilder();
            if (result.hasMj) {
              subBuilder.MergeFrom(Mj);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Mj = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasFw {
      get { return result.hasFw; }
    }
    public int Fw {
      get { return result.Fw; }
      set { SetFw(value); }
    }
    public Builder SetFw(int value) {
      PrepareBuilder();
      result.hasFw = true;
      result.fw_ = value;
      return this;
    }
    public Builder ClearFw() {
      PrepareBuilder();
      result.hasFw = false;
      result.fw_ = 0;
      return this;
    }
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
    
    public bool HasMj {
     get { return result.hasMj; }
    }
    public global::MaJiang Mj {
      get { return result.Mj; }
      set { SetMj(value); }
    }
    public Builder SetMj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMj = true;
      result.mj_ = value;
      return this;
    }
    public Builder SetMj(global::MaJiang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasMj = true;
      result.mj_ = builderForValue.Build();
      return this;
    }
    public Builder MergeMj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasMj &&
          result.mj_ != global::MaJiang.DefaultInstance) {
          result.mj_ = global::MaJiang.CreateBuilder(result.mj_).MergeFrom(value).BuildPartial();
      } else {
        result.mj_ = value;
      }
      result.hasMj = true;
      return this;
    }
    public Builder ClearMj() {
      PrepareBuilder();
      result.hasMj = false;
      result.mj_ = null;
      return this;
    }
  }
  static GangMSG() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnGang : pb::GeneratedMessage<ReturnGang, ReturnGang.Builder> {
  private ReturnGang() { }
  private static readonly ReturnGang defaultInstance = new ReturnGang().MakeReadOnly();
  private static readonly string[] _returnGangFieldNames = new string[] { "gang" };
  private static readonly uint[] _returnGangFieldTags = new uint[] { 10 };
  public static ReturnGang DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnGang DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnGang ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnGang__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnGang, ReturnGang.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnGang__FieldAccessorTable; }
  }
  
  public const int GangFieldNumber = 1;
  private pbc::PopsicleList<global::GangMSG> gang_ = new pbc::PopsicleList<global::GangMSG>();
  public scg::IList<global::GangMSG> GangList {
    get { return gang_; }
  }
  public int GangCount {
    get { return gang_.Count; }
  }
  public global::GangMSG GetGang(int index) {
    return gang_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::GangMSG element in GangList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnGangFieldNames;
    if (gang_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], gang_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::GangMSG element in GangList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnGang ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnGang ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnGang ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnGang ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnGang ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnGang ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnGang ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnGang ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnGang ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnGang ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnGang MakeReadOnly() {
    gang_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnGang prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnGang, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnGang cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnGang result;
    
    private ReturnGang PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnGang original = result;
        result = new ReturnGang();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnGang MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnGang.Descriptor; }
    }
    
    public override ReturnGang DefaultInstanceForType {
      get { return global::ReturnGang.DefaultInstance; }
    }
    
    public override ReturnGang BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnGang) {
        return MergeFrom((ReturnGang) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnGang other) {
      if (other == global::ReturnGang.DefaultInstance) return this;
      PrepareBuilder();
      if (other.gang_.Count != 0) {
        result.gang_.Add(other.gang_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnGangFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnGangFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.gang_, global::GangMSG.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::GangMSG> GangList {
      get { return PrepareBuilder().gang_; }
    }
    public int GangCount {
      get { return result.GangCount; }
    }
    public global::GangMSG GetGang(int index) {
      return result.GetGang(index);
    }
    public Builder SetGang(int index, global::GangMSG value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.gang_[index] = value;
      return this;
    }
    public Builder SetGang(int index, global::GangMSG.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.gang_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddGang(global::GangMSG value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.gang_.Add(value);
      return this;
    }
    public Builder AddGang(global::GangMSG.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.gang_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeGang(scg::IEnumerable<global::GangMSG> values) {
      PrepareBuilder();
      result.gang_.Add(values);
      return this;
    }
    public Builder ClearGang() {
      PrepareBuilder();
      result.gang_.Clear();
      return this;
    }
  }
  static ReturnGang() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnRecon : pb::GeneratedMessage<ReturnRecon, ReturnRecon.Builder> {
  private ReturnRecon() { }
  private static readonly ReturnRecon defaultInstance = new ReturnRecon().MakeReadOnly();
  private static readonly string[] _returnReconFieldNames = new string[] { "state" };
  private static readonly uint[] _returnReconFieldTags = new uint[] { 8 };
  public static ReturnRecon DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnRecon DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnRecon ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnRecon__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnRecon, ReturnRecon.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnRecon__FieldAccessorTable; }
  }
  
  public const int StateFieldNumber = 1;
  private bool hasState;
  private int state_;
  public bool HasState {
    get { return hasState; }
  }
  public int State {
    get { return state_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasState) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnReconFieldNames;
    if (hasState) {
      output.WriteInt32(1, field_names[0], State);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasState) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, State);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnRecon ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnRecon ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnRecon ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnRecon ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnRecon ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnRecon ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnRecon ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnRecon ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnRecon ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnRecon ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnRecon MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnRecon prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnRecon, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnRecon cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnRecon result;
    
    private ReturnRecon PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnRecon original = result;
        result = new ReturnRecon();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnRecon MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnRecon.Descriptor; }
    }
    
    public override ReturnRecon DefaultInstanceForType {
      get { return global::ReturnRecon.DefaultInstance; }
    }
    
    public override ReturnRecon BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnRecon) {
        return MergeFrom((ReturnRecon) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnRecon other) {
      if (other == global::ReturnRecon.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasState) {
        State = other.State;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnReconFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnReconFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasState = input.ReadInt32(ref result.state_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasState {
      get { return result.hasState; }
    }
    public int State {
      get { return result.State; }
      set { SetState(value); }
    }
    public Builder SetState(int value) {
      PrepareBuilder();
      result.hasState = true;
      result.state_ = value;
      return this;
    }
    public Builder ClearState() {
      PrepareBuilder();
      result.hasState = false;
      result.state_ = 0;
      return this;
    }
  }
  static ReturnRecon() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class UserShou : pb::GeneratedMessage<UserShou, UserShou.Builder> {
  private UserShou() { }
  private static readonly UserShou defaultInstance = new UserShou().MakeReadOnly();
  private static readonly string[] _userShouFieldNames = new string[] { "Baoting", "FW", "Pcount", "QYM", "Scare", "Tianting", "mj" };
  private static readonly uint[] _userShouFieldTags = new uint[] { 48, 8, 24, 32, 56, 40, 18 };
  public static UserShou DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override UserShou DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override UserShou ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_UserShou__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<UserShou, UserShou.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_UserShou__FieldAccessorTable; }
  }
  
  public const int FWFieldNumber = 1;
  private bool hasFW;
  private int fW_;
  public bool HasFW {
    get { return hasFW; }
  }
  public int FW {
    get { return fW_; }
  }
  
  public const int MjFieldNumber = 2;
  private pbc::PopsicleList<global::MaJiang> mj_ = new pbc::PopsicleList<global::MaJiang>();
  public scg::IList<global::MaJiang> MjList {
    get { return mj_; }
  }
  public int MjCount {
    get { return mj_.Count; }
  }
  public global::MaJiang GetMj(int index) {
    return mj_[index];
  }
  
  public const int PcountFieldNumber = 3;
  private bool hasPcount;
  private int pcount_;
  public bool HasPcount {
    get { return hasPcount; }
  }
  public int Pcount {
    get { return pcount_; }
  }
  
  public const int QYMFieldNumber = 4;
  private bool hasQYM;
  private int qYM_;
  public bool HasQYM {
    get { return hasQYM; }
  }
  public int QYM {
    get { return qYM_; }
  }
  
  public const int TiantingFieldNumber = 5;
  private bool hasTianting;
  private int tianting_;
  public bool HasTianting {
    get { return hasTianting; }
  }
  public int Tianting {
    get { return tianting_; }
  }
  
  public const int BaotingFieldNumber = 6;
  private bool hasBaoting;
  private int baoting_;
  public bool HasBaoting {
    get { return hasBaoting; }
  }
  public int Baoting {
    get { return baoting_; }
  }
  
  public const int ScareFieldNumber = 7;
  private bool hasScare;
  private int scare_;
  public bool HasScare {
    get { return hasScare; }
  }
  public int Scare {
    get { return scare_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasFW) return false;
      if (!hasPcount) return false;
      if (!hasQYM) return false;
      if (!hasTianting) return false;
      if (!hasBaoting) return false;
      if (!hasScare) return false;
      foreach (global::MaJiang element in MjList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _userShouFieldNames;
    if (hasFW) {
      output.WriteInt32(1, field_names[1], FW);
    }
    if (mj_.Count > 0) {
      output.WriteMessageArray(2, field_names[6], mj_);
    }
    if (hasPcount) {
      output.WriteInt32(3, field_names[2], Pcount);
    }
    if (hasQYM) {
      output.WriteInt32(4, field_names[3], QYM);
    }
    if (hasTianting) {
      output.WriteInt32(5, field_names[5], Tianting);
    }
    if (hasBaoting) {
      output.WriteInt32(6, field_names[0], Baoting);
    }
    if (hasScare) {
      output.WriteInt32(7, field_names[4], Scare);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasFW) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, FW);
    }
    foreach (global::MaJiang element in MjList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    if (hasPcount) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Pcount);
    }
    if (hasQYM) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, QYM);
    }
    if (hasTianting) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Tianting);
    }
    if (hasBaoting) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Baoting);
    }
    if (hasScare) {
      size += pb::CodedOutputStream.ComputeInt32Size(7, Scare);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static UserShou ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserShou ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserShou ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserShou ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserShou ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserShou ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static UserShou ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static UserShou ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static UserShou ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserShou ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private UserShou MakeReadOnly() {
    mj_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(UserShou prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<UserShou, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(UserShou cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private UserShou result;
    
    private UserShou PrepareBuilder() {
      if (resultIsReadOnly) {
        UserShou original = result;
        result = new UserShou();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override UserShou MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::UserShou.Descriptor; }
    }
    
    public override UserShou DefaultInstanceForType {
      get { return global::UserShou.DefaultInstance; }
    }
    
    public override UserShou BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is UserShou) {
        return MergeFrom((UserShou) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(UserShou other) {
      if (other == global::UserShou.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasFW) {
        FW = other.FW;
      }
      if (other.mj_.Count != 0) {
        result.mj_.Add(other.mj_);
      }
      if (other.HasPcount) {
        Pcount = other.Pcount;
      }
      if (other.HasQYM) {
        QYM = other.QYM;
      }
      if (other.HasTianting) {
        Tianting = other.Tianting;
      }
      if (other.HasBaoting) {
        Baoting = other.Baoting;
      }
      if (other.HasScare) {
        Scare = other.Scare;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_userShouFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _userShouFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasFW = input.ReadInt32(ref result.fW_);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.mj_, global::MaJiang.DefaultInstance, extensionRegistry);
            break;
          }
          case 24: {
            result.hasPcount = input.ReadInt32(ref result.pcount_);
            break;
          }
          case 32: {
            result.hasQYM = input.ReadInt32(ref result.qYM_);
            break;
          }
          case 40: {
            result.hasTianting = input.ReadInt32(ref result.tianting_);
            break;
          }
          case 48: {
            result.hasBaoting = input.ReadInt32(ref result.baoting_);
            break;
          }
          case 56: {
            result.hasScare = input.ReadInt32(ref result.scare_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasFW {
      get { return result.hasFW; }
    }
    public int FW {
      get { return result.FW; }
      set { SetFW(value); }
    }
    public Builder SetFW(int value) {
      PrepareBuilder();
      result.hasFW = true;
      result.fW_ = value;
      return this;
    }
    public Builder ClearFW() {
      PrepareBuilder();
      result.hasFW = false;
      result.fW_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::MaJiang> MjList {
      get { return PrepareBuilder().mj_; }
    }
    public int MjCount {
      get { return result.MjCount; }
    }
    public global::MaJiang GetMj(int index) {
      return result.GetMj(index);
    }
    public Builder SetMj(int index, global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.mj_[index] = value;
      return this;
    }
    public Builder SetMj(int index, global::MaJiang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.mj_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddMj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.mj_.Add(value);
      return this;
    }
    public Builder AddMj(global::MaJiang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.mj_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeMj(scg::IEnumerable<global::MaJiang> values) {
      PrepareBuilder();
      result.mj_.Add(values);
      return this;
    }
    public Builder ClearMj() {
      PrepareBuilder();
      result.mj_.Clear();
      return this;
    }
    
    public bool HasPcount {
      get { return result.hasPcount; }
    }
    public int Pcount {
      get { return result.Pcount; }
      set { SetPcount(value); }
    }
    public Builder SetPcount(int value) {
      PrepareBuilder();
      result.hasPcount = true;
      result.pcount_ = value;
      return this;
    }
    public Builder ClearPcount() {
      PrepareBuilder();
      result.hasPcount = false;
      result.pcount_ = 0;
      return this;
    }
    
    public bool HasQYM {
      get { return result.hasQYM; }
    }
    public int QYM {
      get { return result.QYM; }
      set { SetQYM(value); }
    }
    public Builder SetQYM(int value) {
      PrepareBuilder();
      result.hasQYM = true;
      result.qYM_ = value;
      return this;
    }
    public Builder ClearQYM() {
      PrepareBuilder();
      result.hasQYM = false;
      result.qYM_ = 0;
      return this;
    }
    
    public bool HasTianting {
      get { return result.hasTianting; }
    }
    public int Tianting {
      get { return result.Tianting; }
      set { SetTianting(value); }
    }
    public Builder SetTianting(int value) {
      PrepareBuilder();
      result.hasTianting = true;
      result.tianting_ = value;
      return this;
    }
    public Builder ClearTianting() {
      PrepareBuilder();
      result.hasTianting = false;
      result.tianting_ = 0;
      return this;
    }
    
    public bool HasBaoting {
      get { return result.hasBaoting; }
    }
    public int Baoting {
      get { return result.Baoting; }
      set { SetBaoting(value); }
    }
    public Builder SetBaoting(int value) {
      PrepareBuilder();
      result.hasBaoting = true;
      result.baoting_ = value;
      return this;
    }
    public Builder ClearBaoting() {
      PrepareBuilder();
      result.hasBaoting = false;
      result.baoting_ = 0;
      return this;
    }
    
    public bool HasScare {
      get { return result.hasScare; }
    }
    public int Scare {
      get { return result.Scare; }
      set { SetScare(value); }
    }
    public Builder SetScare(int value) {
      PrepareBuilder();
      result.hasScare = true;
      result.scare_ = value;
      return this;
    }
    public Builder ClearScare() {
      PrepareBuilder();
      result.hasScare = false;
      result.scare_ = 0;
      return this;
    }
  }
  static UserShou() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class UserPeng : pb::GeneratedMessage<UserPeng, UserPeng.Builder> {
  private UserPeng() { }
  private static readonly UserPeng defaultInstance = new UserPeng().MakeReadOnly();
  private static readonly string[] _userPengFieldNames = new string[] { "FW", "mj" };
  private static readonly uint[] _userPengFieldTags = new uint[] { 8, 18 };
  public static UserPeng DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override UserPeng DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override UserPeng ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_UserPeng__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<UserPeng, UserPeng.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_UserPeng__FieldAccessorTable; }
  }
  
  public const int FWFieldNumber = 1;
  private bool hasFW;
  private int fW_;
  public bool HasFW {
    get { return hasFW; }
  }
  public int FW {
    get { return fW_; }
  }
  
  public const int MjFieldNumber = 2;
  private pbc::PopsicleList<global::MaJiang> mj_ = new pbc::PopsicleList<global::MaJiang>();
  public scg::IList<global::MaJiang> MjList {
    get { return mj_; }
  }
  public int MjCount {
    get { return mj_.Count; }
  }
  public global::MaJiang GetMj(int index) {
    return mj_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasFW) return false;
      foreach (global::MaJiang element in MjList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _userPengFieldNames;
    if (hasFW) {
      output.WriteInt32(1, field_names[0], FW);
    }
    if (mj_.Count > 0) {
      output.WriteMessageArray(2, field_names[1], mj_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasFW) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, FW);
    }
    foreach (global::MaJiang element in MjList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static UserPeng ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserPeng ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserPeng ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserPeng ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserPeng ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserPeng ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static UserPeng ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static UserPeng ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static UserPeng ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserPeng ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private UserPeng MakeReadOnly() {
    mj_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(UserPeng prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<UserPeng, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(UserPeng cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private UserPeng result;
    
    private UserPeng PrepareBuilder() {
      if (resultIsReadOnly) {
        UserPeng original = result;
        result = new UserPeng();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override UserPeng MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::UserPeng.Descriptor; }
    }
    
    public override UserPeng DefaultInstanceForType {
      get { return global::UserPeng.DefaultInstance; }
    }
    
    public override UserPeng BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is UserPeng) {
        return MergeFrom((UserPeng) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(UserPeng other) {
      if (other == global::UserPeng.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasFW) {
        FW = other.FW;
      }
      if (other.mj_.Count != 0) {
        result.mj_.Add(other.mj_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_userPengFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _userPengFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasFW = input.ReadInt32(ref result.fW_);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.mj_, global::MaJiang.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasFW {
      get { return result.hasFW; }
    }
    public int FW {
      get { return result.FW; }
      set { SetFW(value); }
    }
    public Builder SetFW(int value) {
      PrepareBuilder();
      result.hasFW = true;
      result.fW_ = value;
      return this;
    }
    public Builder ClearFW() {
      PrepareBuilder();
      result.hasFW = false;
      result.fW_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::MaJiang> MjList {
      get { return PrepareBuilder().mj_; }
    }
    public int MjCount {
      get { return result.MjCount; }
    }
    public global::MaJiang GetMj(int index) {
      return result.GetMj(index);
    }
    public Builder SetMj(int index, global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.mj_[index] = value;
      return this;
    }
    public Builder SetMj(int index, global::MaJiang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.mj_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddMj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.mj_.Add(value);
      return this;
    }
    public Builder AddMj(global::MaJiang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.mj_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeMj(scg::IEnumerable<global::MaJiang> values) {
      PrepareBuilder();
      result.mj_.Add(values);
      return this;
    }
    public Builder ClearMj() {
      PrepareBuilder();
      result.mj_.Clear();
      return this;
    }
  }
  static UserPeng() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class UserGang : pb::GeneratedMessage<UserGang, UserGang.Builder> {
  private UserGang() { }
  private static readonly UserGang defaultInstance = new UserGang().MakeReadOnly();
  private static readonly string[] _userGangFieldNames = new string[] { "FW", "gang" };
  private static readonly uint[] _userGangFieldTags = new uint[] { 8, 18 };
  public static UserGang DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override UserGang DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override UserGang ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_UserGang__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<UserGang, UserGang.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_UserGang__FieldAccessorTable; }
  }
  
  public const int FWFieldNumber = 1;
  private bool hasFW;
  private int fW_;
  public bool HasFW {
    get { return hasFW; }
  }
  public int FW {
    get { return fW_; }
  }
  
  public const int GangFieldNumber = 2;
  private bool hasGang;
  private string gang_ = "";
  public bool HasGang {
    get { return hasGang; }
  }
  public string Gang {
    get { return gang_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasFW) return false;
      if (!hasGang) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _userGangFieldNames;
    if (hasFW) {
      output.WriteInt32(1, field_names[0], FW);
    }
    if (hasGang) {
      output.WriteString(2, field_names[1], Gang);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasFW) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, FW);
    }
    if (hasGang) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Gang);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static UserGang ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserGang ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserGang ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserGang ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserGang ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserGang ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static UserGang ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static UserGang ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static UserGang ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserGang ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private UserGang MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(UserGang prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<UserGang, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(UserGang cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private UserGang result;
    
    private UserGang PrepareBuilder() {
      if (resultIsReadOnly) {
        UserGang original = result;
        result = new UserGang();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override UserGang MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::UserGang.Descriptor; }
    }
    
    public override UserGang DefaultInstanceForType {
      get { return global::UserGang.DefaultInstance; }
    }
    
    public override UserGang BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is UserGang) {
        return MergeFrom((UserGang) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(UserGang other) {
      if (other == global::UserGang.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasFW) {
        FW = other.FW;
      }
      if (other.HasGang) {
        Gang = other.Gang;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_userGangFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _userGangFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasFW = input.ReadInt32(ref result.fW_);
            break;
          }
          case 18: {
            result.hasGang = input.ReadString(ref result.gang_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasFW {
      get { return result.hasFW; }
    }
    public int FW {
      get { return result.FW; }
      set { SetFW(value); }
    }
    public Builder SetFW(int value) {
      PrepareBuilder();
      result.hasFW = true;
      result.fW_ = value;
      return this;
    }
    public Builder ClearFW() {
      PrepareBuilder();
      result.hasFW = false;
      result.fW_ = 0;
      return this;
    }
    
    public bool HasGang {
      get { return result.hasGang; }
    }
    public string Gang {
      get { return result.Gang; }
      set { SetGang(value); }
    }
    public Builder SetGang(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGang = true;
      result.gang_ = value;
      return this;
    }
    public Builder ClearGang() {
      PrepareBuilder();
      result.hasGang = false;
      result.gang_ = "";
      return this;
    }
  }
  static UserGang() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class UserChu : pb::GeneratedMessage<UserChu, UserChu.Builder> {
  private UserChu() { }
  private static readonly UserChu defaultInstance = new UserChu().MakeReadOnly();
  private static readonly string[] _userChuFieldNames = new string[] { "FW", "mj" };
  private static readonly uint[] _userChuFieldTags = new uint[] { 8, 18 };
  public static UserChu DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override UserChu DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override UserChu ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_UserChu__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<UserChu, UserChu.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_UserChu__FieldAccessorTable; }
  }
  
  public const int FWFieldNumber = 1;
  private bool hasFW;
  private int fW_;
  public bool HasFW {
    get { return hasFW; }
  }
  public int FW {
    get { return fW_; }
  }
  
  public const int MjFieldNumber = 2;
  private pbc::PopsicleList<global::MaJiang> mj_ = new pbc::PopsicleList<global::MaJiang>();
  public scg::IList<global::MaJiang> MjList {
    get { return mj_; }
  }
  public int MjCount {
    get { return mj_.Count; }
  }
  public global::MaJiang GetMj(int index) {
    return mj_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasFW) return false;
      foreach (global::MaJiang element in MjList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _userChuFieldNames;
    if (hasFW) {
      output.WriteInt32(1, field_names[0], FW);
    }
    if (mj_.Count > 0) {
      output.WriteMessageArray(2, field_names[1], mj_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasFW) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, FW);
    }
    foreach (global::MaJiang element in MjList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static UserChu ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserChu ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserChu ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserChu ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserChu ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserChu ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static UserChu ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static UserChu ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static UserChu ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserChu ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private UserChu MakeReadOnly() {
    mj_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(UserChu prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<UserChu, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(UserChu cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private UserChu result;
    
    private UserChu PrepareBuilder() {
      if (resultIsReadOnly) {
        UserChu original = result;
        result = new UserChu();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override UserChu MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::UserChu.Descriptor; }
    }
    
    public override UserChu DefaultInstanceForType {
      get { return global::UserChu.DefaultInstance; }
    }
    
    public override UserChu BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is UserChu) {
        return MergeFrom((UserChu) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(UserChu other) {
      if (other == global::UserChu.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasFW) {
        FW = other.FW;
      }
      if (other.mj_.Count != 0) {
        result.mj_.Add(other.mj_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_userChuFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _userChuFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasFW = input.ReadInt32(ref result.fW_);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.mj_, global::MaJiang.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasFW {
      get { return result.hasFW; }
    }
    public int FW {
      get { return result.FW; }
      set { SetFW(value); }
    }
    public Builder SetFW(int value) {
      PrepareBuilder();
      result.hasFW = true;
      result.fW_ = value;
      return this;
    }
    public Builder ClearFW() {
      PrepareBuilder();
      result.hasFW = false;
      result.fW_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::MaJiang> MjList {
      get { return PrepareBuilder().mj_; }
    }
    public int MjCount {
      get { return result.MjCount; }
    }
    public global::MaJiang GetMj(int index) {
      return result.GetMj(index);
    }
    public Builder SetMj(int index, global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.mj_[index] = value;
      return this;
    }
    public Builder SetMj(int index, global::MaJiang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.mj_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddMj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.mj_.Add(value);
      return this;
    }
    public Builder AddMj(global::MaJiang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.mj_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeMj(scg::IEnumerable<global::MaJiang> values) {
      PrepareBuilder();
      result.mj_.Add(values);
      return this;
    }
    public Builder ClearMj() {
      PrepareBuilder();
      result.mj_.Clear();
      return this;
    }
  }
  static UserChu() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class JpConn : pb::GeneratedMessage<JpConn, JpConn.Builder> {
  private JpConn() { }
  private static readonly JpConn defaultInstance = new JpConn().MakeReadOnly();
  private static readonly string[] _jpConnFieldNames = new string[] { "CFJ", "FW", "WGJ" };
  private static readonly uint[] _jpConnFieldTags = new uint[] { 8, 24, 16 };
  public static JpConn DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override JpConn DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override JpConn ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_JpConn__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<JpConn, JpConn.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_JpConn__FieldAccessorTable; }
  }
  
  public const int CFJFieldNumber = 1;
  private bool hasCFJ;
  private int cFJ_;
  public bool HasCFJ {
    get { return hasCFJ; }
  }
  public int CFJ {
    get { return cFJ_; }
  }
  
  public const int WGJFieldNumber = 2;
  private bool hasWGJ;
  private int wGJ_;
  public bool HasWGJ {
    get { return hasWGJ; }
  }
  public int WGJ {
    get { return wGJ_; }
  }
  
  public const int FWFieldNumber = 3;
  private bool hasFW;
  private int fW_;
  public bool HasFW {
    get { return hasFW; }
  }
  public int FW {
    get { return fW_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasFW) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _jpConnFieldNames;
    if (hasCFJ) {
      output.WriteInt32(1, field_names[0], CFJ);
    }
    if (hasWGJ) {
      output.WriteInt32(2, field_names[2], WGJ);
    }
    if (hasFW) {
      output.WriteInt32(3, field_names[1], FW);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCFJ) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, CFJ);
    }
    if (hasWGJ) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, WGJ);
    }
    if (hasFW) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, FW);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static JpConn ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static JpConn ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static JpConn ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static JpConn ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static JpConn ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static JpConn ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static JpConn ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static JpConn ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static JpConn ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static JpConn ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private JpConn MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(JpConn prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<JpConn, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(JpConn cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private JpConn result;
    
    private JpConn PrepareBuilder() {
      if (resultIsReadOnly) {
        JpConn original = result;
        result = new JpConn();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override JpConn MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::JpConn.Descriptor; }
    }
    
    public override JpConn DefaultInstanceForType {
      get { return global::JpConn.DefaultInstance; }
    }
    
    public override JpConn BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is JpConn) {
        return MergeFrom((JpConn) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(JpConn other) {
      if (other == global::JpConn.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCFJ) {
        CFJ = other.CFJ;
      }
      if (other.HasWGJ) {
        WGJ = other.WGJ;
      }
      if (other.HasFW) {
        FW = other.FW;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_jpConnFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _jpConnFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasCFJ = input.ReadInt32(ref result.cFJ_);
            break;
          }
          case 16: {
            result.hasWGJ = input.ReadInt32(ref result.wGJ_);
            break;
          }
          case 24: {
            result.hasFW = input.ReadInt32(ref result.fW_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCFJ {
      get { return result.hasCFJ; }
    }
    public int CFJ {
      get { return result.CFJ; }
      set { SetCFJ(value); }
    }
    public Builder SetCFJ(int value) {
      PrepareBuilder();
      result.hasCFJ = true;
      result.cFJ_ = value;
      return this;
    }
    public Builder ClearCFJ() {
      PrepareBuilder();
      result.hasCFJ = false;
      result.cFJ_ = 0;
      return this;
    }
    
    public bool HasWGJ {
      get { return result.hasWGJ; }
    }
    public int WGJ {
      get { return result.WGJ; }
      set { SetWGJ(value); }
    }
    public Builder SetWGJ(int value) {
      PrepareBuilder();
      result.hasWGJ = true;
      result.wGJ_ = value;
      return this;
    }
    public Builder ClearWGJ() {
      PrepareBuilder();
      result.hasWGJ = false;
      result.wGJ_ = 0;
      return this;
    }
    
    public bool HasFW {
      get { return result.hasFW; }
    }
    public int FW {
      get { return result.FW; }
      set { SetFW(value); }
    }
    public Builder SetFW(int value) {
      PrepareBuilder();
      result.hasFW = true;
      result.fW_ = value;
      return this;
    }
    public Builder ClearFW() {
      PrepareBuilder();
      result.hasFW = false;
      result.fW_ = 0;
      return this;
    }
  }
  static JpConn() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnConnData : pb::GeneratedMessage<ReturnConnData, ReturnConnData.Builder> {
  private ReturnConnData() { }
  private static readonly ReturnConnData defaultInstance = new ReturnConnData().MakeReadOnly();
  private static readonly string[] _returnConnDataFieldNames = new string[] { "GameNumber", "LastChumj", "LastMomj", "SendData", "chu", "gang", "hyUser", "jp", "message", "peng", "roomID", "shoupai", "tp", "userInfo", "zhuang" };
  private static readonly uint[] _returnConnDataFieldTags = new uint[] { 120, 114, 106, 98, 34, 26, 66, 50, 58, 18, 40, 10, 82, 74, 90 };
  public static ReturnConnData DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnConnData DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnConnData ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnConnData__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnConnData, ReturnConnData.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnConnData__FieldAccessorTable; }
  }
  
  public const int ShoupaiFieldNumber = 1;
  private pbc::PopsicleList<global::UserShou> shoupai_ = new pbc::PopsicleList<global::UserShou>();
  public scg::IList<global::UserShou> ShoupaiList {
    get { return shoupai_; }
  }
  public int ShoupaiCount {
    get { return shoupai_.Count; }
  }
  public global::UserShou GetShoupai(int index) {
    return shoupai_[index];
  }
  
  public const int PengFieldNumber = 2;
  private pbc::PopsicleList<global::UserPeng> peng_ = new pbc::PopsicleList<global::UserPeng>();
  public scg::IList<global::UserPeng> PengList {
    get { return peng_; }
  }
  public int PengCount {
    get { return peng_.Count; }
  }
  public global::UserPeng GetPeng(int index) {
    return peng_[index];
  }
  
  public const int GangFieldNumber = 3;
  private pbc::PopsicleList<global::UserGang> gang_ = new pbc::PopsicleList<global::UserGang>();
  public scg::IList<global::UserGang> GangList {
    get { return gang_; }
  }
  public int GangCount {
    get { return gang_.Count; }
  }
  public global::UserGang GetGang(int index) {
    return gang_[index];
  }
  
  public const int ChuFieldNumber = 4;
  private pbc::PopsicleList<global::UserChu> chu_ = new pbc::PopsicleList<global::UserChu>();
  public scg::IList<global::UserChu> ChuList {
    get { return chu_; }
  }
  public int ChuCount {
    get { return chu_.Count; }
  }
  public global::UserChu GetChu(int index) {
    return chu_[index];
  }
  
  public const int RoomIDFieldNumber = 5;
  private bool hasRoomID;
  private int roomID_;
  public bool HasRoomID {
    get { return hasRoomID; }
  }
  public int RoomID {
    get { return roomID_; }
  }
  
  public const int JpFieldNumber = 6;
  private pbc::PopsicleList<global::JpConn> jp_ = new pbc::PopsicleList<global::JpConn>();
  public scg::IList<global::JpConn> JpList {
    get { return jp_; }
  }
  public int JpCount {
    get { return jp_.Count; }
  }
  public global::JpConn GetJp(int index) {
    return jp_[index];
  }
  
  public const int MessageFieldNumber = 7;
  private bool hasMessage;
  private global::ReturnRoomMsg message_;
  public bool HasMessage {
    get { return hasMessage; }
  }
  public global::ReturnRoomMsg Message {
    get { return message_ ?? global::ReturnRoomMsg.DefaultInstance; }
  }
  
  public const int HyUserFieldNumber = 8;
  private bool hasHyUser;
  private global::ReturnHyUser hyUser_;
  public bool HasHyUser {
    get { return hasHyUser; }
  }
  public global::ReturnHyUser HyUser {
    get { return hyUser_ ?? global::ReturnHyUser.DefaultInstance; }
  }
  
  public const int UserInfoFieldNumber = 9;
  private bool hasUserInfo;
  private global::ReturnUserInfo userInfo_;
  public bool HasUserInfo {
    get { return hasUserInfo; }
  }
  public global::ReturnUserInfo UserInfo {
    get { return userInfo_ ?? global::ReturnUserInfo.DefaultInstance; }
  }
  
  public const int TpFieldNumber = 10;
  private bool hasTp;
  private global::ReturnTP tp_;
  public bool HasTp {
    get { return hasTp; }
  }
  public global::ReturnTP Tp {
    get { return tp_ ?? global::ReturnTP.DefaultInstance; }
  }
  
  public const int ZhuangFieldNumber = 11;
  private bool hasZhuang;
  private global::ReturnZhuang zhuang_;
  public bool HasZhuang {
    get { return hasZhuang; }
  }
  public global::ReturnZhuang Zhuang {
    get { return zhuang_ ?? global::ReturnZhuang.DefaultInstance; }
  }
  
  public const int SendDataFieldNumber = 12;
  private pbc::PopsicleList<pb::ByteString> sendData_ = new pbc::PopsicleList<pb::ByteString>();
  public scg::IList<pb::ByteString> SendDataList {
    get { return pbc::Lists.AsReadOnly(sendData_); }
  }
  public int SendDataCount {
    get { return sendData_.Count; }
  }
  public pb::ByteString GetSendData(int index) {
    return sendData_[index];
  }
  
  public const int LastMomjFieldNumber = 13;
  private bool hasLastMomj;
  private global::MaJiang lastMomj_;
  public bool HasLastMomj {
    get { return hasLastMomj; }
  }
  public global::MaJiang LastMomj {
    get { return lastMomj_ ?? global::MaJiang.DefaultInstance; }
  }
  
  public const int LastChumjFieldNumber = 14;
  private bool hasLastChumj;
  private global::MaJiang lastChumj_;
  public bool HasLastChumj {
    get { return hasLastChumj; }
  }
  public global::MaJiang LastChumj {
    get { return lastChumj_ ?? global::MaJiang.DefaultInstance; }
  }
  
  public const int GameNumberFieldNumber = 15;
  private bool hasGameNumber;
  private int gameNumber_;
  public bool HasGameNumber {
    get { return hasGameNumber; }
  }
  public int GameNumber {
    get { return gameNumber_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasRoomID) return false;
      if (!hasMessage) return false;
      if (!hasHyUser) return false;
      if (!hasUserInfo) return false;
      if (!hasZhuang) return false;
      if (!hasGameNumber) return false;
      foreach (global::UserShou element in ShoupaiList) {
        if (!element.IsInitialized) return false;
      }
      foreach (global::UserPeng element in PengList) {
        if (!element.IsInitialized) return false;
      }
      foreach (global::UserGang element in GangList) {
        if (!element.IsInitialized) return false;
      }
      foreach (global::UserChu element in ChuList) {
        if (!element.IsInitialized) return false;
      }
      foreach (global::JpConn element in JpList) {
        if (!element.IsInitialized) return false;
      }
      if (!Message.IsInitialized) return false;
      if (!HyUser.IsInitialized) return false;
      if (!UserInfo.IsInitialized) return false;
      if (HasTp) {
        if (!Tp.IsInitialized) return false;
      }
      if (!Zhuang.IsInitialized) return false;
      if (HasLastMomj) {
        if (!LastMomj.IsInitialized) return false;
      }
      if (HasLastChumj) {
        if (!LastChumj.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnConnDataFieldNames;
    if (shoupai_.Count > 0) {
      output.WriteMessageArray(1, field_names[11], shoupai_);
    }
    if (peng_.Count > 0) {
      output.WriteMessageArray(2, field_names[9], peng_);
    }
    if (gang_.Count > 0) {
      output.WriteMessageArray(3, field_names[5], gang_);
    }
    if (chu_.Count > 0) {
      output.WriteMessageArray(4, field_names[4], chu_);
    }
    if (hasRoomID) {
      output.WriteInt32(5, field_names[10], RoomID);
    }
    if (jp_.Count > 0) {
      output.WriteMessageArray(6, field_names[7], jp_);
    }
    if (hasMessage) {
      output.WriteMessage(7, field_names[8], Message);
    }
    if (hasHyUser) {
      output.WriteMessage(8, field_names[6], HyUser);
    }
    if (hasUserInfo) {
      output.WriteMessage(9, field_names[13], UserInfo);
    }
    if (hasTp) {
      output.WriteMessage(10, field_names[12], Tp);
    }
    if (hasZhuang) {
      output.WriteMessage(11, field_names[14], Zhuang);
    }
    if (sendData_.Count > 0) {
      output.WriteBytesArray(12, field_names[3], sendData_);
    }
    if (hasLastMomj) {
      output.WriteMessage(13, field_names[2], LastMomj);
    }
    if (hasLastChumj) {
      output.WriteMessage(14, field_names[1], LastChumj);
    }
    if (hasGameNumber) {
      output.WriteInt32(15, field_names[0], GameNumber);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::UserShou element in ShoupaiList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    foreach (global::UserPeng element in PengList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    foreach (global::UserGang element in GangList) {
      size += pb::CodedOutputStream.ComputeMessageSize(3, element);
    }
    foreach (global::UserChu element in ChuList) {
      size += pb::CodedOutputStream.ComputeMessageSize(4, element);
    }
    if (hasRoomID) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, RoomID);
    }
    foreach (global::JpConn element in JpList) {
      size += pb::CodedOutputStream.ComputeMessageSize(6, element);
    }
    if (hasMessage) {
      size += pb::CodedOutputStream.ComputeMessageSize(7, Message);
    }
    if (hasHyUser) {
      size += pb::CodedOutputStream.ComputeMessageSize(8, HyUser);
    }
    if (hasUserInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(9, UserInfo);
    }
    if (hasTp) {
      size += pb::CodedOutputStream.ComputeMessageSize(10, Tp);
    }
    if (hasZhuang) {
      size += pb::CodedOutputStream.ComputeMessageSize(11, Zhuang);
    }
    {
      int dataSize = 0;
      foreach (pb::ByteString element in SendDataList) {
        dataSize += pb::CodedOutputStream.ComputeBytesSizeNoTag(element);
      }
      size += dataSize;
      size += 1 * sendData_.Count;
    }
    if (hasLastMomj) {
      size += pb::CodedOutputStream.ComputeMessageSize(13, LastMomj);
    }
    if (hasLastChumj) {
      size += pb::CodedOutputStream.ComputeMessageSize(14, LastChumj);
    }
    if (hasGameNumber) {
      size += pb::CodedOutputStream.ComputeInt32Size(15, GameNumber);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnConnData ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnConnData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnConnData ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnConnData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnConnData ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnConnData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnConnData ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnConnData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnConnData ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnConnData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnConnData MakeReadOnly() {
    shoupai_.MakeReadOnly();
    peng_.MakeReadOnly();
    gang_.MakeReadOnly();
    chu_.MakeReadOnly();
    jp_.MakeReadOnly();
    sendData_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnConnData prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnConnData, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnConnData cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnConnData result;
    
    private ReturnConnData PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnConnData original = result;
        result = new ReturnConnData();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnConnData MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnConnData.Descriptor; }
    }
    
    public override ReturnConnData DefaultInstanceForType {
      get { return global::ReturnConnData.DefaultInstance; }
    }
    
    public override ReturnConnData BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnConnData) {
        return MergeFrom((ReturnConnData) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnConnData other) {
      if (other == global::ReturnConnData.DefaultInstance) return this;
      PrepareBuilder();
      if (other.shoupai_.Count != 0) {
        result.shoupai_.Add(other.shoupai_);
      }
      if (other.peng_.Count != 0) {
        result.peng_.Add(other.peng_);
      }
      if (other.gang_.Count != 0) {
        result.gang_.Add(other.gang_);
      }
      if (other.chu_.Count != 0) {
        result.chu_.Add(other.chu_);
      }
      if (other.HasRoomID) {
        RoomID = other.RoomID;
      }
      if (other.jp_.Count != 0) {
        result.jp_.Add(other.jp_);
      }
      if (other.HasMessage) {
        MergeMessage(other.Message);
      }
      if (other.HasHyUser) {
        MergeHyUser(other.HyUser);
      }
      if (other.HasUserInfo) {
        MergeUserInfo(other.UserInfo);
      }
      if (other.HasTp) {
        MergeTp(other.Tp);
      }
      if (other.HasZhuang) {
        MergeZhuang(other.Zhuang);
      }
      if (other.sendData_.Count != 0) {
        result.sendData_.Add(other.sendData_);
      }
      if (other.HasLastMomj) {
        MergeLastMomj(other.LastMomj);
      }
      if (other.HasLastChumj) {
        MergeLastChumj(other.LastChumj);
      }
      if (other.HasGameNumber) {
        GameNumber = other.GameNumber;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnConnDataFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnConnDataFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.shoupai_, global::UserShou.DefaultInstance, extensionRegistry);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.peng_, global::UserPeng.DefaultInstance, extensionRegistry);
            break;
          }
          case 26: {
            input.ReadMessageArray(tag, field_name, result.gang_, global::UserGang.DefaultInstance, extensionRegistry);
            break;
          }
          case 34: {
            input.ReadMessageArray(tag, field_name, result.chu_, global::UserChu.DefaultInstance, extensionRegistry);
            break;
          }
          case 40: {
            result.hasRoomID = input.ReadInt32(ref result.roomID_);
            break;
          }
          case 50: {
            input.ReadMessageArray(tag, field_name, result.jp_, global::JpConn.DefaultInstance, extensionRegistry);
            break;
          }
          case 58: {
            global::ReturnRoomMsg.Builder subBuilder = global::ReturnRoomMsg.CreateBuilder();
            if (result.hasMessage) {
              subBuilder.MergeFrom(Message);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Message = subBuilder.BuildPartial();
            break;
          }
          case 66: {
            global::ReturnHyUser.Builder subBuilder = global::ReturnHyUser.CreateBuilder();
            if (result.hasHyUser) {
              subBuilder.MergeFrom(HyUser);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            HyUser = subBuilder.BuildPartial();
            break;
          }
          case 74: {
            global::ReturnUserInfo.Builder subBuilder = global::ReturnUserInfo.CreateBuilder();
            if (result.hasUserInfo) {
              subBuilder.MergeFrom(UserInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            UserInfo = subBuilder.BuildPartial();
            break;
          }
          case 82: {
            global::ReturnTP.Builder subBuilder = global::ReturnTP.CreateBuilder();
            if (result.hasTp) {
              subBuilder.MergeFrom(Tp);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Tp = subBuilder.BuildPartial();
            break;
          }
          case 90: {
            global::ReturnZhuang.Builder subBuilder = global::ReturnZhuang.CreateBuilder();
            if (result.hasZhuang) {
              subBuilder.MergeFrom(Zhuang);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Zhuang = subBuilder.BuildPartial();
            break;
          }
          case 98: {
            input.ReadBytesArray(tag, field_name, result.sendData_);
            break;
          }
          case 106: {
            global::MaJiang.Builder subBuilder = global::MaJiang.CreateBuilder();
            if (result.hasLastMomj) {
              subBuilder.MergeFrom(LastMomj);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            LastMomj = subBuilder.BuildPartial();
            break;
          }
          case 114: {
            global::MaJiang.Builder subBuilder = global::MaJiang.CreateBuilder();
            if (result.hasLastChumj) {
              subBuilder.MergeFrom(LastChumj);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            LastChumj = subBuilder.BuildPartial();
            break;
          }
          case 120: {
            result.hasGameNumber = input.ReadInt32(ref result.gameNumber_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::UserShou> ShoupaiList {
      get { return PrepareBuilder().shoupai_; }
    }
    public int ShoupaiCount {
      get { return result.ShoupaiCount; }
    }
    public global::UserShou GetShoupai(int index) {
      return result.GetShoupai(index);
    }
    public Builder SetShoupai(int index, global::UserShou value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.shoupai_[index] = value;
      return this;
    }
    public Builder SetShoupai(int index, global::UserShou.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.shoupai_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddShoupai(global::UserShou value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.shoupai_.Add(value);
      return this;
    }
    public Builder AddShoupai(global::UserShou.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.shoupai_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeShoupai(scg::IEnumerable<global::UserShou> values) {
      PrepareBuilder();
      result.shoupai_.Add(values);
      return this;
    }
    public Builder ClearShoupai() {
      PrepareBuilder();
      result.shoupai_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::UserPeng> PengList {
      get { return PrepareBuilder().peng_; }
    }
    public int PengCount {
      get { return result.PengCount; }
    }
    public global::UserPeng GetPeng(int index) {
      return result.GetPeng(index);
    }
    public Builder SetPeng(int index, global::UserPeng value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.peng_[index] = value;
      return this;
    }
    public Builder SetPeng(int index, global::UserPeng.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.peng_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddPeng(global::UserPeng value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.peng_.Add(value);
      return this;
    }
    public Builder AddPeng(global::UserPeng.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.peng_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangePeng(scg::IEnumerable<global::UserPeng> values) {
      PrepareBuilder();
      result.peng_.Add(values);
      return this;
    }
    public Builder ClearPeng() {
      PrepareBuilder();
      result.peng_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::UserGang> GangList {
      get { return PrepareBuilder().gang_; }
    }
    public int GangCount {
      get { return result.GangCount; }
    }
    public global::UserGang GetGang(int index) {
      return result.GetGang(index);
    }
    public Builder SetGang(int index, global::UserGang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.gang_[index] = value;
      return this;
    }
    public Builder SetGang(int index, global::UserGang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.gang_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddGang(global::UserGang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.gang_.Add(value);
      return this;
    }
    public Builder AddGang(global::UserGang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.gang_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeGang(scg::IEnumerable<global::UserGang> values) {
      PrepareBuilder();
      result.gang_.Add(values);
      return this;
    }
    public Builder ClearGang() {
      PrepareBuilder();
      result.gang_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::UserChu> ChuList {
      get { return PrepareBuilder().chu_; }
    }
    public int ChuCount {
      get { return result.ChuCount; }
    }
    public global::UserChu GetChu(int index) {
      return result.GetChu(index);
    }
    public Builder SetChu(int index, global::UserChu value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.chu_[index] = value;
      return this;
    }
    public Builder SetChu(int index, global::UserChu.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.chu_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddChu(global::UserChu value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.chu_.Add(value);
      return this;
    }
    public Builder AddChu(global::UserChu.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.chu_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeChu(scg::IEnumerable<global::UserChu> values) {
      PrepareBuilder();
      result.chu_.Add(values);
      return this;
    }
    public Builder ClearChu() {
      PrepareBuilder();
      result.chu_.Clear();
      return this;
    }
    
    public bool HasRoomID {
      get { return result.hasRoomID; }
    }
    public int RoomID {
      get { return result.RoomID; }
      set { SetRoomID(value); }
    }
    public Builder SetRoomID(int value) {
      PrepareBuilder();
      result.hasRoomID = true;
      result.roomID_ = value;
      return this;
    }
    public Builder ClearRoomID() {
      PrepareBuilder();
      result.hasRoomID = false;
      result.roomID_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::JpConn> JpList {
      get { return PrepareBuilder().jp_; }
    }
    public int JpCount {
      get { return result.JpCount; }
    }
    public global::JpConn GetJp(int index) {
      return result.GetJp(index);
    }
    public Builder SetJp(int index, global::JpConn value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.jp_[index] = value;
      return this;
    }
    public Builder SetJp(int index, global::JpConn.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.jp_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddJp(global::JpConn value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.jp_.Add(value);
      return this;
    }
    public Builder AddJp(global::JpConn.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.jp_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeJp(scg::IEnumerable<global::JpConn> values) {
      PrepareBuilder();
      result.jp_.Add(values);
      return this;
    }
    public Builder ClearJp() {
      PrepareBuilder();
      result.jp_.Clear();
      return this;
    }
    
    public bool HasMessage {
     get { return result.hasMessage; }
    }
    public global::ReturnRoomMsg Message {
      get { return result.Message; }
      set { SetMessage(value); }
    }
    public Builder SetMessage(global::ReturnRoomMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMessage = true;
      result.message_ = value;
      return this;
    }
    public Builder SetMessage(global::ReturnRoomMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasMessage = true;
      result.message_ = builderForValue.Build();
      return this;
    }
    public Builder MergeMessage(global::ReturnRoomMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasMessage &&
          result.message_ != global::ReturnRoomMsg.DefaultInstance) {
          result.message_ = global::ReturnRoomMsg.CreateBuilder(result.message_).MergeFrom(value).BuildPartial();
      } else {
        result.message_ = value;
      }
      result.hasMessage = true;
      return this;
    }
    public Builder ClearMessage() {
      PrepareBuilder();
      result.hasMessage = false;
      result.message_ = null;
      return this;
    }
    
    public bool HasHyUser {
     get { return result.hasHyUser; }
    }
    public global::ReturnHyUser HyUser {
      get { return result.HyUser; }
      set { SetHyUser(value); }
    }
    public Builder SetHyUser(global::ReturnHyUser value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasHyUser = true;
      result.hyUser_ = value;
      return this;
    }
    public Builder SetHyUser(global::ReturnHyUser.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasHyUser = true;
      result.hyUser_ = builderForValue.Build();
      return this;
    }
    public Builder MergeHyUser(global::ReturnHyUser value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasHyUser &&
          result.hyUser_ != global::ReturnHyUser.DefaultInstance) {
          result.hyUser_ = global::ReturnHyUser.CreateBuilder(result.hyUser_).MergeFrom(value).BuildPartial();
      } else {
        result.hyUser_ = value;
      }
      result.hasHyUser = true;
      return this;
    }
    public Builder ClearHyUser() {
      PrepareBuilder();
      result.hasHyUser = false;
      result.hyUser_ = null;
      return this;
    }
    
    public bool HasUserInfo {
     get { return result.hasUserInfo; }
    }
    public global::ReturnUserInfo UserInfo {
      get { return result.UserInfo; }
      set { SetUserInfo(value); }
    }
    public Builder SetUserInfo(global::ReturnUserInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUserInfo = true;
      result.userInfo_ = value;
      return this;
    }
    public Builder SetUserInfo(global::ReturnUserInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasUserInfo = true;
      result.userInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeUserInfo(global::ReturnUserInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasUserInfo &&
          result.userInfo_ != global::ReturnUserInfo.DefaultInstance) {
          result.userInfo_ = global::ReturnUserInfo.CreateBuilder(result.userInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.userInfo_ = value;
      }
      result.hasUserInfo = true;
      return this;
    }
    public Builder ClearUserInfo() {
      PrepareBuilder();
      result.hasUserInfo = false;
      result.userInfo_ = null;
      return this;
    }
    
    public bool HasTp {
     get { return result.hasTp; }
    }
    public global::ReturnTP Tp {
      get { return result.Tp; }
      set { SetTp(value); }
    }
    public Builder SetTp(global::ReturnTP value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTp = true;
      result.tp_ = value;
      return this;
    }
    public Builder SetTp(global::ReturnTP.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasTp = true;
      result.tp_ = builderForValue.Build();
      return this;
    }
    public Builder MergeTp(global::ReturnTP value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasTp &&
          result.tp_ != global::ReturnTP.DefaultInstance) {
          result.tp_ = global::ReturnTP.CreateBuilder(result.tp_).MergeFrom(value).BuildPartial();
      } else {
        result.tp_ = value;
      }
      result.hasTp = true;
      return this;
    }
    public Builder ClearTp() {
      PrepareBuilder();
      result.hasTp = false;
      result.tp_ = null;
      return this;
    }
    
    public bool HasZhuang {
     get { return result.hasZhuang; }
    }
    public global::ReturnZhuang Zhuang {
      get { return result.Zhuang; }
      set { SetZhuang(value); }
    }
    public Builder SetZhuang(global::ReturnZhuang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasZhuang = true;
      result.zhuang_ = value;
      return this;
    }
    public Builder SetZhuang(global::ReturnZhuang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasZhuang = true;
      result.zhuang_ = builderForValue.Build();
      return this;
    }
    public Builder MergeZhuang(global::ReturnZhuang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasZhuang &&
          result.zhuang_ != global::ReturnZhuang.DefaultInstance) {
          result.zhuang_ = global::ReturnZhuang.CreateBuilder(result.zhuang_).MergeFrom(value).BuildPartial();
      } else {
        result.zhuang_ = value;
      }
      result.hasZhuang = true;
      return this;
    }
    public Builder ClearZhuang() {
      PrepareBuilder();
      result.hasZhuang = false;
      result.zhuang_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<pb::ByteString> SendDataList {
      get { return PrepareBuilder().sendData_; }
    }
    public int SendDataCount {
      get { return result.SendDataCount; }
    }
    public pb::ByteString GetSendData(int index) {
      return result.GetSendData(index);
    }
    public Builder SetSendData(int index, pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.sendData_[index] = value;
      return this;
    }
    public Builder AddSendData(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.sendData_.Add(value);
      return this;
    }
    public Builder AddRangeSendData(scg::IEnumerable<pb::ByteString> values) {
      PrepareBuilder();
      result.sendData_.Add(values);
      return this;
    }
    public Builder ClearSendData() {
      PrepareBuilder();
      result.sendData_.Clear();
      return this;
    }
    
    public bool HasLastMomj {
     get { return result.hasLastMomj; }
    }
    public global::MaJiang LastMomj {
      get { return result.LastMomj; }
      set { SetLastMomj(value); }
    }
    public Builder SetLastMomj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasLastMomj = true;
      result.lastMomj_ = value;
      return this;
    }
    public Builder SetLastMomj(global::MaJiang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasLastMomj = true;
      result.lastMomj_ = builderForValue.Build();
      return this;
    }
    public Builder MergeLastMomj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasLastMomj &&
          result.lastMomj_ != global::MaJiang.DefaultInstance) {
          result.lastMomj_ = global::MaJiang.CreateBuilder(result.lastMomj_).MergeFrom(value).BuildPartial();
      } else {
        result.lastMomj_ = value;
      }
      result.hasLastMomj = true;
      return this;
    }
    public Builder ClearLastMomj() {
      PrepareBuilder();
      result.hasLastMomj = false;
      result.lastMomj_ = null;
      return this;
    }
    
    public bool HasLastChumj {
     get { return result.hasLastChumj; }
    }
    public global::MaJiang LastChumj {
      get { return result.LastChumj; }
      set { SetLastChumj(value); }
    }
    public Builder SetLastChumj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasLastChumj = true;
      result.lastChumj_ = value;
      return this;
    }
    public Builder SetLastChumj(global::MaJiang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasLastChumj = true;
      result.lastChumj_ = builderForValue.Build();
      return this;
    }
    public Builder MergeLastChumj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasLastChumj &&
          result.lastChumj_ != global::MaJiang.DefaultInstance) {
          result.lastChumj_ = global::MaJiang.CreateBuilder(result.lastChumj_).MergeFrom(value).BuildPartial();
      } else {
        result.lastChumj_ = value;
      }
      result.hasLastChumj = true;
      return this;
    }
    public Builder ClearLastChumj() {
      PrepareBuilder();
      result.hasLastChumj = false;
      result.lastChumj_ = null;
      return this;
    }
    
    public bool HasGameNumber {
      get { return result.hasGameNumber; }
    }
    public int GameNumber {
      get { return result.GameNumber; }
      set { SetGameNumber(value); }
    }
    public Builder SetGameNumber(int value) {
      PrepareBuilder();
      result.hasGameNumber = true;
      result.gameNumber_ = value;
      return this;
    }
    public Builder ClearGameNumber() {
      PrepareBuilder();
      result.hasGameNumber = false;
      result.gameNumber_ = 0;
      return this;
    }
  }
  static ReturnConnData() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnMsgList : pb::GeneratedMessage<ReturnMsgList, ReturnMsgList.Builder> {
  private ReturnMsgList() { }
  private static readonly ReturnMsgList defaultInstance = new ReturnMsgList().MakeReadOnly();
  private static readonly string[] _returnMsgListFieldNames = new string[] { "msg" };
  private static readonly uint[] _returnMsgListFieldTags = new uint[] { 10 };
  public static ReturnMsgList DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnMsgList DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnMsgList ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnMsgList__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnMsgList, ReturnMsgList.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnMsgList__FieldAccessorTable; }
  }
  
  public const int MsgFieldNumber = 1;
  private pbc::PopsicleList<pb::ByteString> msg_ = new pbc::PopsicleList<pb::ByteString>();
  public scg::IList<pb::ByteString> MsgList {
    get { return pbc::Lists.AsReadOnly(msg_); }
  }
  public int MsgCount {
    get { return msg_.Count; }
  }
  public pb::ByteString GetMsg(int index) {
    return msg_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnMsgListFieldNames;
    if (msg_.Count > 0) {
      output.WriteBytesArray(1, field_names[0], msg_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    {
      int dataSize = 0;
      foreach (pb::ByteString element in MsgList) {
        dataSize += pb::CodedOutputStream.ComputeBytesSizeNoTag(element);
      }
      size += dataSize;
      size += 1 * msg_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnMsgList ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnMsgList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnMsgList ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnMsgList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnMsgList ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnMsgList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnMsgList ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnMsgList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnMsgList ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnMsgList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnMsgList MakeReadOnly() {
    msg_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnMsgList prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnMsgList, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnMsgList cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnMsgList result;
    
    private ReturnMsgList PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnMsgList original = result;
        result = new ReturnMsgList();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnMsgList MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnMsgList.Descriptor; }
    }
    
    public override ReturnMsgList DefaultInstanceForType {
      get { return global::ReturnMsgList.DefaultInstance; }
    }
    
    public override ReturnMsgList BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnMsgList) {
        return MergeFrom((ReturnMsgList) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnMsgList other) {
      if (other == global::ReturnMsgList.DefaultInstance) return this;
      PrepareBuilder();
      if (other.msg_.Count != 0) {
        result.msg_.Add(other.msg_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnMsgListFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnMsgListFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadBytesArray(tag, field_name, result.msg_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<pb::ByteString> MsgList {
      get { return PrepareBuilder().msg_; }
    }
    public int MsgCount {
      get { return result.MsgCount; }
    }
    public pb::ByteString GetMsg(int index) {
      return result.GetMsg(index);
    }
    public Builder SetMsg(int index, pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.msg_[index] = value;
      return this;
    }
    public Builder AddMsg(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.msg_.Add(value);
      return this;
    }
    public Builder AddRangeMsg(scg::IEnumerable<pb::ByteString> values) {
      PrepareBuilder();
      result.msg_.Add(values);
      return this;
    }
    public Builder ClearMsg() {
      PrepareBuilder();
      result.msg_.Clear();
      return this;
    }
  }
  static ReturnMsgList() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnRoomMsg : pb::GeneratedMessage<ReturnRoomMsg, ReturnRoomMsg.Builder> {
  private ReturnRoomMsg() { }
  private static readonly ReturnRoomMsg defaultInstance = new ReturnRoomMsg().MakeReadOnly();
  private static readonly string[] _returnRoomMsgFieldNames = new string[] { "count", "is_benji", "is_lianzhuang", "is_shangxiaji", "is_wgj", "is_xinqiji", "is_yikousan", "room_peo" };
  private static readonly uint[] _returnRoomMsgFieldTags = new uint[] { 56, 32, 64, 24, 8, 16, 40, 48 };
  public static ReturnRoomMsg DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnRoomMsg DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnRoomMsg ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnRoomMsg__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnRoomMsg, ReturnRoomMsg.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnRoomMsg__FieldAccessorTable; }
  }
  
  public const int IsWgjFieldNumber = 1;
  private bool hasIsWgj;
  private int isWgj_;
  public bool HasIsWgj {
    get { return hasIsWgj; }
  }
  public int IsWgj {
    get { return isWgj_; }
  }
  
  public const int IsXinqijiFieldNumber = 2;
  private bool hasIsXinqiji;
  private int isXinqiji_;
  public bool HasIsXinqiji {
    get { return hasIsXinqiji; }
  }
  public int IsXinqiji {
    get { return isXinqiji_; }
  }
  
  public const int IsShangxiajiFieldNumber = 3;
  private bool hasIsShangxiaji;
  private int isShangxiaji_;
  public bool HasIsShangxiaji {
    get { return hasIsShangxiaji; }
  }
  public int IsShangxiaji {
    get { return isShangxiaji_; }
  }
  
  public const int IsBenjiFieldNumber = 4;
  private bool hasIsBenji;
  private int isBenji_;
  public bool HasIsBenji {
    get { return hasIsBenji; }
  }
  public int IsBenji {
    get { return isBenji_; }
  }
  
  public const int IsYikousanFieldNumber = 5;
  private bool hasIsYikousan;
  private int isYikousan_;
  public bool HasIsYikousan {
    get { return hasIsYikousan; }
  }
  public int IsYikousan {
    get { return isYikousan_; }
  }
  
  public const int RoomPeoFieldNumber = 6;
  private bool hasRoomPeo;
  private int roomPeo_;
  public bool HasRoomPeo {
    get { return hasRoomPeo; }
  }
  public int RoomPeo {
    get { return roomPeo_; }
  }
  
  public const int CountFieldNumber = 7;
  private bool hasCount;
  private int count_;
  public bool HasCount {
    get { return hasCount; }
  }
  public int Count {
    get { return count_; }
  }
  
  public const int IsLianzhuangFieldNumber = 8;
  private bool hasIsLianzhuang;
  private int isLianzhuang_;
  public bool HasIsLianzhuang {
    get { return hasIsLianzhuang; }
  }
  public int IsLianzhuang {
    get { return isLianzhuang_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasIsWgj) return false;
      if (!hasIsXinqiji) return false;
      if (!hasIsShangxiaji) return false;
      if (!hasIsBenji) return false;
      if (!hasIsYikousan) return false;
      if (!hasCount) return false;
      if (!hasIsLianzhuang) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnRoomMsgFieldNames;
    if (hasIsWgj) {
      output.WriteInt32(1, field_names[4], IsWgj);
    }
    if (hasIsXinqiji) {
      output.WriteInt32(2, field_names[5], IsXinqiji);
    }
    if (hasIsShangxiaji) {
      output.WriteInt32(3, field_names[3], IsShangxiaji);
    }
    if (hasIsBenji) {
      output.WriteInt32(4, field_names[1], IsBenji);
    }
    if (hasIsYikousan) {
      output.WriteInt32(5, field_names[6], IsYikousan);
    }
    if (hasRoomPeo) {
      output.WriteInt32(6, field_names[7], RoomPeo);
    }
    if (hasCount) {
      output.WriteInt32(7, field_names[0], Count);
    }
    if (hasIsLianzhuang) {
      output.WriteInt32(8, field_names[2], IsLianzhuang);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasIsWgj) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, IsWgj);
    }
    if (hasIsXinqiji) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, IsXinqiji);
    }
    if (hasIsShangxiaji) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, IsShangxiaji);
    }
    if (hasIsBenji) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, IsBenji);
    }
    if (hasIsYikousan) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, IsYikousan);
    }
    if (hasRoomPeo) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, RoomPeo);
    }
    if (hasCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(7, Count);
    }
    if (hasIsLianzhuang) {
      size += pb::CodedOutputStream.ComputeInt32Size(8, IsLianzhuang);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnRoomMsg ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnRoomMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnRoomMsg ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnRoomMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnRoomMsg ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnRoomMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnRoomMsg ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnRoomMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnRoomMsg ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnRoomMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnRoomMsg MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnRoomMsg prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnRoomMsg, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnRoomMsg cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnRoomMsg result;
    
    private ReturnRoomMsg PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnRoomMsg original = result;
        result = new ReturnRoomMsg();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnRoomMsg MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnRoomMsg.Descriptor; }
    }
    
    public override ReturnRoomMsg DefaultInstanceForType {
      get { return global::ReturnRoomMsg.DefaultInstance; }
    }
    
    public override ReturnRoomMsg BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnRoomMsg) {
        return MergeFrom((ReturnRoomMsg) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnRoomMsg other) {
      if (other == global::ReturnRoomMsg.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasIsWgj) {
        IsWgj = other.IsWgj;
      }
      if (other.HasIsXinqiji) {
        IsXinqiji = other.IsXinqiji;
      }
      if (other.HasIsShangxiaji) {
        IsShangxiaji = other.IsShangxiaji;
      }
      if (other.HasIsBenji) {
        IsBenji = other.IsBenji;
      }
      if (other.HasIsYikousan) {
        IsYikousan = other.IsYikousan;
      }
      if (other.HasRoomPeo) {
        RoomPeo = other.RoomPeo;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      if (other.HasIsLianzhuang) {
        IsLianzhuang = other.IsLianzhuang;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnRoomMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnRoomMsgFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasIsWgj = input.ReadInt32(ref result.isWgj_);
            break;
          }
          case 16: {
            result.hasIsXinqiji = input.ReadInt32(ref result.isXinqiji_);
            break;
          }
          case 24: {
            result.hasIsShangxiaji = input.ReadInt32(ref result.isShangxiaji_);
            break;
          }
          case 32: {
            result.hasIsBenji = input.ReadInt32(ref result.isBenji_);
            break;
          }
          case 40: {
            result.hasIsYikousan = input.ReadInt32(ref result.isYikousan_);
            break;
          }
          case 48: {
            result.hasRoomPeo = input.ReadInt32(ref result.roomPeo_);
            break;
          }
          case 56: {
            result.hasCount = input.ReadInt32(ref result.count_);
            break;
          }
          case 64: {
            result.hasIsLianzhuang = input.ReadInt32(ref result.isLianzhuang_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasIsWgj {
      get { return result.hasIsWgj; }
    }
    public int IsWgj {
      get { return result.IsWgj; }
      set { SetIsWgj(value); }
    }
    public Builder SetIsWgj(int value) {
      PrepareBuilder();
      result.hasIsWgj = true;
      result.isWgj_ = value;
      return this;
    }
    public Builder ClearIsWgj() {
      PrepareBuilder();
      result.hasIsWgj = false;
      result.isWgj_ = 0;
      return this;
    }
    
    public bool HasIsXinqiji {
      get { return result.hasIsXinqiji; }
    }
    public int IsXinqiji {
      get { return result.IsXinqiji; }
      set { SetIsXinqiji(value); }
    }
    public Builder SetIsXinqiji(int value) {
      PrepareBuilder();
      result.hasIsXinqiji = true;
      result.isXinqiji_ = value;
      return this;
    }
    public Builder ClearIsXinqiji() {
      PrepareBuilder();
      result.hasIsXinqiji = false;
      result.isXinqiji_ = 0;
      return this;
    }
    
    public bool HasIsShangxiaji {
      get { return result.hasIsShangxiaji; }
    }
    public int IsShangxiaji {
      get { return result.IsShangxiaji; }
      set { SetIsShangxiaji(value); }
    }
    public Builder SetIsShangxiaji(int value) {
      PrepareBuilder();
      result.hasIsShangxiaji = true;
      result.isShangxiaji_ = value;
      return this;
    }
    public Builder ClearIsShangxiaji() {
      PrepareBuilder();
      result.hasIsShangxiaji = false;
      result.isShangxiaji_ = 0;
      return this;
    }
    
    public bool HasIsBenji {
      get { return result.hasIsBenji; }
    }
    public int IsBenji {
      get { return result.IsBenji; }
      set { SetIsBenji(value); }
    }
    public Builder SetIsBenji(int value) {
      PrepareBuilder();
      result.hasIsBenji = true;
      result.isBenji_ = value;
      return this;
    }
    public Builder ClearIsBenji() {
      PrepareBuilder();
      result.hasIsBenji = false;
      result.isBenji_ = 0;
      return this;
    }
    
    public bool HasIsYikousan {
      get { return result.hasIsYikousan; }
    }
    public int IsYikousan {
      get { return result.IsYikousan; }
      set { SetIsYikousan(value); }
    }
    public Builder SetIsYikousan(int value) {
      PrepareBuilder();
      result.hasIsYikousan = true;
      result.isYikousan_ = value;
      return this;
    }
    public Builder ClearIsYikousan() {
      PrepareBuilder();
      result.hasIsYikousan = false;
      result.isYikousan_ = 0;
      return this;
    }
    
    public bool HasRoomPeo {
      get { return result.hasRoomPeo; }
    }
    public int RoomPeo {
      get { return result.RoomPeo; }
      set { SetRoomPeo(value); }
    }
    public Builder SetRoomPeo(int value) {
      PrepareBuilder();
      result.hasRoomPeo = true;
      result.roomPeo_ = value;
      return this;
    }
    public Builder ClearRoomPeo() {
      PrepareBuilder();
      result.hasRoomPeo = false;
      result.roomPeo_ = 0;
      return this;
    }
    
    public bool HasCount {
      get { return result.hasCount; }
    }
    public int Count {
      get { return result.Count; }
      set { SetCount(value); }
    }
    public Builder SetCount(int value) {
      PrepareBuilder();
      result.hasCount = true;
      result.count_ = value;
      return this;
    }
    public Builder ClearCount() {
      PrepareBuilder();
      result.hasCount = false;
      result.count_ = 0;
      return this;
    }
    
    public bool HasIsLianzhuang {
      get { return result.hasIsLianzhuang; }
    }
    public int IsLianzhuang {
      get { return result.IsLianzhuang; }
      set { SetIsLianzhuang(value); }
    }
    public Builder SetIsLianzhuang(int value) {
      PrepareBuilder();
      result.hasIsLianzhuang = true;
      result.isLianzhuang_ = value;
      return this;
    }
    public Builder ClearIsLianzhuang() {
      PrepareBuilder();
      result.hasIsLianzhuang = false;
      result.isLianzhuang_ = 0;
      return this;
    }
  }
  static ReturnRoomMsg() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnHyUser : pb::GeneratedMessage<ReturnHyUser, ReturnHyUser.Builder> {
  private ReturnHyUser() { }
  private static readonly ReturnHyUser defaultInstance = new ReturnHyUser().MakeReadOnly();
  private static readonly string[] _returnHyUserFieldNames = new string[] { "cz", "fw", "mj" };
  private static readonly uint[] _returnHyUserFieldTags = new uint[] { 18, 8, 26 };
  public static ReturnHyUser DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnHyUser DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnHyUser ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnHyUser__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnHyUser, ReturnHyUser.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnHyUser__FieldAccessorTable; }
  }
  
  public const int FwFieldNumber = 1;
  private bool hasFw;
  private int fw_;
  public bool HasFw {
    get { return hasFw; }
  }
  public int Fw {
    get { return fw_; }
  }
  
  public const int CzFieldNumber = 2;
  private bool hasCz;
  private string cz_ = "";
  public bool HasCz {
    get { return hasCz; }
  }
  public string Cz {
    get { return cz_; }
  }
  
  public const int MjFieldNumber = 3;
  private bool hasMj;
  private global::MaJiang mj_;
  public bool HasMj {
    get { return hasMj; }
  }
  public global::MaJiang Mj {
    get { return mj_ ?? global::MaJiang.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasFw) return false;
      if (!hasCz) return false;
      if (HasMj) {
        if (!Mj.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnHyUserFieldNames;
    if (hasFw) {
      output.WriteInt32(1, field_names[1], Fw);
    }
    if (hasCz) {
      output.WriteString(2, field_names[0], Cz);
    }
    if (hasMj) {
      output.WriteMessage(3, field_names[2], Mj);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasFw) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Fw);
    }
    if (hasCz) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Cz);
    }
    if (hasMj) {
      size += pb::CodedOutputStream.ComputeMessageSize(3, Mj);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnHyUser ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnHyUser ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnHyUser ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnHyUser ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnHyUser ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnHyUser ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnHyUser ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnHyUser ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnHyUser ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnHyUser ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnHyUser MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnHyUser prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnHyUser, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnHyUser cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnHyUser result;
    
    private ReturnHyUser PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnHyUser original = result;
        result = new ReturnHyUser();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnHyUser MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnHyUser.Descriptor; }
    }
    
    public override ReturnHyUser DefaultInstanceForType {
      get { return global::ReturnHyUser.DefaultInstance; }
    }
    
    public override ReturnHyUser BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnHyUser) {
        return MergeFrom((ReturnHyUser) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnHyUser other) {
      if (other == global::ReturnHyUser.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasFw) {
        Fw = other.Fw;
      }
      if (other.HasCz) {
        Cz = other.Cz;
      }
      if (other.HasMj) {
        MergeMj(other.Mj);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnHyUserFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnHyUserFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasFw = input.ReadInt32(ref result.fw_);
            break;
          }
          case 18: {
            result.hasCz = input.ReadString(ref result.cz_);
            break;
          }
          case 26: {
            global::MaJiang.Builder subBuilder = global::MaJiang.CreateBuilder();
            if (result.hasMj) {
              subBuilder.MergeFrom(Mj);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Mj = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasFw {
      get { return result.hasFw; }
    }
    public int Fw {
      get { return result.Fw; }
      set { SetFw(value); }
    }
    public Builder SetFw(int value) {
      PrepareBuilder();
      result.hasFw = true;
      result.fw_ = value;
      return this;
    }
    public Builder ClearFw() {
      PrepareBuilder();
      result.hasFw = false;
      result.fw_ = 0;
      return this;
    }
    
    public bool HasCz {
      get { return result.hasCz; }
    }
    public string Cz {
      get { return result.Cz; }
      set { SetCz(value); }
    }
    public Builder SetCz(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCz = true;
      result.cz_ = value;
      return this;
    }
    public Builder ClearCz() {
      PrepareBuilder();
      result.hasCz = false;
      result.cz_ = "";
      return this;
    }
    
    public bool HasMj {
     get { return result.hasMj; }
    }
    public global::MaJiang Mj {
      get { return result.Mj; }
      set { SetMj(value); }
    }
    public Builder SetMj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMj = true;
      result.mj_ = value;
      return this;
    }
    public Builder SetMj(global::MaJiang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasMj = true;
      result.mj_ = builderForValue.Build();
      return this;
    }
    public Builder MergeMj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasMj &&
          result.mj_ != global::MaJiang.DefaultInstance) {
          result.mj_ = global::MaJiang.CreateBuilder(result.mj_).MergeFrom(value).BuildPartial();
      } else {
        result.mj_ = value;
      }
      result.hasMj = true;
      return this;
    }
    public Builder ClearMj() {
      PrepareBuilder();
      result.hasMj = false;
      result.mj_ = null;
      return this;
    }
  }
  static ReturnHyUser() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnFJ : pb::GeneratedMessage<ReturnFJ, ReturnFJ.Builder> {
  private ReturnFJ() { }
  private static readonly ReturnFJ defaultInstance = new ReturnFJ().MakeReadOnly();
  private static readonly string[] _returnFJFieldNames = new string[] { "HS" };
  private static readonly uint[] _returnFJFieldTags = new uint[] { 8 };
  public static ReturnFJ DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnFJ DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnFJ ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnFJ__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnFJ, ReturnFJ.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnFJ__FieldAccessorTable; }
  }
  
  public const int HSFieldNumber = 1;
  private bool hasHS;
  private int hS_;
  public bool HasHS {
    get { return hasHS; }
  }
  public int HS {
    get { return hS_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasHS) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnFJFieldNames;
    if (hasHS) {
      output.WriteInt32(1, field_names[0], HS);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasHS) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, HS);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnFJ ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnFJ ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnFJ ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnFJ ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnFJ ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnFJ ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnFJ ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnFJ ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnFJ ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnFJ ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnFJ MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnFJ prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnFJ, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnFJ cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnFJ result;
    
    private ReturnFJ PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnFJ original = result;
        result = new ReturnFJ();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnFJ MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnFJ.Descriptor; }
    }
    
    public override ReturnFJ DefaultInstanceForType {
      get { return global::ReturnFJ.DefaultInstance; }
    }
    
    public override ReturnFJ BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnFJ) {
        return MergeFrom((ReturnFJ) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnFJ other) {
      if (other == global::ReturnFJ.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasHS) {
        HS = other.HS;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnFJFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnFJFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasHS = input.ReadInt32(ref result.hS_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasHS {
      get { return result.hasHS; }
    }
    public int HS {
      get { return result.HS; }
      set { SetHS(value); }
    }
    public Builder SetHS(int value) {
      PrepareBuilder();
      result.hasHS = true;
      result.hS_ = value;
      return this;
    }
    public Builder ClearHS() {
      PrepareBuilder();
      result.hasHS = false;
      result.hS_ = 0;
      return this;
    }
  }
  static ReturnFJ() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class JiPaiF : pb::GeneratedMessage<JiPaiF, JiPaiF.Builder> {
  private JiPaiF() { }
  private static readonly JiPaiF defaultInstance = new JiPaiF().MakeReadOnly();
  private static readonly string[] _jiPaiFFieldNames = new string[] { "Count", "PaiHS", "type" };
  private static readonly uint[] _jiPaiFFieldTags = new uint[] { 16, 8, 24 };
  public static JiPaiF DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override JiPaiF DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override JiPaiF ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_JiPaiF__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<JiPaiF, JiPaiF.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_JiPaiF__FieldAccessorTable; }
  }
  
  public const int PaiHSFieldNumber = 1;
  private bool hasPaiHS;
  private int paiHS_;
  public bool HasPaiHS {
    get { return hasPaiHS; }
  }
  public int PaiHS {
    get { return paiHS_; }
  }
  
  public const int CountFieldNumber = 2;
  private bool hasCount;
  private int count_;
  public bool HasCount {
    get { return hasCount; }
  }
  public int Count {
    get { return count_; }
  }
  
  public const int TypeFieldNumber = 3;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _jiPaiFFieldNames;
    if (hasPaiHS) {
      output.WriteInt32(1, field_names[1], PaiHS);
    }
    if (hasCount) {
      output.WriteInt32(2, field_names[0], Count);
    }
    if (hasType) {
      output.WriteInt32(3, field_names[2], Type);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPaiHS) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, PaiHS);
    }
    if (hasCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Count);
    }
    if (hasType) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Type);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static JiPaiF ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static JiPaiF ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static JiPaiF ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static JiPaiF ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static JiPaiF ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static JiPaiF ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static JiPaiF ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static JiPaiF ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static JiPaiF ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static JiPaiF ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private JiPaiF MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(JiPaiF prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<JiPaiF, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(JiPaiF cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private JiPaiF result;
    
    private JiPaiF PrepareBuilder() {
      if (resultIsReadOnly) {
        JiPaiF original = result;
        result = new JiPaiF();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override JiPaiF MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::JiPaiF.Descriptor; }
    }
    
    public override JiPaiF DefaultInstanceForType {
      get { return global::JiPaiF.DefaultInstance; }
    }
    
    public override JiPaiF BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is JiPaiF) {
        return MergeFrom((JiPaiF) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(JiPaiF other) {
      if (other == global::JiPaiF.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPaiHS) {
        PaiHS = other.PaiHS;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_jiPaiFFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _jiPaiFFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPaiHS = input.ReadInt32(ref result.paiHS_);
            break;
          }
          case 16: {
            result.hasCount = input.ReadInt32(ref result.count_);
            break;
          }
          case 24: {
            result.hasType = input.ReadInt32(ref result.type_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPaiHS {
      get { return result.hasPaiHS; }
    }
    public int PaiHS {
      get { return result.PaiHS; }
      set { SetPaiHS(value); }
    }
    public Builder SetPaiHS(int value) {
      PrepareBuilder();
      result.hasPaiHS = true;
      result.paiHS_ = value;
      return this;
    }
    public Builder ClearPaiHS() {
      PrepareBuilder();
      result.hasPaiHS = false;
      result.paiHS_ = 0;
      return this;
    }
    
    public bool HasCount {
      get { return result.hasCount; }
    }
    public int Count {
      get { return result.Count; }
      set { SetCount(value); }
    }
    public Builder SetCount(int value) {
      PrepareBuilder();
      result.hasCount = true;
      result.count_ = value;
      return this;
    }
    public Builder ClearCount() {
      PrepareBuilder();
      result.hasCount = false;
      result.count_ = 0;
      return this;
    }
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
  }
  static JiPaiF() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Dou : pb::GeneratedMessage<Dou, Dou.Builder> {
  private Dou() { }
  private static readonly Dou defaultInstance = new Dou().MakeReadOnly();
  private static readonly string[] _douFieldNames = new string[] { "Count", "type" };
  private static readonly uint[] _douFieldTags = new uint[] { 16, 8 };
  public static Dou DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override Dou DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override Dou ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_Dou__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<Dou, Dou.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_Dou__FieldAccessorTable; }
  }
  
  public const int TypeFieldNumber = 1;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public const int CountFieldNumber = 2;
  private bool hasCount;
  private int count_;
  public bool HasCount {
    get { return hasCount; }
  }
  public int Count {
    get { return count_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _douFieldNames;
    if (hasType) {
      output.WriteInt32(1, field_names[1], Type);
    }
    if (hasCount) {
      output.WriteInt32(2, field_names[0], Count);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasType) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
    }
    if (hasCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Count);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static Dou ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Dou ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Dou ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Dou ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Dou ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Dou ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static Dou ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static Dou ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static Dou ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Dou ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private Dou MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(Dou prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<Dou, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(Dou cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private Dou result;
    
    private Dou PrepareBuilder() {
      if (resultIsReadOnly) {
        Dou original = result;
        result = new Dou();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override Dou MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::Dou.Descriptor; }
    }
    
    public override Dou DefaultInstanceForType {
      get { return global::Dou.DefaultInstance; }
    }
    
    public override Dou BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is Dou) {
        return MergeFrom((Dou) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(Dou other) {
      if (other == global::Dou.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_douFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _douFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasType = input.ReadInt32(ref result.type_);
            break;
          }
          case 16: {
            result.hasCount = input.ReadInt32(ref result.count_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
    
    public bool HasCount {
      get { return result.hasCount; }
    }
    public int Count {
      get { return result.Count; }
      set { SetCount(value); }
    }
    public Builder SetCount(int value) {
      PrepareBuilder();
      result.hasCount = true;
      result.count_ = value;
      return this;
    }
    public Builder ClearCount() {
      PrepareBuilder();
      result.hasCount = false;
      result.count_ = 0;
      return this;
    }
  }
  static Dou() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class UserJS : pb::GeneratedMessage<UserJS, UserJS.Builder> {
  private UserJS() { }
  private static readonly UserJS defaultInstance = new UserJS().MakeReadOnly();
  private static readonly string[] _userJSFieldNames = new string[] { "FS", "dc", "dy_fs", "huType", "is_jiao", "is_pao", "jp", "userinfo" };
  private static readonly uint[] _userJSFieldTags = new uint[] { 32, 26, 56, 64, 40, 48, 18, 10 };
  public static UserJS DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override UserJS DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override UserJS ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_UserJS__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<UserJS, UserJS.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_UserJS__FieldAccessorTable; }
  }
  
  public const int UserinfoFieldNumber = 1;
  private bool hasUserinfo;
  private global::Userinfo userinfo_;
  public bool HasUserinfo {
    get { return hasUserinfo; }
  }
  public global::Userinfo Userinfo {
    get { return userinfo_ ?? global::Userinfo.DefaultInstance; }
  }
  
  public const int JpFieldNumber = 2;
  private pbc::PopsicleList<global::JiPaiF> jp_ = new pbc::PopsicleList<global::JiPaiF>();
  public scg::IList<global::JiPaiF> JpList {
    get { return jp_; }
  }
  public int JpCount {
    get { return jp_.Count; }
  }
  public global::JiPaiF GetJp(int index) {
    return jp_[index];
  }
  
  public const int DcFieldNumber = 3;
  private pbc::PopsicleList<global::Dou> dc_ = new pbc::PopsicleList<global::Dou>();
  public scg::IList<global::Dou> DcList {
    get { return dc_; }
  }
  public int DcCount {
    get { return dc_.Count; }
  }
  public global::Dou GetDc(int index) {
    return dc_[index];
  }
  
  public const int FSFieldNumber = 4;
  private bool hasFS;
  private int fS_;
  public bool HasFS {
    get { return hasFS; }
  }
  public int FS {
    get { return fS_; }
  }
  
  public const int IsJiaoFieldNumber = 5;
  private bool hasIsJiao;
  private int isJiao_;
  public bool HasIsJiao {
    get { return hasIsJiao; }
  }
  public int IsJiao {
    get { return isJiao_; }
  }
  
  public const int IsPaoFieldNumber = 6;
  private bool hasIsPao;
  private int isPao_;
  public bool HasIsPao {
    get { return hasIsPao; }
  }
  public int IsPao {
    get { return isPao_; }
  }
  
  public const int DyFsFieldNumber = 7;
  private bool hasDyFs;
  private int dyFs_;
  public bool HasDyFs {
    get { return hasDyFs; }
  }
  public int DyFs {
    get { return dyFs_; }
  }
  
  public const int HuTypeFieldNumber = 8;
  private bool hasHuType;
  private int huType_;
  public bool HasHuType {
    get { return hasHuType; }
  }
  public int HuType {
    get { return huType_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasUserinfo) return false;
      if (!hasFS) return false;
      if (!hasIsJiao) return false;
      if (!Userinfo.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _userJSFieldNames;
    if (hasUserinfo) {
      output.WriteMessage(1, field_names[7], Userinfo);
    }
    if (jp_.Count > 0) {
      output.WriteMessageArray(2, field_names[6], jp_);
    }
    if (dc_.Count > 0) {
      output.WriteMessageArray(3, field_names[1], dc_);
    }
    if (hasFS) {
      output.WriteInt32(4, field_names[0], FS);
    }
    if (hasIsJiao) {
      output.WriteInt32(5, field_names[4], IsJiao);
    }
    if (hasIsPao) {
      output.WriteInt32(6, field_names[5], IsPao);
    }
    if (hasDyFs) {
      output.WriteInt32(7, field_names[2], DyFs);
    }
    if (hasHuType) {
      output.WriteInt32(8, field_names[3], HuType);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasUserinfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Userinfo);
    }
    foreach (global::JiPaiF element in JpList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    foreach (global::Dou element in DcList) {
      size += pb::CodedOutputStream.ComputeMessageSize(3, element);
    }
    if (hasFS) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, FS);
    }
    if (hasIsJiao) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, IsJiao);
    }
    if (hasIsPao) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, IsPao);
    }
    if (hasDyFs) {
      size += pb::CodedOutputStream.ComputeInt32Size(7, DyFs);
    }
    if (hasHuType) {
      size += pb::CodedOutputStream.ComputeInt32Size(8, HuType);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static UserJS ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserJS ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserJS ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserJS ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserJS ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserJS ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static UserJS ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static UserJS ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static UserJS ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserJS ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private UserJS MakeReadOnly() {
    jp_.MakeReadOnly();
    dc_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(UserJS prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<UserJS, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(UserJS cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private UserJS result;
    
    private UserJS PrepareBuilder() {
      if (resultIsReadOnly) {
        UserJS original = result;
        result = new UserJS();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override UserJS MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::UserJS.Descriptor; }
    }
    
    public override UserJS DefaultInstanceForType {
      get { return global::UserJS.DefaultInstance; }
    }
    
    public override UserJS BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is UserJS) {
        return MergeFrom((UserJS) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(UserJS other) {
      if (other == global::UserJS.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasUserinfo) {
        MergeUserinfo(other.Userinfo);
      }
      if (other.jp_.Count != 0) {
        result.jp_.Add(other.jp_);
      }
      if (other.dc_.Count != 0) {
        result.dc_.Add(other.dc_);
      }
      if (other.HasFS) {
        FS = other.FS;
      }
      if (other.HasIsJiao) {
        IsJiao = other.IsJiao;
      }
      if (other.HasIsPao) {
        IsPao = other.IsPao;
      }
      if (other.HasDyFs) {
        DyFs = other.DyFs;
      }
      if (other.HasHuType) {
        HuType = other.HuType;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_userJSFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _userJSFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::Userinfo.Builder subBuilder = global::Userinfo.CreateBuilder();
            if (result.hasUserinfo) {
              subBuilder.MergeFrom(Userinfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Userinfo = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.jp_, global::JiPaiF.DefaultInstance, extensionRegistry);
            break;
          }
          case 26: {
            input.ReadMessageArray(tag, field_name, result.dc_, global::Dou.DefaultInstance, extensionRegistry);
            break;
          }
          case 32: {
            result.hasFS = input.ReadInt32(ref result.fS_);
            break;
          }
          case 40: {
            result.hasIsJiao = input.ReadInt32(ref result.isJiao_);
            break;
          }
          case 48: {
            result.hasIsPao = input.ReadInt32(ref result.isPao_);
            break;
          }
          case 56: {
            result.hasDyFs = input.ReadInt32(ref result.dyFs_);
            break;
          }
          case 64: {
            result.hasHuType = input.ReadInt32(ref result.huType_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasUserinfo {
     get { return result.hasUserinfo; }
    }
    public global::Userinfo Userinfo {
      get { return result.Userinfo; }
      set { SetUserinfo(value); }
    }
    public Builder SetUserinfo(global::Userinfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUserinfo = true;
      result.userinfo_ = value;
      return this;
    }
    public Builder SetUserinfo(global::Userinfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasUserinfo = true;
      result.userinfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeUserinfo(global::Userinfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasUserinfo &&
          result.userinfo_ != global::Userinfo.DefaultInstance) {
          result.userinfo_ = global::Userinfo.CreateBuilder(result.userinfo_).MergeFrom(value).BuildPartial();
      } else {
        result.userinfo_ = value;
      }
      result.hasUserinfo = true;
      return this;
    }
    public Builder ClearUserinfo() {
      PrepareBuilder();
      result.hasUserinfo = false;
      result.userinfo_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<global::JiPaiF> JpList {
      get { return PrepareBuilder().jp_; }
    }
    public int JpCount {
      get { return result.JpCount; }
    }
    public global::JiPaiF GetJp(int index) {
      return result.GetJp(index);
    }
    public Builder SetJp(int index, global::JiPaiF value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.jp_[index] = value;
      return this;
    }
    public Builder SetJp(int index, global::JiPaiF.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.jp_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddJp(global::JiPaiF value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.jp_.Add(value);
      return this;
    }
    public Builder AddJp(global::JiPaiF.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.jp_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeJp(scg::IEnumerable<global::JiPaiF> values) {
      PrepareBuilder();
      result.jp_.Add(values);
      return this;
    }
    public Builder ClearJp() {
      PrepareBuilder();
      result.jp_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::Dou> DcList {
      get { return PrepareBuilder().dc_; }
    }
    public int DcCount {
      get { return result.DcCount; }
    }
    public global::Dou GetDc(int index) {
      return result.GetDc(index);
    }
    public Builder SetDc(int index, global::Dou value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.dc_[index] = value;
      return this;
    }
    public Builder SetDc(int index, global::Dou.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.dc_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddDc(global::Dou value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.dc_.Add(value);
      return this;
    }
    public Builder AddDc(global::Dou.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.dc_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeDc(scg::IEnumerable<global::Dou> values) {
      PrepareBuilder();
      result.dc_.Add(values);
      return this;
    }
    public Builder ClearDc() {
      PrepareBuilder();
      result.dc_.Clear();
      return this;
    }
    
    public bool HasFS {
      get { return result.hasFS; }
    }
    public int FS {
      get { return result.FS; }
      set { SetFS(value); }
    }
    public Builder SetFS(int value) {
      PrepareBuilder();
      result.hasFS = true;
      result.fS_ = value;
      return this;
    }
    public Builder ClearFS() {
      PrepareBuilder();
      result.hasFS = false;
      result.fS_ = 0;
      return this;
    }
    
    public bool HasIsJiao {
      get { return result.hasIsJiao; }
    }
    public int IsJiao {
      get { return result.IsJiao; }
      set { SetIsJiao(value); }
    }
    public Builder SetIsJiao(int value) {
      PrepareBuilder();
      result.hasIsJiao = true;
      result.isJiao_ = value;
      return this;
    }
    public Builder ClearIsJiao() {
      PrepareBuilder();
      result.hasIsJiao = false;
      result.isJiao_ = 0;
      return this;
    }
    
    public bool HasIsPao {
      get { return result.hasIsPao; }
    }
    public int IsPao {
      get { return result.IsPao; }
      set { SetIsPao(value); }
    }
    public Builder SetIsPao(int value) {
      PrepareBuilder();
      result.hasIsPao = true;
      result.isPao_ = value;
      return this;
    }
    public Builder ClearIsPao() {
      PrepareBuilder();
      result.hasIsPao = false;
      result.isPao_ = 0;
      return this;
    }
    
    public bool HasDyFs {
      get { return result.hasDyFs; }
    }
    public int DyFs {
      get { return result.DyFs; }
      set { SetDyFs(value); }
    }
    public Builder SetDyFs(int value) {
      PrepareBuilder();
      result.hasDyFs = true;
      result.dyFs_ = value;
      return this;
    }
    public Builder ClearDyFs() {
      PrepareBuilder();
      result.hasDyFs = false;
      result.dyFs_ = 0;
      return this;
    }
    
    public bool HasHuType {
      get { return result.hasHuType; }
    }
    public int HuType {
      get { return result.HuType; }
      set { SetHuType(value); }
    }
    public Builder SetHuType(int value) {
      PrepareBuilder();
      result.hasHuType = true;
      result.huType_ = value;
      return this;
    }
    public Builder ClearHuType() {
      PrepareBuilder();
      result.hasHuType = false;
      result.huType_ = 0;
      return this;
    }
  }
  static UserJS() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnJS : pb::GeneratedMessage<ReturnJS, ReturnJS.Builder> {
  private ReturnJS() { }
  private static readonly ReturnJS defaultInstance = new ReturnJS().MakeReadOnly();
  private static readonly string[] _returnJSFieldNames = new string[] { "js" };
  private static readonly uint[] _returnJSFieldTags = new uint[] { 10 };
  public static ReturnJS DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnJS DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnJS ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnJS__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnJS, ReturnJS.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnJS__FieldAccessorTable; }
  }
  
  public const int JsFieldNumber = 1;
  private pbc::PopsicleList<global::UserJS> js_ = new pbc::PopsicleList<global::UserJS>();
  public scg::IList<global::UserJS> JsList {
    get { return js_; }
  }
  public int JsCount {
    get { return js_.Count; }
  }
  public global::UserJS GetJs(int index) {
    return js_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::UserJS element in JsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnJSFieldNames;
    if (js_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], js_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::UserJS element in JsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnJS ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnJS ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnJS ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnJS ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnJS ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnJS ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnJS ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnJS ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnJS ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnJS ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnJS MakeReadOnly() {
    js_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnJS prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnJS, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnJS cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnJS result;
    
    private ReturnJS PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnJS original = result;
        result = new ReturnJS();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnJS MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnJS.Descriptor; }
    }
    
    public override ReturnJS DefaultInstanceForType {
      get { return global::ReturnJS.DefaultInstance; }
    }
    
    public override ReturnJS BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnJS) {
        return MergeFrom((ReturnJS) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnJS other) {
      if (other == global::ReturnJS.DefaultInstance) return this;
      PrepareBuilder();
      if (other.js_.Count != 0) {
        result.js_.Add(other.js_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnJSFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnJSFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.js_, global::UserJS.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::UserJS> JsList {
      get { return PrepareBuilder().js_; }
    }
    public int JsCount {
      get { return result.JsCount; }
    }
    public global::UserJS GetJs(int index) {
      return result.GetJs(index);
    }
    public Builder SetJs(int index, global::UserJS value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.js_[index] = value;
      return this;
    }
    public Builder SetJs(int index, global::UserJS.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.js_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddJs(global::UserJS value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.js_.Add(value);
      return this;
    }
    public Builder AddJs(global::UserJS.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.js_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeJs(scg::IEnumerable<global::UserJS> values) {
      PrepareBuilder();
      result.js_.Add(values);
      return this;
    }
    public Builder ClearJs() {
      PrepareBuilder();
      result.js_.Clear();
      return this;
    }
  }
  static ReturnJS() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnPaiCount : pb::GeneratedMessage<ReturnPaiCount, ReturnPaiCount.Builder> {
  private ReturnPaiCount() { }
  private static readonly ReturnPaiCount defaultInstance = new ReturnPaiCount().MakeReadOnly();
  private static readonly string[] _returnPaiCountFieldNames = new string[] { "PaiCount" };
  private static readonly uint[] _returnPaiCountFieldTags = new uint[] { 8 };
  public static ReturnPaiCount DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnPaiCount DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnPaiCount ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnPaiCount__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnPaiCount, ReturnPaiCount.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnPaiCount__FieldAccessorTable; }
  }
  
  public const int PaiCountFieldNumber = 1;
  private bool hasPaiCount;
  private int paiCount_;
  public bool HasPaiCount {
    get { return hasPaiCount; }
  }
  public int PaiCount {
    get { return paiCount_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPaiCount) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnPaiCountFieldNames;
    if (hasPaiCount) {
      output.WriteInt32(1, field_names[0], PaiCount);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPaiCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, PaiCount);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnPaiCount ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnPaiCount ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnPaiCount ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnPaiCount ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnPaiCount ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnPaiCount ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnPaiCount ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnPaiCount ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnPaiCount ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnPaiCount ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnPaiCount MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnPaiCount prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnPaiCount, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnPaiCount cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnPaiCount result;
    
    private ReturnPaiCount PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnPaiCount original = result;
        result = new ReturnPaiCount();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnPaiCount MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnPaiCount.Descriptor; }
    }
    
    public override ReturnPaiCount DefaultInstanceForType {
      get { return global::ReturnPaiCount.DefaultInstance; }
    }
    
    public override ReturnPaiCount BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnPaiCount) {
        return MergeFrom((ReturnPaiCount) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnPaiCount other) {
      if (other == global::ReturnPaiCount.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPaiCount) {
        PaiCount = other.PaiCount;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnPaiCountFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnPaiCountFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPaiCount = input.ReadInt32(ref result.paiCount_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPaiCount {
      get { return result.hasPaiCount; }
    }
    public int PaiCount {
      get { return result.PaiCount; }
      set { SetPaiCount(value); }
    }
    public Builder SetPaiCount(int value) {
      PrepareBuilder();
      result.hasPaiCount = true;
      result.paiCount_ = value;
      return this;
    }
    public Builder ClearPaiCount() {
      PrepareBuilder();
      result.hasPaiCount = false;
      result.paiCount_ = 0;
      return this;
    }
  }
  static ReturnPaiCount() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class UserSPai : pb::GeneratedMessage<UserSPai, UserSPai.Builder> {
  private UserSPai() { }
  private static readonly UserSPai defaultInstance = new UserSPai().MakeReadOnly();
  private static readonly string[] _userSPaiFieldNames = new string[] { "fw", "mj" };
  private static readonly uint[] _userSPaiFieldTags = new uint[] { 8, 18 };
  public static UserSPai DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override UserSPai DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override UserSPai ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_UserSPai__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<UserSPai, UserSPai.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_UserSPai__FieldAccessorTable; }
  }
  
  public const int FwFieldNumber = 1;
  private bool hasFw;
  private int fw_;
  public bool HasFw {
    get { return hasFw; }
  }
  public int Fw {
    get { return fw_; }
  }
  
  public const int MjFieldNumber = 2;
  private pbc::PopsicleList<global::MaJiang> mj_ = new pbc::PopsicleList<global::MaJiang>();
  public scg::IList<global::MaJiang> MjList {
    get { return mj_; }
  }
  public int MjCount {
    get { return mj_.Count; }
  }
  public global::MaJiang GetMj(int index) {
    return mj_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasFw) return false;
      foreach (global::MaJiang element in MjList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _userSPaiFieldNames;
    if (hasFw) {
      output.WriteInt32(1, field_names[0], Fw);
    }
    if (mj_.Count > 0) {
      output.WriteMessageArray(2, field_names[1], mj_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasFw) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Fw);
    }
    foreach (global::MaJiang element in MjList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static UserSPai ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserSPai ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserSPai ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserSPai ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserSPai ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserSPai ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static UserSPai ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static UserSPai ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static UserSPai ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserSPai ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private UserSPai MakeReadOnly() {
    mj_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(UserSPai prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<UserSPai, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(UserSPai cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private UserSPai result;
    
    private UserSPai PrepareBuilder() {
      if (resultIsReadOnly) {
        UserSPai original = result;
        result = new UserSPai();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override UserSPai MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::UserSPai.Descriptor; }
    }
    
    public override UserSPai DefaultInstanceForType {
      get { return global::UserSPai.DefaultInstance; }
    }
    
    public override UserSPai BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is UserSPai) {
        return MergeFrom((UserSPai) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(UserSPai other) {
      if (other == global::UserSPai.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasFw) {
        Fw = other.Fw;
      }
      if (other.mj_.Count != 0) {
        result.mj_.Add(other.mj_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_userSPaiFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _userSPaiFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasFw = input.ReadInt32(ref result.fw_);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.mj_, global::MaJiang.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasFw {
      get { return result.hasFw; }
    }
    public int Fw {
      get { return result.Fw; }
      set { SetFw(value); }
    }
    public Builder SetFw(int value) {
      PrepareBuilder();
      result.hasFw = true;
      result.fw_ = value;
      return this;
    }
    public Builder ClearFw() {
      PrepareBuilder();
      result.hasFw = false;
      result.fw_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::MaJiang> MjList {
      get { return PrepareBuilder().mj_; }
    }
    public int MjCount {
      get { return result.MjCount; }
    }
    public global::MaJiang GetMj(int index) {
      return result.GetMj(index);
    }
    public Builder SetMj(int index, global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.mj_[index] = value;
      return this;
    }
    public Builder SetMj(int index, global::MaJiang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.mj_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddMj(global::MaJiang value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.mj_.Add(value);
      return this;
    }
    public Builder AddMj(global::MaJiang.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.mj_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeMj(scg::IEnumerable<global::MaJiang> values) {
      PrepareBuilder();
      result.mj_.Add(values);
      return this;
    }
    public Builder ClearMj() {
      PrepareBuilder();
      result.mj_.Clear();
      return this;
    }
  }
  static UserSPai() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnUserSPai : pb::GeneratedMessage<ReturnUserSPai, ReturnUserSPai.Builder> {
  private ReturnUserSPai() { }
  private static readonly ReturnUserSPai defaultInstance = new ReturnUserSPai().MakeReadOnly();
  private static readonly string[] _returnUserSPaiFieldNames = new string[] { "usp" };
  private static readonly uint[] _returnUserSPaiFieldTags = new uint[] { 10 };
  public static ReturnUserSPai DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnUserSPai DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnUserSPai ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnUserSPai__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnUserSPai, ReturnUserSPai.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnUserSPai__FieldAccessorTable; }
  }
  
  public const int UspFieldNumber = 1;
  private pbc::PopsicleList<global::UserSPai> usp_ = new pbc::PopsicleList<global::UserSPai>();
  public scg::IList<global::UserSPai> UspList {
    get { return usp_; }
  }
  public int UspCount {
    get { return usp_.Count; }
  }
  public global::UserSPai GetUsp(int index) {
    return usp_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::UserSPai element in UspList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnUserSPaiFieldNames;
    if (usp_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], usp_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::UserSPai element in UspList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnUserSPai ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnUserSPai ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnUserSPai ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnUserSPai ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnUserSPai ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnUserSPai ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnUserSPai ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnUserSPai ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnUserSPai ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnUserSPai ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnUserSPai MakeReadOnly() {
    usp_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnUserSPai prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnUserSPai, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnUserSPai cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnUserSPai result;
    
    private ReturnUserSPai PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnUserSPai original = result;
        result = new ReturnUserSPai();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnUserSPai MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnUserSPai.Descriptor; }
    }
    
    public override ReturnUserSPai DefaultInstanceForType {
      get { return global::ReturnUserSPai.DefaultInstance; }
    }
    
    public override ReturnUserSPai BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnUserSPai) {
        return MergeFrom((ReturnUserSPai) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnUserSPai other) {
      if (other == global::ReturnUserSPai.DefaultInstance) return this;
      PrepareBuilder();
      if (other.usp_.Count != 0) {
        result.usp_.Add(other.usp_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnUserSPaiFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnUserSPaiFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.usp_, global::UserSPai.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::UserSPai> UspList {
      get { return PrepareBuilder().usp_; }
    }
    public int UspCount {
      get { return result.UspCount; }
    }
    public global::UserSPai GetUsp(int index) {
      return result.GetUsp(index);
    }
    public Builder SetUsp(int index, global::UserSPai value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.usp_[index] = value;
      return this;
    }
    public Builder SetUsp(int index, global::UserSPai.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.usp_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddUsp(global::UserSPai value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.usp_.Add(value);
      return this;
    }
    public Builder AddUsp(global::UserSPai.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.usp_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeUsp(scg::IEnumerable<global::UserSPai> values) {
      PrepareBuilder();
      result.usp_.Add(values);
      return this;
    }
    public Builder ClearUsp() {
      PrepareBuilder();
      result.usp_.Clear();
      return this;
    }
  }
  static ReturnUserSPai() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SendAddRoomOne : pb::GeneratedMessage<SendAddRoomOne, SendAddRoomOne.Builder> {
  private SendAddRoomOne() { }
  private static readonly SendAddRoomOne defaultInstance = new SendAddRoomOne().MakeReadOnly();
  private static readonly string[] _sendAddRoomOneFieldNames = new string[] { "RoomID", "openid" };
  private static readonly uint[] _sendAddRoomOneFieldTags = new uint[] { 16, 10 };
  public static SendAddRoomOne DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SendAddRoomOne DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SendAddRoomOne ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_SendAddRoomOne__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SendAddRoomOne, SendAddRoomOne.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_SendAddRoomOne__FieldAccessorTable; }
  }
  
  public const int OpenidFieldNumber = 1;
  private bool hasOpenid;
  private string openid_ = "";
  public bool HasOpenid {
    get { return hasOpenid; }
  }
  public string Openid {
    get { return openid_; }
  }
  
  public const int RoomIDFieldNumber = 2;
  private bool hasRoomID;
  private int roomID_;
  public bool HasRoomID {
    get { return hasRoomID; }
  }
  public int RoomID {
    get { return roomID_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasOpenid) return false;
      if (!hasRoomID) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sendAddRoomOneFieldNames;
    if (hasOpenid) {
      output.WriteString(1, field_names[1], Openid);
    }
    if (hasRoomID) {
      output.WriteInt32(2, field_names[0], RoomID);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasOpenid) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Openid);
    }
    if (hasRoomID) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, RoomID);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SendAddRoomOne ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendAddRoomOne ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendAddRoomOne ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendAddRoomOne ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendAddRoomOne ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendAddRoomOne ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SendAddRoomOne ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SendAddRoomOne ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SendAddRoomOne ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendAddRoomOne ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SendAddRoomOne MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SendAddRoomOne prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SendAddRoomOne, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SendAddRoomOne cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SendAddRoomOne result;
    
    private SendAddRoomOne PrepareBuilder() {
      if (resultIsReadOnly) {
        SendAddRoomOne original = result;
        result = new SendAddRoomOne();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SendAddRoomOne MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SendAddRoomOne.Descriptor; }
    }
    
    public override SendAddRoomOne DefaultInstanceForType {
      get { return global::SendAddRoomOne.DefaultInstance; }
    }
    
    public override SendAddRoomOne BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SendAddRoomOne) {
        return MergeFrom((SendAddRoomOne) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SendAddRoomOne other) {
      if (other == global::SendAddRoomOne.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasOpenid) {
        Openid = other.Openid;
      }
      if (other.HasRoomID) {
        RoomID = other.RoomID;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sendAddRoomOneFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sendAddRoomOneFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasOpenid = input.ReadString(ref result.openid_);
            break;
          }
          case 16: {
            result.hasRoomID = input.ReadInt32(ref result.roomID_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasOpenid {
      get { return result.hasOpenid; }
    }
    public string Openid {
      get { return result.Openid; }
      set { SetOpenid(value); }
    }
    public Builder SetOpenid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOpenid = true;
      result.openid_ = value;
      return this;
    }
    public Builder ClearOpenid() {
      PrepareBuilder();
      result.hasOpenid = false;
      result.openid_ = "";
      return this;
    }
    
    public bool HasRoomID {
      get { return result.hasRoomID; }
    }
    public int RoomID {
      get { return result.RoomID; }
      set { SetRoomID(value); }
    }
    public Builder SetRoomID(int value) {
      PrepareBuilder();
      result.hasRoomID = true;
      result.roomID_ = value;
      return this;
    }
    public Builder ClearRoomID() {
      PrepareBuilder();
      result.hasRoomID = false;
      result.roomID_ = 0;
      return this;
    }
  }
  static SendAddRoomOne() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnRoomAdd : pb::GeneratedMessage<ReturnRoomAdd, ReturnRoomAdd.Builder> {
  private ReturnRoomAdd() { }
  private static readonly ReturnRoomAdd defaultInstance = new ReturnRoomAdd().MakeReadOnly();
  private static readonly string[] _returnRoomAddFieldNames = new string[] { "Start" };
  private static readonly uint[] _returnRoomAddFieldTags = new uint[] { 8 };
  public static ReturnRoomAdd DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnRoomAdd DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnRoomAdd ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnRoomAdd__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnRoomAdd, ReturnRoomAdd.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnRoomAdd__FieldAccessorTable; }
  }
  
  public const int StartFieldNumber = 1;
  private bool hasStart;
  private int start_;
  public bool HasStart {
    get { return hasStart; }
  }
  public int Start {
    get { return start_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasStart) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnRoomAddFieldNames;
    if (hasStart) {
      output.WriteInt32(1, field_names[0], Start);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStart) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Start);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnRoomAdd ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnRoomAdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnRoomAdd ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnRoomAdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnRoomAdd ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnRoomAdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnRoomAdd ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnRoomAdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnRoomAdd ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnRoomAdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnRoomAdd MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnRoomAdd prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnRoomAdd, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnRoomAdd cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnRoomAdd result;
    
    private ReturnRoomAdd PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnRoomAdd original = result;
        result = new ReturnRoomAdd();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnRoomAdd MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnRoomAdd.Descriptor; }
    }
    
    public override ReturnRoomAdd DefaultInstanceForType {
      get { return global::ReturnRoomAdd.DefaultInstance; }
    }
    
    public override ReturnRoomAdd BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnRoomAdd) {
        return MergeFrom((ReturnRoomAdd) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnRoomAdd other) {
      if (other == global::ReturnRoomAdd.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStart) {
        Start = other.Start;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnRoomAddFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnRoomAddFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasStart = input.ReadInt32(ref result.start_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStart {
      get { return result.hasStart; }
    }
    public int Start {
      get { return result.Start; }
      set { SetStart(value); }
    }
    public Builder SetStart(int value) {
      PrepareBuilder();
      result.hasStart = true;
      result.start_ = value;
      return this;
    }
    public Builder ClearStart() {
      PrepareBuilder();
      result.hasStart = false;
      result.start_ = 0;
      return this;
    }
  }
  static ReturnRoomAdd() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnDis : pb::GeneratedMessage<ReturnDis, ReturnDis.Builder> {
  private ReturnDis() { }
  private static readonly ReturnDis defaultInstance = new ReturnDis().MakeReadOnly();
  private static readonly string[] _returnDisFieldNames = new string[] { "FW", "dis" };
  private static readonly uint[] _returnDisFieldTags = new uint[] { 8, 18 };
  public static ReturnDis DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnDis DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnDis ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnDis__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnDis, ReturnDis.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnDis__FieldAccessorTable; }
  }
  
  public const int FWFieldNumber = 1;
  private bool hasFW;
  private int fW_;
  public bool HasFW {
    get { return hasFW; }
  }
  public int FW {
    get { return fW_; }
  }
  
  public const int DisFieldNumber = 2;
  private bool hasDis;
  private string dis_ = "";
  public bool HasDis {
    get { return hasDis; }
  }
  public string Dis {
    get { return dis_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasFW) return false;
      if (!hasDis) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnDisFieldNames;
    if (hasFW) {
      output.WriteInt32(1, field_names[0], FW);
    }
    if (hasDis) {
      output.WriteString(2, field_names[1], Dis);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasFW) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, FW);
    }
    if (hasDis) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Dis);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnDis ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnDis ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnDis ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnDis ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnDis ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnDis ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnDis ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnDis ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnDis ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnDis ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnDis MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnDis prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnDis, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnDis cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnDis result;
    
    private ReturnDis PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnDis original = result;
        result = new ReturnDis();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnDis MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnDis.Descriptor; }
    }
    
    public override ReturnDis DefaultInstanceForType {
      get { return global::ReturnDis.DefaultInstance; }
    }
    
    public override ReturnDis BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnDis) {
        return MergeFrom((ReturnDis) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnDis other) {
      if (other == global::ReturnDis.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasFW) {
        FW = other.FW;
      }
      if (other.HasDis) {
        Dis = other.Dis;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnDisFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnDisFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasFW = input.ReadInt32(ref result.fW_);
            break;
          }
          case 18: {
            result.hasDis = input.ReadString(ref result.dis_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasFW {
      get { return result.hasFW; }
    }
    public int FW {
      get { return result.FW; }
      set { SetFW(value); }
    }
    public Builder SetFW(int value) {
      PrepareBuilder();
      result.hasFW = true;
      result.fW_ = value;
      return this;
    }
    public Builder ClearFW() {
      PrepareBuilder();
      result.hasFW = false;
      result.fW_ = 0;
      return this;
    }
    
    public bool HasDis {
      get { return result.hasDis; }
    }
    public string Dis {
      get { return result.Dis; }
      set { SetDis(value); }
    }
    public Builder SetDis(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDis = true;
      result.dis_ = value;
      return this;
    }
    public Builder ClearDis() {
      PrepareBuilder();
      result.hasDis = false;
      result.dis_ = "";
      return this;
    }
  }
  static ReturnDis() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnIsJ : pb::GeneratedMessage<ReturnIsJ, ReturnIsJ.Builder> {
  private ReturnIsJ() { }
  private static readonly ReturnIsJ defaultInstance = new ReturnIsJ().MakeReadOnly();
  private static readonly string[] _returnIsJFieldNames = new string[] { "FWO", "FWW" };
  private static readonly uint[] _returnIsJFieldTags = new uint[] { 8, 16 };
  public static ReturnIsJ DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnIsJ DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnIsJ ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnIsJ__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnIsJ, ReturnIsJ.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnIsJ__FieldAccessorTable; }
  }
  
  public const int FWOFieldNumber = 1;
  private bool hasFWO;
  private int fWO_;
  public bool HasFWO {
    get { return hasFWO; }
  }
  public int FWO {
    get { return fWO_; }
  }
  
  public const int FWWFieldNumber = 2;
  private bool hasFWW;
  private int fWW_;
  public bool HasFWW {
    get { return hasFWW; }
  }
  public int FWW {
    get { return fWW_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasFWO) return false;
      if (!hasFWW) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnIsJFieldNames;
    if (hasFWO) {
      output.WriteInt32(1, field_names[0], FWO);
    }
    if (hasFWW) {
      output.WriteInt32(2, field_names[1], FWW);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasFWO) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, FWO);
    }
    if (hasFWW) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, FWW);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnIsJ ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnIsJ ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnIsJ ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnIsJ ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnIsJ ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnIsJ ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnIsJ ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnIsJ ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnIsJ ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnIsJ ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnIsJ MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnIsJ prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnIsJ, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnIsJ cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnIsJ result;
    
    private ReturnIsJ PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnIsJ original = result;
        result = new ReturnIsJ();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnIsJ MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnIsJ.Descriptor; }
    }
    
    public override ReturnIsJ DefaultInstanceForType {
      get { return global::ReturnIsJ.DefaultInstance; }
    }
    
    public override ReturnIsJ BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnIsJ) {
        return MergeFrom((ReturnIsJ) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnIsJ other) {
      if (other == global::ReturnIsJ.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasFWO) {
        FWO = other.FWO;
      }
      if (other.HasFWW) {
        FWW = other.FWW;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnIsJFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnIsJFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasFWO = input.ReadInt32(ref result.fWO_);
            break;
          }
          case 16: {
            result.hasFWW = input.ReadInt32(ref result.fWW_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasFWO {
      get { return result.hasFWO; }
    }
    public int FWO {
      get { return result.FWO; }
      set { SetFWO(value); }
    }
    public Builder SetFWO(int value) {
      PrepareBuilder();
      result.hasFWO = true;
      result.fWO_ = value;
      return this;
    }
    public Builder ClearFWO() {
      PrepareBuilder();
      result.hasFWO = false;
      result.fWO_ = 0;
      return this;
    }
    
    public bool HasFWW {
      get { return result.hasFWW; }
    }
    public int FWW {
      get { return result.FWW; }
      set { SetFWW(value); }
    }
    public Builder SetFWW(int value) {
      PrepareBuilder();
      result.hasFWW = true;
      result.fWW_ = value;
      return this;
    }
    public Builder ClearFWW() {
      PrepareBuilder();
      result.hasFWW = false;
      result.fWW_ = 0;
      return this;
    }
  }
  static ReturnIsJ() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnIPSame : pb::GeneratedMessage<ReturnIPSame, ReturnIPSame.Builder> {
  private ReturnIPSame() { }
  private static readonly ReturnIPSame defaultInstance = new ReturnIPSame().MakeReadOnly();
  private static readonly string[] _returnIPSameFieldNames = new string[] { "FW" };
  private static readonly uint[] _returnIPSameFieldTags = new uint[] { 8 };
  public static ReturnIPSame DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnIPSame DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnIPSame ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnIPSame__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnIPSame, ReturnIPSame.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnIPSame__FieldAccessorTable; }
  }
  
  public const int FWFieldNumber = 1;
  private pbc::PopsicleList<int> fW_ = new pbc::PopsicleList<int>();
  public scg::IList<int> FWList {
    get { return pbc::Lists.AsReadOnly(fW_); }
  }
  public int FWCount {
    get { return fW_.Count; }
  }
  public int GetFW(int index) {
    return fW_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnIPSameFieldNames;
    if (fW_.Count > 0) {
      output.WriteInt32Array(1, field_names[0], fW_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    {
      int dataSize = 0;
      foreach (int element in FWList) {
        dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * fW_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnIPSame ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnIPSame ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnIPSame ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnIPSame ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnIPSame ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnIPSame ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnIPSame ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnIPSame ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnIPSame ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnIPSame ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnIPSame MakeReadOnly() {
    fW_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnIPSame prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnIPSame, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnIPSame cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnIPSame result;
    
    private ReturnIPSame PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnIPSame original = result;
        result = new ReturnIPSame();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnIPSame MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnIPSame.Descriptor; }
    }
    
    public override ReturnIPSame DefaultInstanceForType {
      get { return global::ReturnIPSame.DefaultInstance; }
    }
    
    public override ReturnIPSame BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnIPSame) {
        return MergeFrom((ReturnIPSame) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnIPSame other) {
      if (other == global::ReturnIPSame.DefaultInstance) return this;
      PrepareBuilder();
      if (other.fW_.Count != 0) {
        result.fW_.Add(other.fW_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnIPSameFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnIPSameFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10:
          case 8: {
            input.ReadInt32Array(tag, field_name, result.fW_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<int> FWList {
      get { return PrepareBuilder().fW_; }
    }
    public int FWCount {
      get { return result.FWCount; }
    }
    public int GetFW(int index) {
      return result.GetFW(index);
    }
    public Builder SetFW(int index, int value) {
      PrepareBuilder();
      result.fW_[index] = value;
      return this;
    }
    public Builder AddFW(int value) {
      PrepareBuilder();
      result.fW_.Add(value);
      return this;
    }
    public Builder AddRangeFW(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.fW_.Add(values);
      return this;
    }
    public Builder ClearFW() {
      PrepareBuilder();
      result.fW_.Clear();
      return this;
    }
  }
  static ReturnIPSame() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SendConfirmationStarts : pb::GeneratedMessage<SendConfirmationStarts, SendConfirmationStarts.Builder> {
  private SendConfirmationStarts() { }
  private static readonly SendConfirmationStarts defaultInstance = new SendConfirmationStarts().MakeReadOnly();
  private static readonly string[] _sendConfirmationStartsFieldNames = new string[] { "RoomID", "openid" };
  private static readonly uint[] _sendConfirmationStartsFieldTags = new uint[] { 16, 10 };
  public static SendConfirmationStarts DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SendConfirmationStarts DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SendConfirmationStarts ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_SendConfirmationStarts__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SendConfirmationStarts, SendConfirmationStarts.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_SendConfirmationStarts__FieldAccessorTable; }
  }
  
  public const int OpenidFieldNumber = 1;
  private bool hasOpenid;
  private string openid_ = "";
  public bool HasOpenid {
    get { return hasOpenid; }
  }
  public string Openid {
    get { return openid_; }
  }
  
  public const int RoomIDFieldNumber = 2;
  private bool hasRoomID;
  private int roomID_;
  public bool HasRoomID {
    get { return hasRoomID; }
  }
  public int RoomID {
    get { return roomID_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasOpenid) return false;
      if (!hasRoomID) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sendConfirmationStartsFieldNames;
    if (hasOpenid) {
      output.WriteString(1, field_names[1], Openid);
    }
    if (hasRoomID) {
      output.WriteInt32(2, field_names[0], RoomID);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasOpenid) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Openid);
    }
    if (hasRoomID) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, RoomID);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SendConfirmationStarts ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendConfirmationStarts ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendConfirmationStarts ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendConfirmationStarts ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendConfirmationStarts ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendConfirmationStarts ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SendConfirmationStarts ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SendConfirmationStarts ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SendConfirmationStarts ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendConfirmationStarts ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SendConfirmationStarts MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SendConfirmationStarts prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SendConfirmationStarts, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SendConfirmationStarts cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SendConfirmationStarts result;
    
    private SendConfirmationStarts PrepareBuilder() {
      if (resultIsReadOnly) {
        SendConfirmationStarts original = result;
        result = new SendConfirmationStarts();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SendConfirmationStarts MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SendConfirmationStarts.Descriptor; }
    }
    
    public override SendConfirmationStarts DefaultInstanceForType {
      get { return global::SendConfirmationStarts.DefaultInstance; }
    }
    
    public override SendConfirmationStarts BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SendConfirmationStarts) {
        return MergeFrom((SendConfirmationStarts) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SendConfirmationStarts other) {
      if (other == global::SendConfirmationStarts.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasOpenid) {
        Openid = other.Openid;
      }
      if (other.HasRoomID) {
        RoomID = other.RoomID;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sendConfirmationStartsFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sendConfirmationStartsFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasOpenid = input.ReadString(ref result.openid_);
            break;
          }
          case 16: {
            result.hasRoomID = input.ReadInt32(ref result.roomID_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasOpenid {
      get { return result.hasOpenid; }
    }
    public string Openid {
      get { return result.Openid; }
      set { SetOpenid(value); }
    }
    public Builder SetOpenid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOpenid = true;
      result.openid_ = value;
      return this;
    }
    public Builder ClearOpenid() {
      PrepareBuilder();
      result.hasOpenid = false;
      result.openid_ = "";
      return this;
    }
    
    public bool HasRoomID {
      get { return result.hasRoomID; }
    }
    public int RoomID {
      get { return result.RoomID; }
      set { SetRoomID(value); }
    }
    public Builder SetRoomID(int value) {
      PrepareBuilder();
      result.hasRoomID = true;
      result.roomID_ = value;
      return this;
    }
    public Builder ClearRoomID() {
      PrepareBuilder();
      result.hasRoomID = false;
      result.roomID_ = 0;
      return this;
    }
  }
  static SendConfirmationStarts() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SendAnnouncement : pb::GeneratedMessage<SendAnnouncement, SendAnnouncement.Builder> {
  private SendAnnouncement() { }
  private static readonly SendAnnouncement defaultInstance = new SendAnnouncement().MakeReadOnly();
  private static readonly string[] _sendAnnouncementFieldNames = new string[] { "RoomID", "openid" };
  private static readonly uint[] _sendAnnouncementFieldTags = new uint[] { 16, 10 };
  public static SendAnnouncement DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SendAnnouncement DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SendAnnouncement ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_SendAnnouncement__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SendAnnouncement, SendAnnouncement.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_SendAnnouncement__FieldAccessorTable; }
  }
  
  public const int OpenidFieldNumber = 1;
  private bool hasOpenid;
  private string openid_ = "";
  public bool HasOpenid {
    get { return hasOpenid; }
  }
  public string Openid {
    get { return openid_; }
  }
  
  public const int RoomIDFieldNumber = 2;
  private bool hasRoomID;
  private int roomID_;
  public bool HasRoomID {
    get { return hasRoomID; }
  }
  public int RoomID {
    get { return roomID_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasOpenid) return false;
      if (!hasRoomID) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sendAnnouncementFieldNames;
    if (hasOpenid) {
      output.WriteString(1, field_names[1], Openid);
    }
    if (hasRoomID) {
      output.WriteInt32(2, field_names[0], RoomID);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasOpenid) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Openid);
    }
    if (hasRoomID) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, RoomID);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SendAnnouncement ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendAnnouncement ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendAnnouncement ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendAnnouncement ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendAnnouncement ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendAnnouncement ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SendAnnouncement ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SendAnnouncement ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SendAnnouncement ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendAnnouncement ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SendAnnouncement MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SendAnnouncement prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SendAnnouncement, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SendAnnouncement cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SendAnnouncement result;
    
    private SendAnnouncement PrepareBuilder() {
      if (resultIsReadOnly) {
        SendAnnouncement original = result;
        result = new SendAnnouncement();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SendAnnouncement MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SendAnnouncement.Descriptor; }
    }
    
    public override SendAnnouncement DefaultInstanceForType {
      get { return global::SendAnnouncement.DefaultInstance; }
    }
    
    public override SendAnnouncement BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SendAnnouncement) {
        return MergeFrom((SendAnnouncement) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SendAnnouncement other) {
      if (other == global::SendAnnouncement.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasOpenid) {
        Openid = other.Openid;
      }
      if (other.HasRoomID) {
        RoomID = other.RoomID;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sendAnnouncementFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sendAnnouncementFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasOpenid = input.ReadString(ref result.openid_);
            break;
          }
          case 16: {
            result.hasRoomID = input.ReadInt32(ref result.roomID_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasOpenid {
      get { return result.hasOpenid; }
    }
    public string Openid {
      get { return result.Openid; }
      set { SetOpenid(value); }
    }
    public Builder SetOpenid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOpenid = true;
      result.openid_ = value;
      return this;
    }
    public Builder ClearOpenid() {
      PrepareBuilder();
      result.hasOpenid = false;
      result.openid_ = "";
      return this;
    }
    
    public bool HasRoomID {
      get { return result.hasRoomID; }
    }
    public int RoomID {
      get { return result.RoomID; }
      set { SetRoomID(value); }
    }
    public Builder SetRoomID(int value) {
      PrepareBuilder();
      result.hasRoomID = true;
      result.roomID_ = value;
      return this;
    }
    public Builder ClearRoomID() {
      PrepareBuilder();
      result.hasRoomID = false;
      result.roomID_ = 0;
      return this;
    }
  }
  static SendAnnouncement() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnAnnouncement : pb::GeneratedMessage<ReturnAnnouncement, ReturnAnnouncement.Builder> {
  private ReturnAnnouncement() { }
  private static readonly ReturnAnnouncement defaultInstance = new ReturnAnnouncement().MakeReadOnly();
  private static readonly string[] _returnAnnouncementFieldNames = new string[] { "announcement" };
  private static readonly uint[] _returnAnnouncementFieldTags = new uint[] { 10 };
  public static ReturnAnnouncement DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnAnnouncement DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnAnnouncement ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnAnnouncement__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnAnnouncement, ReturnAnnouncement.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnAnnouncement__FieldAccessorTable; }
  }
  
  public const int AnnouncementFieldNumber = 1;
  private pbc::PopsicleList<global::AnnouncementInfo> announcement_ = new pbc::PopsicleList<global::AnnouncementInfo>();
  public scg::IList<global::AnnouncementInfo> AnnouncementList {
    get { return announcement_; }
  }
  public int AnnouncementCount {
    get { return announcement_.Count; }
  }
  public global::AnnouncementInfo GetAnnouncement(int index) {
    return announcement_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::AnnouncementInfo element in AnnouncementList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnAnnouncementFieldNames;
    if (announcement_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], announcement_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::AnnouncementInfo element in AnnouncementList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnAnnouncement ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnAnnouncement ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnAnnouncement ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnAnnouncement ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnAnnouncement ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnAnnouncement ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnAnnouncement ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnAnnouncement ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnAnnouncement ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnAnnouncement ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnAnnouncement MakeReadOnly() {
    announcement_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnAnnouncement prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnAnnouncement, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnAnnouncement cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnAnnouncement result;
    
    private ReturnAnnouncement PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnAnnouncement original = result;
        result = new ReturnAnnouncement();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnAnnouncement MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnAnnouncement.Descriptor; }
    }
    
    public override ReturnAnnouncement DefaultInstanceForType {
      get { return global::ReturnAnnouncement.DefaultInstance; }
    }
    
    public override ReturnAnnouncement BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnAnnouncement) {
        return MergeFrom((ReturnAnnouncement) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnAnnouncement other) {
      if (other == global::ReturnAnnouncement.DefaultInstance) return this;
      PrepareBuilder();
      if (other.announcement_.Count != 0) {
        result.announcement_.Add(other.announcement_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnAnnouncementFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnAnnouncementFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.announcement_, global::AnnouncementInfo.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::AnnouncementInfo> AnnouncementList {
      get { return PrepareBuilder().announcement_; }
    }
    public int AnnouncementCount {
      get { return result.AnnouncementCount; }
    }
    public global::AnnouncementInfo GetAnnouncement(int index) {
      return result.GetAnnouncement(index);
    }
    public Builder SetAnnouncement(int index, global::AnnouncementInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.announcement_[index] = value;
      return this;
    }
    public Builder SetAnnouncement(int index, global::AnnouncementInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.announcement_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddAnnouncement(global::AnnouncementInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.announcement_.Add(value);
      return this;
    }
    public Builder AddAnnouncement(global::AnnouncementInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.announcement_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeAnnouncement(scg::IEnumerable<global::AnnouncementInfo> values) {
      PrepareBuilder();
      result.announcement_.Add(values);
      return this;
    }
    public Builder ClearAnnouncement() {
      PrepareBuilder();
      result.announcement_.Clear();
      return this;
    }
  }
  static ReturnAnnouncement() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class AnnouncementInfo : pb::GeneratedMessage<AnnouncementInfo, AnnouncementInfo.Builder> {
  private AnnouncementInfo() { }
  private static readonly AnnouncementInfo defaultInstance = new AnnouncementInfo().MakeReadOnly();
  private static readonly string[] _announcementInfoFieldNames = new string[] { "Content", "Title" };
  private static readonly uint[] _announcementInfoFieldTags = new uint[] { 18, 10 };
  public static AnnouncementInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override AnnouncementInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override AnnouncementInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_AnnouncementInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<AnnouncementInfo, AnnouncementInfo.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_AnnouncementInfo__FieldAccessorTable; }
  }
  
  public const int TitleFieldNumber = 1;
  private bool hasTitle;
  private string title_ = "";
  public bool HasTitle {
    get { return hasTitle; }
  }
  public string Title {
    get { return title_; }
  }
  
  public const int ContentFieldNumber = 2;
  private bool hasContent;
  private string content_ = "";
  public bool HasContent {
    get { return hasContent; }
  }
  public string Content {
    get { return content_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasTitle) return false;
      if (!hasContent) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _announcementInfoFieldNames;
    if (hasTitle) {
      output.WriteString(1, field_names[1], Title);
    }
    if (hasContent) {
      output.WriteString(2, field_names[0], Content);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasTitle) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Title);
    }
    if (hasContent) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Content);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static AnnouncementInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static AnnouncementInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static AnnouncementInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static AnnouncementInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static AnnouncementInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static AnnouncementInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static AnnouncementInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static AnnouncementInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static AnnouncementInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static AnnouncementInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private AnnouncementInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(AnnouncementInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<AnnouncementInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(AnnouncementInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private AnnouncementInfo result;
    
    private AnnouncementInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        AnnouncementInfo original = result;
        result = new AnnouncementInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override AnnouncementInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::AnnouncementInfo.Descriptor; }
    }
    
    public override AnnouncementInfo DefaultInstanceForType {
      get { return global::AnnouncementInfo.DefaultInstance; }
    }
    
    public override AnnouncementInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is AnnouncementInfo) {
        return MergeFrom((AnnouncementInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(AnnouncementInfo other) {
      if (other == global::AnnouncementInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasTitle) {
        Title = other.Title;
      }
      if (other.HasContent) {
        Content = other.Content;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_announcementInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _announcementInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasTitle = input.ReadString(ref result.title_);
            break;
          }
          case 18: {
            result.hasContent = input.ReadString(ref result.content_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasTitle {
      get { return result.hasTitle; }
    }
    public string Title {
      get { return result.Title; }
      set { SetTitle(value); }
    }
    public Builder SetTitle(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTitle = true;
      result.title_ = value;
      return this;
    }
    public Builder ClearTitle() {
      PrepareBuilder();
      result.hasTitle = false;
      result.title_ = "";
      return this;
    }
    
    public bool HasContent {
      get { return result.hasContent; }
    }
    public string Content {
      get { return result.Content; }
      set { SetContent(value); }
    }
    public Builder SetContent(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasContent = true;
      result.content_ = value;
      return this;
    }
    public Builder ClearContent() {
      PrepareBuilder();
      result.hasContent = false;
      result.content_ = "";
      return this;
    }
  }
  static AnnouncementInfo() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SendVoice : pb::GeneratedMessage<SendVoice, SendVoice.Builder> {
  private SendVoice() { }
  private static readonly SendVoice defaultInstance = new SendVoice().MakeReadOnly();
  private static readonly string[] _sendVoiceFieldNames = new string[] { "RoomID", "VoiceNumber", "openid" };
  private static readonly uint[] _sendVoiceFieldTags = new uint[] { 8, 24, 18 };
  public static SendVoice DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SendVoice DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SendVoice ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_SendVoice__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SendVoice, SendVoice.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_SendVoice__FieldAccessorTable; }
  }
  
  public const int RoomIDFieldNumber = 1;
  private bool hasRoomID;
  private int roomID_;
  public bool HasRoomID {
    get { return hasRoomID; }
  }
  public int RoomID {
    get { return roomID_; }
  }
  
  public const int OpenidFieldNumber = 2;
  private bool hasOpenid;
  private string openid_ = "";
  public bool HasOpenid {
    get { return hasOpenid; }
  }
  public string Openid {
    get { return openid_; }
  }
  
  public const int VoiceNumberFieldNumber = 3;
  private bool hasVoiceNumber;
  private int voiceNumber_;
  public bool HasVoiceNumber {
    get { return hasVoiceNumber; }
  }
  public int VoiceNumber {
    get { return voiceNumber_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasRoomID) return false;
      if (!hasOpenid) return false;
      if (!hasVoiceNumber) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sendVoiceFieldNames;
    if (hasRoomID) {
      output.WriteInt32(1, field_names[0], RoomID);
    }
    if (hasOpenid) {
      output.WriteString(2, field_names[2], Openid);
    }
    if (hasVoiceNumber) {
      output.WriteInt32(3, field_names[1], VoiceNumber);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasRoomID) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, RoomID);
    }
    if (hasOpenid) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Openid);
    }
    if (hasVoiceNumber) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, VoiceNumber);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SendVoice ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendVoice ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendVoice ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendVoice ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendVoice ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendVoice ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SendVoice ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SendVoice ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SendVoice ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendVoice ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SendVoice MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SendVoice prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SendVoice, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SendVoice cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SendVoice result;
    
    private SendVoice PrepareBuilder() {
      if (resultIsReadOnly) {
        SendVoice original = result;
        result = new SendVoice();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SendVoice MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SendVoice.Descriptor; }
    }
    
    public override SendVoice DefaultInstanceForType {
      get { return global::SendVoice.DefaultInstance; }
    }
    
    public override SendVoice BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SendVoice) {
        return MergeFrom((SendVoice) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SendVoice other) {
      if (other == global::SendVoice.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasRoomID) {
        RoomID = other.RoomID;
      }
      if (other.HasOpenid) {
        Openid = other.Openid;
      }
      if (other.HasVoiceNumber) {
        VoiceNumber = other.VoiceNumber;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sendVoiceFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sendVoiceFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasRoomID = input.ReadInt32(ref result.roomID_);
            break;
          }
          case 18: {
            result.hasOpenid = input.ReadString(ref result.openid_);
            break;
          }
          case 24: {
            result.hasVoiceNumber = input.ReadInt32(ref result.voiceNumber_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasRoomID {
      get { return result.hasRoomID; }
    }
    public int RoomID {
      get { return result.RoomID; }
      set { SetRoomID(value); }
    }
    public Builder SetRoomID(int value) {
      PrepareBuilder();
      result.hasRoomID = true;
      result.roomID_ = value;
      return this;
    }
    public Builder ClearRoomID() {
      PrepareBuilder();
      result.hasRoomID = false;
      result.roomID_ = 0;
      return this;
    }
    
    public bool HasOpenid {
      get { return result.hasOpenid; }
    }
    public string Openid {
      get { return result.Openid; }
      set { SetOpenid(value); }
    }
    public Builder SetOpenid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOpenid = true;
      result.openid_ = value;
      return this;
    }
    public Builder ClearOpenid() {
      PrepareBuilder();
      result.hasOpenid = false;
      result.openid_ = "";
      return this;
    }
    
    public bool HasVoiceNumber {
      get { return result.hasVoiceNumber; }
    }
    public int VoiceNumber {
      get { return result.VoiceNumber; }
      set { SetVoiceNumber(value); }
    }
    public Builder SetVoiceNumber(int value) {
      PrepareBuilder();
      result.hasVoiceNumber = true;
      result.voiceNumber_ = value;
      return this;
    }
    public Builder ClearVoiceNumber() {
      PrepareBuilder();
      result.hasVoiceNumber = false;
      result.voiceNumber_ = 0;
      return this;
    }
  }
  static SendVoice() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnVoice : pb::GeneratedMessage<ReturnVoice, ReturnVoice.Builder> {
  private ReturnVoice() { }
  private static readonly ReturnVoice defaultInstance = new ReturnVoice().MakeReadOnly();
  private static readonly string[] _returnVoiceFieldNames = new string[] { "FW", "VoiceNumber" };
  private static readonly uint[] _returnVoiceFieldTags = new uint[] { 8, 16 };
  public static ReturnVoice DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnVoice DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnVoice ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnVoice__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnVoice, ReturnVoice.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnVoice__FieldAccessorTable; }
  }
  
  public const int FWFieldNumber = 1;
  private bool hasFW;
  private int fW_;
  public bool HasFW {
    get { return hasFW; }
  }
  public int FW {
    get { return fW_; }
  }
  
  public const int VoiceNumberFieldNumber = 2;
  private bool hasVoiceNumber;
  private int voiceNumber_;
  public bool HasVoiceNumber {
    get { return hasVoiceNumber; }
  }
  public int VoiceNumber {
    get { return voiceNumber_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasFW) return false;
      if (!hasVoiceNumber) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnVoiceFieldNames;
    if (hasFW) {
      output.WriteInt32(1, field_names[0], FW);
    }
    if (hasVoiceNumber) {
      output.WriteInt32(2, field_names[1], VoiceNumber);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasFW) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, FW);
    }
    if (hasVoiceNumber) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, VoiceNumber);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnVoice ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnVoice ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnVoice ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnVoice ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnVoice ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnVoice ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnVoice ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnVoice ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnVoice ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnVoice ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnVoice MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnVoice prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnVoice, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnVoice cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnVoice result;
    
    private ReturnVoice PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnVoice original = result;
        result = new ReturnVoice();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnVoice MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnVoice.Descriptor; }
    }
    
    public override ReturnVoice DefaultInstanceForType {
      get { return global::ReturnVoice.DefaultInstance; }
    }
    
    public override ReturnVoice BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnVoice) {
        return MergeFrom((ReturnVoice) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnVoice other) {
      if (other == global::ReturnVoice.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasFW) {
        FW = other.FW;
      }
      if (other.HasVoiceNumber) {
        VoiceNumber = other.VoiceNumber;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnVoiceFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnVoiceFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasFW = input.ReadInt32(ref result.fW_);
            break;
          }
          case 16: {
            result.hasVoiceNumber = input.ReadInt32(ref result.voiceNumber_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasFW {
      get { return result.hasFW; }
    }
    public int FW {
      get { return result.FW; }
      set { SetFW(value); }
    }
    public Builder SetFW(int value) {
      PrepareBuilder();
      result.hasFW = true;
      result.fW_ = value;
      return this;
    }
    public Builder ClearFW() {
      PrepareBuilder();
      result.hasFW = false;
      result.fW_ = 0;
      return this;
    }
    
    public bool HasVoiceNumber {
      get { return result.hasVoiceNumber; }
    }
    public int VoiceNumber {
      get { return result.VoiceNumber; }
      set { SetVoiceNumber(value); }
    }
    public Builder SetVoiceNumber(int value) {
      PrepareBuilder();
      result.hasVoiceNumber = true;
      result.voiceNumber_ = value;
      return this;
    }
    public Builder ClearVoiceNumber() {
      PrepareBuilder();
      result.hasVoiceNumber = false;
      result.voiceNumber_ = 0;
      return this;
    }
  }
  static ReturnVoice() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ConnectionStatusInfo : pb::GeneratedMessage<ConnectionStatusInfo, ConnectionStatusInfo.Builder> {
  private ConnectionStatusInfo() { }
  private static readonly ConnectionStatusInfo defaultInstance = new ConnectionStatusInfo().MakeReadOnly();
  private static readonly string[] _connectionStatusInfoFieldNames = new string[] { "ConnectionStatus", "FW" };
  private static readonly uint[] _connectionStatusInfoFieldTags = new uint[] { 16, 8 };
  public static ConnectionStatusInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ConnectionStatusInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ConnectionStatusInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ConnectionStatusInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ConnectionStatusInfo, ConnectionStatusInfo.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ConnectionStatusInfo__FieldAccessorTable; }
  }
  
  public const int FWFieldNumber = 1;
  private bool hasFW;
  private int fW_;
  public bool HasFW {
    get { return hasFW; }
  }
  public int FW {
    get { return fW_; }
  }
  
  public const int ConnectionStatusFieldNumber = 2;
  private bool hasConnectionStatus;
  private int connectionStatus_;
  public bool HasConnectionStatus {
    get { return hasConnectionStatus; }
  }
  public int ConnectionStatus {
    get { return connectionStatus_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasFW) return false;
      if (!hasConnectionStatus) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _connectionStatusInfoFieldNames;
    if (hasFW) {
      output.WriteInt32(1, field_names[1], FW);
    }
    if (hasConnectionStatus) {
      output.WriteInt32(2, field_names[0], ConnectionStatus);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasFW) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, FW);
    }
    if (hasConnectionStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, ConnectionStatus);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ConnectionStatusInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ConnectionStatusInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ConnectionStatusInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ConnectionStatusInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ConnectionStatusInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ConnectionStatusInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ConnectionStatusInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ConnectionStatusInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ConnectionStatusInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ConnectionStatusInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ConnectionStatusInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ConnectionStatusInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ConnectionStatusInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ConnectionStatusInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ConnectionStatusInfo result;
    
    private ConnectionStatusInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        ConnectionStatusInfo original = result;
        result = new ConnectionStatusInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ConnectionStatusInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ConnectionStatusInfo.Descriptor; }
    }
    
    public override ConnectionStatusInfo DefaultInstanceForType {
      get { return global::ConnectionStatusInfo.DefaultInstance; }
    }
    
    public override ConnectionStatusInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ConnectionStatusInfo) {
        return MergeFrom((ConnectionStatusInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ConnectionStatusInfo other) {
      if (other == global::ConnectionStatusInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasFW) {
        FW = other.FW;
      }
      if (other.HasConnectionStatus) {
        ConnectionStatus = other.ConnectionStatus;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_connectionStatusInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _connectionStatusInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasFW = input.ReadInt32(ref result.fW_);
            break;
          }
          case 16: {
            result.hasConnectionStatus = input.ReadInt32(ref result.connectionStatus_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasFW {
      get { return result.hasFW; }
    }
    public int FW {
      get { return result.FW; }
      set { SetFW(value); }
    }
    public Builder SetFW(int value) {
      PrepareBuilder();
      result.hasFW = true;
      result.fW_ = value;
      return this;
    }
    public Builder ClearFW() {
      PrepareBuilder();
      result.hasFW = false;
      result.fW_ = 0;
      return this;
    }
    
    public bool HasConnectionStatus {
      get { return result.hasConnectionStatus; }
    }
    public int ConnectionStatus {
      get { return result.ConnectionStatus; }
      set { SetConnectionStatus(value); }
    }
    public Builder SetConnectionStatus(int value) {
      PrepareBuilder();
      result.hasConnectionStatus = true;
      result.connectionStatus_ = value;
      return this;
    }
    public Builder ClearConnectionStatus() {
      PrepareBuilder();
      result.hasConnectionStatus = false;
      result.connectionStatus_ = 0;
      return this;
    }
  }
  static ConnectionStatusInfo() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReturnConnectionStatus : pb::GeneratedMessage<ReturnConnectionStatus, ReturnConnectionStatus.Builder> {
  private ReturnConnectionStatus() { }
  private static readonly ReturnConnectionStatus defaultInstance = new ReturnConnectionStatus().MakeReadOnly();
  private static readonly string[] _returnConnectionStatusFieldNames = new string[] { "ConnectionStatus" };
  private static readonly uint[] _returnConnectionStatusFieldTags = new uint[] { 10 };
  public static ReturnConnectionStatus DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReturnConnectionStatus DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReturnConnectionStatus ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_ReturnConnectionStatus__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReturnConnectionStatus, ReturnConnectionStatus.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_ReturnConnectionStatus__FieldAccessorTable; }
  }
  
  public const int ConnectionStatusFieldNumber = 1;
  private pbc::PopsicleList<global::ConnectionStatusInfo> connectionStatus_ = new pbc::PopsicleList<global::ConnectionStatusInfo>();
  public scg::IList<global::ConnectionStatusInfo> ConnectionStatusList {
    get { return connectionStatus_; }
  }
  public int ConnectionStatusCount {
    get { return connectionStatus_.Count; }
  }
  public global::ConnectionStatusInfo GetConnectionStatus(int index) {
    return connectionStatus_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::ConnectionStatusInfo element in ConnectionStatusList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _returnConnectionStatusFieldNames;
    if (connectionStatus_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], connectionStatus_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::ConnectionStatusInfo element in ConnectionStatusList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReturnConnectionStatus ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnConnectionStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnConnectionStatus ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReturnConnectionStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReturnConnectionStatus ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnConnectionStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReturnConnectionStatus ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReturnConnectionStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReturnConnectionStatus ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReturnConnectionStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReturnConnectionStatus MakeReadOnly() {
    connectionStatus_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReturnConnectionStatus prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReturnConnectionStatus, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReturnConnectionStatus cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReturnConnectionStatus result;
    
    private ReturnConnectionStatus PrepareBuilder() {
      if (resultIsReadOnly) {
        ReturnConnectionStatus original = result;
        result = new ReturnConnectionStatus();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReturnConnectionStatus MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReturnConnectionStatus.Descriptor; }
    }
    
    public override ReturnConnectionStatus DefaultInstanceForType {
      get { return global::ReturnConnectionStatus.DefaultInstance; }
    }
    
    public override ReturnConnectionStatus BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReturnConnectionStatus) {
        return MergeFrom((ReturnConnectionStatus) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReturnConnectionStatus other) {
      if (other == global::ReturnConnectionStatus.DefaultInstance) return this;
      PrepareBuilder();
      if (other.connectionStatus_.Count != 0) {
        result.connectionStatus_.Add(other.connectionStatus_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_returnConnectionStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _returnConnectionStatusFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.connectionStatus_, global::ConnectionStatusInfo.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::ConnectionStatusInfo> ConnectionStatusList {
      get { return PrepareBuilder().connectionStatus_; }
    }
    public int ConnectionStatusCount {
      get { return result.ConnectionStatusCount; }
    }
    public global::ConnectionStatusInfo GetConnectionStatus(int index) {
      return result.GetConnectionStatus(index);
    }
    public Builder SetConnectionStatus(int index, global::ConnectionStatusInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.connectionStatus_[index] = value;
      return this;
    }
    public Builder SetConnectionStatus(int index, global::ConnectionStatusInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.connectionStatus_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddConnectionStatus(global::ConnectionStatusInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.connectionStatus_.Add(value);
      return this;
    }
    public Builder AddConnectionStatus(global::ConnectionStatusInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.connectionStatus_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeConnectionStatus(scg::IEnumerable<global::ConnectionStatusInfo> values) {
      PrepareBuilder();
      result.connectionStatus_.Add(values);
      return this;
    }
    public Builder ClearConnectionStatus() {
      PrepareBuilder();
      result.connectionStatus_.Clear();
      return this;
    }
  }
  static ReturnConnectionStatus() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SendConnectionStatus : pb::GeneratedMessage<SendConnectionStatus, SendConnectionStatus.Builder> {
  private SendConnectionStatus() { }
  private static readonly SendConnectionStatus defaultInstance = new SendConnectionStatus().MakeReadOnly();
  private static readonly string[] _sendConnectionStatusFieldNames = new string[] { "ConnectionStatus", "openid" };
  private static readonly uint[] _sendConnectionStatusFieldTags = new uint[] { 16, 10 };
  public static SendConnectionStatus DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SendConnectionStatus DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SendConnectionStatus ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DNL.internal__static_SendConnectionStatus__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SendConnectionStatus, SendConnectionStatus.Builder> InternalFieldAccessors {
    get { return global::DNL.internal__static_SendConnectionStatus__FieldAccessorTable; }
  }
  
  public const int OpenidFieldNumber = 1;
  private bool hasOpenid;
  private string openid_ = "";
  public bool HasOpenid {
    get { return hasOpenid; }
  }
  public string Openid {
    get { return openid_; }
  }
  
  public const int ConnectionStatusFieldNumber = 2;
  private bool hasConnectionStatus;
  private int connectionStatus_;
  public bool HasConnectionStatus {
    get { return hasConnectionStatus; }
  }
  public int ConnectionStatus {
    get { return connectionStatus_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasOpenid) return false;
      if (!hasConnectionStatus) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sendConnectionStatusFieldNames;
    if (hasOpenid) {
      output.WriteString(1, field_names[1], Openid);
    }
    if (hasConnectionStatus) {
      output.WriteInt32(2, field_names[0], ConnectionStatus);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasOpenid) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Openid);
    }
    if (hasConnectionStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, ConnectionStatus);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SendConnectionStatus ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendConnectionStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendConnectionStatus ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SendConnectionStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SendConnectionStatus ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendConnectionStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SendConnectionStatus ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SendConnectionStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SendConnectionStatus ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SendConnectionStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SendConnectionStatus MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SendConnectionStatus prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SendConnectionStatus, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SendConnectionStatus cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SendConnectionStatus result;
    
    private SendConnectionStatus PrepareBuilder() {
      if (resultIsReadOnly) {
        SendConnectionStatus original = result;
        result = new SendConnectionStatus();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SendConnectionStatus MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SendConnectionStatus.Descriptor; }
    }
    
    public override SendConnectionStatus DefaultInstanceForType {
      get { return global::SendConnectionStatus.DefaultInstance; }
    }
    
    public override SendConnectionStatus BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SendConnectionStatus) {
        return MergeFrom((SendConnectionStatus) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SendConnectionStatus other) {
      if (other == global::SendConnectionStatus.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasOpenid) {
        Openid = other.Openid;
      }
      if (other.HasConnectionStatus) {
        ConnectionStatus = other.ConnectionStatus;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sendConnectionStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sendConnectionStatusFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasOpenid = input.ReadString(ref result.openid_);
            break;
          }
          case 16: {
            result.hasConnectionStatus = input.ReadInt32(ref result.connectionStatus_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasOpenid {
      get { return result.hasOpenid; }
    }
    public string Openid {
      get { return result.Openid; }
      set { SetOpenid(value); }
    }
    public Builder SetOpenid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOpenid = true;
      result.openid_ = value;
      return this;
    }
    public Builder ClearOpenid() {
      PrepareBuilder();
      result.hasOpenid = false;
      result.openid_ = "";
      return this;
    }
    
    public bool HasConnectionStatus {
      get { return result.hasConnectionStatus; }
    }
    public int ConnectionStatus {
      get { return result.ConnectionStatus; }
      set { SetConnectionStatus(value); }
    }
    public Builder SetConnectionStatus(int value) {
      PrepareBuilder();
      result.hasConnectionStatus = true;
      result.connectionStatus_ = value;
      return this;
    }
    public Builder ClearConnectionStatus() {
      PrepareBuilder();
      result.hasConnectionStatus = false;
      result.connectionStatus_ = 0;
      return this;
    }
  }
  static SendConnectionStatus() {
    object.ReferenceEquals(global::DNL.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
