// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class Business {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_IntegralBusiness__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::IntegralBusiness, global::IntegralBusiness.Builder> internal__static_IntegralBusiness__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CouponsBusiness__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CouponsBusiness, global::CouponsBusiness.Builder> internal__static_CouponsBusiness__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_RoomCardBusiness__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::RoomCardBusiness, global::RoomCardBusiness.Builder> internal__static_RoomCardBusiness__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_Result__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::Result, global::Result.Builder> internal__static_Result__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_RequestUserInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::RequestUserInfo, global::RequestUserInfo.Builder> internal__static_RequestUserInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ResponseUserInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ResponseUserInfo, global::ResponseUserInfo.Builder> internal__static_ResponseUserInfo__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static Business() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg5CdXNpbmVzcy5wcm90byJGChBJbnRlZ3JhbEJ1c2luZXNzEhIKCmJ1c2lu", 
          "ZXNzSUQYASACKAkSDgoGdXNlcklEGAIgAigJEg4KBmNvdW50cxgDIAIoBSJF", 
          "Cg9Db3Vwb25zQnVzaW5lc3MSEgoKYnVzaW5lc3NJRBgBIAIoCRIOCgZ1c2Vy", 
          "SUQYAiACKAkSDgoGY291bnRzGAMgAigFIkYKEFJvb21DYXJkQnVzaW5lc3MS", 
          "EgoKYnVzaW5lc3NJRBgBIAIoCRIOCgZ1c2VySUQYAiACKAkSDgoGY291bnRz", 
          "GAMgAigFIikKBlJlc3VsdBIOCgZzdGF0dXMYASACKAUSDwoHbWVzc2FnZRgC", 
          "IAIoCSIhCg9SZXF1ZXN0VXNlckluZm8SDgoGdXNlcklEGAEgAigJIlcKEFJl", 
          "c3BvbnNlVXNlckluZm8SDgoGdXNlcklEGAEgAigJEhAKCGludGVncmFsGAIg", 
        "ASgBEg8KB2NvdXBvbnMYAyABKAESEAoIcm9vbUNhcmQYBCABKAU="));
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_IntegralBusiness__Descriptor = Descriptor.MessageTypes[0];
      internal__static_IntegralBusiness__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::IntegralBusiness, global::IntegralBusiness.Builder>(internal__static_IntegralBusiness__Descriptor,
              new string[] { "BusinessID", "UserID", "Counts", });
      internal__static_CouponsBusiness__Descriptor = Descriptor.MessageTypes[1];
      internal__static_CouponsBusiness__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CouponsBusiness, global::CouponsBusiness.Builder>(internal__static_CouponsBusiness__Descriptor,
              new string[] { "BusinessID", "UserID", "Counts", });
      internal__static_RoomCardBusiness__Descriptor = Descriptor.MessageTypes[2];
      internal__static_RoomCardBusiness__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::RoomCardBusiness, global::RoomCardBusiness.Builder>(internal__static_RoomCardBusiness__Descriptor,
              new string[] { "BusinessID", "UserID", "Counts", });
      internal__static_Result__Descriptor = Descriptor.MessageTypes[3];
      internal__static_Result__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::Result, global::Result.Builder>(internal__static_Result__Descriptor,
              new string[] { "Status", "Message", });
      internal__static_RequestUserInfo__Descriptor = Descriptor.MessageTypes[4];
      internal__static_RequestUserInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::RequestUserInfo, global::RequestUserInfo.Builder>(internal__static_RequestUserInfo__Descriptor,
              new string[] { "UserID", });
      internal__static_ResponseUserInfo__Descriptor = Descriptor.MessageTypes[5];
      internal__static_ResponseUserInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ResponseUserInfo, global::ResponseUserInfo.Builder>(internal__static_ResponseUserInfo__Descriptor,
              new string[] { "UserID", "Integral", "Coupons", "RoomCard", });
      return null;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        }, assigner);
  }
  #endregion
  
}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class IntegralBusiness : pb::GeneratedMessage<IntegralBusiness, IntegralBusiness.Builder> {
  private IntegralBusiness() { }
  private static readonly IntegralBusiness defaultInstance = new IntegralBusiness().MakeReadOnly();
  private static readonly string[] _integralBusinessFieldNames = new string[] { "businessID", "counts", "userID" };
  private static readonly uint[] _integralBusinessFieldTags = new uint[] { 10, 24, 18 };
  public static IntegralBusiness DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override IntegralBusiness DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override IntegralBusiness ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Business.internal__static_IntegralBusiness__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<IntegralBusiness, IntegralBusiness.Builder> InternalFieldAccessors {
    get { return global::Business.internal__static_IntegralBusiness__FieldAccessorTable; }
  }
  
  public const int BusinessIDFieldNumber = 1;
  private bool hasBusinessID;
  private string businessID_ = "";
  public bool HasBusinessID {
    get { return hasBusinessID; }
  }
  public string BusinessID {
    get { return businessID_; }
  }
  
  public const int UserIDFieldNumber = 2;
  private bool hasUserID;
  private string userID_ = "";
  public bool HasUserID {
    get { return hasUserID; }
  }
  public string UserID {
    get { return userID_; }
  }
  
  public const int CountsFieldNumber = 3;
  private bool hasCounts;
  private int counts_;
  public bool HasCounts {
    get { return hasCounts; }
  }
  public int Counts {
    get { return counts_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasBusinessID) return false;
      if (!hasUserID) return false;
      if (!hasCounts) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _integralBusinessFieldNames;
    if (hasBusinessID) {
      output.WriteString(1, field_names[0], BusinessID);
    }
    if (hasUserID) {
      output.WriteString(2, field_names[2], UserID);
    }
    if (hasCounts) {
      output.WriteInt32(3, field_names[1], Counts);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasBusinessID) {
      size += pb::CodedOutputStream.ComputeStringSize(1, BusinessID);
    }
    if (hasUserID) {
      size += pb::CodedOutputStream.ComputeStringSize(2, UserID);
    }
    if (hasCounts) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Counts);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static IntegralBusiness ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static IntegralBusiness ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static IntegralBusiness ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static IntegralBusiness ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static IntegralBusiness ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static IntegralBusiness ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static IntegralBusiness ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static IntegralBusiness ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static IntegralBusiness ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static IntegralBusiness ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private IntegralBusiness MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(IntegralBusiness prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<IntegralBusiness, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(IntegralBusiness cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private IntegralBusiness result;
    
    private IntegralBusiness PrepareBuilder() {
      if (resultIsReadOnly) {
        IntegralBusiness original = result;
        result = new IntegralBusiness();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override IntegralBusiness MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::IntegralBusiness.Descriptor; }
    }
    
    public override IntegralBusiness DefaultInstanceForType {
      get { return global::IntegralBusiness.DefaultInstance; }
    }
    
    public override IntegralBusiness BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is IntegralBusiness) {
        return MergeFrom((IntegralBusiness) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(IntegralBusiness other) {
      if (other == global::IntegralBusiness.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBusinessID) {
        BusinessID = other.BusinessID;
      }
      if (other.HasUserID) {
        UserID = other.UserID;
      }
      if (other.HasCounts) {
        Counts = other.Counts;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_integralBusinessFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _integralBusinessFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasBusinessID = input.ReadString(ref result.businessID_);
            break;
          }
          case 18: {
            result.hasUserID = input.ReadString(ref result.userID_);
            break;
          }
          case 24: {
            result.hasCounts = input.ReadInt32(ref result.counts_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBusinessID {
      get { return result.hasBusinessID; }
    }
    public string BusinessID {
      get { return result.BusinessID; }
      set { SetBusinessID(value); }
    }
    public Builder SetBusinessID(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasBusinessID = true;
      result.businessID_ = value;
      return this;
    }
    public Builder ClearBusinessID() {
      PrepareBuilder();
      result.hasBusinessID = false;
      result.businessID_ = "";
      return this;
    }
    
    public bool HasUserID {
      get { return result.hasUserID; }
    }
    public string UserID {
      get { return result.UserID; }
      set { SetUserID(value); }
    }
    public Builder SetUserID(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUserID = true;
      result.userID_ = value;
      return this;
    }
    public Builder ClearUserID() {
      PrepareBuilder();
      result.hasUserID = false;
      result.userID_ = "";
      return this;
    }
    
    public bool HasCounts {
      get { return result.hasCounts; }
    }
    public int Counts {
      get { return result.Counts; }
      set { SetCounts(value); }
    }
    public Builder SetCounts(int value) {
      PrepareBuilder();
      result.hasCounts = true;
      result.counts_ = value;
      return this;
    }
    public Builder ClearCounts() {
      PrepareBuilder();
      result.hasCounts = false;
      result.counts_ = 0;
      return this;
    }
  }
  static IntegralBusiness() {
    object.ReferenceEquals(global::Business.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CouponsBusiness : pb::GeneratedMessage<CouponsBusiness, CouponsBusiness.Builder> {
  private CouponsBusiness() { }
  private static readonly CouponsBusiness defaultInstance = new CouponsBusiness().MakeReadOnly();
  private static readonly string[] _couponsBusinessFieldNames = new string[] { "businessID", "counts", "userID" };
  private static readonly uint[] _couponsBusinessFieldTags = new uint[] { 10, 24, 18 };
  public static CouponsBusiness DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CouponsBusiness DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CouponsBusiness ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Business.internal__static_CouponsBusiness__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CouponsBusiness, CouponsBusiness.Builder> InternalFieldAccessors {
    get { return global::Business.internal__static_CouponsBusiness__FieldAccessorTable; }
  }
  
  public const int BusinessIDFieldNumber = 1;
  private bool hasBusinessID;
  private string businessID_ = "";
  public bool HasBusinessID {
    get { return hasBusinessID; }
  }
  public string BusinessID {
    get { return businessID_; }
  }
  
  public const int UserIDFieldNumber = 2;
  private bool hasUserID;
  private string userID_ = "";
  public bool HasUserID {
    get { return hasUserID; }
  }
  public string UserID {
    get { return userID_; }
  }
  
  public const int CountsFieldNumber = 3;
  private bool hasCounts;
  private int counts_;
  public bool HasCounts {
    get { return hasCounts; }
  }
  public int Counts {
    get { return counts_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasBusinessID) return false;
      if (!hasUserID) return false;
      if (!hasCounts) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _couponsBusinessFieldNames;
    if (hasBusinessID) {
      output.WriteString(1, field_names[0], BusinessID);
    }
    if (hasUserID) {
      output.WriteString(2, field_names[2], UserID);
    }
    if (hasCounts) {
      output.WriteInt32(3, field_names[1], Counts);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasBusinessID) {
      size += pb::CodedOutputStream.ComputeStringSize(1, BusinessID);
    }
    if (hasUserID) {
      size += pb::CodedOutputStream.ComputeStringSize(2, UserID);
    }
    if (hasCounts) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Counts);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CouponsBusiness ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CouponsBusiness ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CouponsBusiness ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CouponsBusiness ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CouponsBusiness ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CouponsBusiness ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CouponsBusiness ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CouponsBusiness ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CouponsBusiness ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CouponsBusiness ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CouponsBusiness MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CouponsBusiness prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CouponsBusiness, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CouponsBusiness cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CouponsBusiness result;
    
    private CouponsBusiness PrepareBuilder() {
      if (resultIsReadOnly) {
        CouponsBusiness original = result;
        result = new CouponsBusiness();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CouponsBusiness MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CouponsBusiness.Descriptor; }
    }
    
    public override CouponsBusiness DefaultInstanceForType {
      get { return global::CouponsBusiness.DefaultInstance; }
    }
    
    public override CouponsBusiness BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CouponsBusiness) {
        return MergeFrom((CouponsBusiness) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CouponsBusiness other) {
      if (other == global::CouponsBusiness.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBusinessID) {
        BusinessID = other.BusinessID;
      }
      if (other.HasUserID) {
        UserID = other.UserID;
      }
      if (other.HasCounts) {
        Counts = other.Counts;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_couponsBusinessFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _couponsBusinessFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasBusinessID = input.ReadString(ref result.businessID_);
            break;
          }
          case 18: {
            result.hasUserID = input.ReadString(ref result.userID_);
            break;
          }
          case 24: {
            result.hasCounts = input.ReadInt32(ref result.counts_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBusinessID {
      get { return result.hasBusinessID; }
    }
    public string BusinessID {
      get { return result.BusinessID; }
      set { SetBusinessID(value); }
    }
    public Builder SetBusinessID(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasBusinessID = true;
      result.businessID_ = value;
      return this;
    }
    public Builder ClearBusinessID() {
      PrepareBuilder();
      result.hasBusinessID = false;
      result.businessID_ = "";
      return this;
    }
    
    public bool HasUserID {
      get { return result.hasUserID; }
    }
    public string UserID {
      get { return result.UserID; }
      set { SetUserID(value); }
    }
    public Builder SetUserID(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUserID = true;
      result.userID_ = value;
      return this;
    }
    public Builder ClearUserID() {
      PrepareBuilder();
      result.hasUserID = false;
      result.userID_ = "";
      return this;
    }
    
    public bool HasCounts {
      get { return result.hasCounts; }
    }
    public int Counts {
      get { return result.Counts; }
      set { SetCounts(value); }
    }
    public Builder SetCounts(int value) {
      PrepareBuilder();
      result.hasCounts = true;
      result.counts_ = value;
      return this;
    }
    public Builder ClearCounts() {
      PrepareBuilder();
      result.hasCounts = false;
      result.counts_ = 0;
      return this;
    }
  }
  static CouponsBusiness() {
    object.ReferenceEquals(global::Business.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class RoomCardBusiness : pb::GeneratedMessage<RoomCardBusiness, RoomCardBusiness.Builder> {
  private RoomCardBusiness() { }
  private static readonly RoomCardBusiness defaultInstance = new RoomCardBusiness().MakeReadOnly();
  private static readonly string[] _roomCardBusinessFieldNames = new string[] { "businessID", "counts", "userID" };
  private static readonly uint[] _roomCardBusinessFieldTags = new uint[] { 10, 24, 18 };
  public static RoomCardBusiness DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override RoomCardBusiness DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override RoomCardBusiness ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Business.internal__static_RoomCardBusiness__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<RoomCardBusiness, RoomCardBusiness.Builder> InternalFieldAccessors {
    get { return global::Business.internal__static_RoomCardBusiness__FieldAccessorTable; }
  }
  
  public const int BusinessIDFieldNumber = 1;
  private bool hasBusinessID;
  private string businessID_ = "";
  public bool HasBusinessID {
    get { return hasBusinessID; }
  }
  public string BusinessID {
    get { return businessID_; }
  }
  
  public const int UserIDFieldNumber = 2;
  private bool hasUserID;
  private string userID_ = "";
  public bool HasUserID {
    get { return hasUserID; }
  }
  public string UserID {
    get { return userID_; }
  }
  
  public const int CountsFieldNumber = 3;
  private bool hasCounts;
  private int counts_;
  public bool HasCounts {
    get { return hasCounts; }
  }
  public int Counts {
    get { return counts_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasBusinessID) return false;
      if (!hasUserID) return false;
      if (!hasCounts) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _roomCardBusinessFieldNames;
    if (hasBusinessID) {
      output.WriteString(1, field_names[0], BusinessID);
    }
    if (hasUserID) {
      output.WriteString(2, field_names[2], UserID);
    }
    if (hasCounts) {
      output.WriteInt32(3, field_names[1], Counts);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasBusinessID) {
      size += pb::CodedOutputStream.ComputeStringSize(1, BusinessID);
    }
    if (hasUserID) {
      size += pb::CodedOutputStream.ComputeStringSize(2, UserID);
    }
    if (hasCounts) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Counts);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static RoomCardBusiness ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static RoomCardBusiness ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static RoomCardBusiness ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static RoomCardBusiness ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static RoomCardBusiness ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static RoomCardBusiness ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static RoomCardBusiness ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static RoomCardBusiness ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static RoomCardBusiness ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static RoomCardBusiness ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private RoomCardBusiness MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(RoomCardBusiness prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<RoomCardBusiness, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(RoomCardBusiness cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private RoomCardBusiness result;
    
    private RoomCardBusiness PrepareBuilder() {
      if (resultIsReadOnly) {
        RoomCardBusiness original = result;
        result = new RoomCardBusiness();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override RoomCardBusiness MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::RoomCardBusiness.Descriptor; }
    }
    
    public override RoomCardBusiness DefaultInstanceForType {
      get { return global::RoomCardBusiness.DefaultInstance; }
    }
    
    public override RoomCardBusiness BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is RoomCardBusiness) {
        return MergeFrom((RoomCardBusiness) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(RoomCardBusiness other) {
      if (other == global::RoomCardBusiness.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBusinessID) {
        BusinessID = other.BusinessID;
      }
      if (other.HasUserID) {
        UserID = other.UserID;
      }
      if (other.HasCounts) {
        Counts = other.Counts;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_roomCardBusinessFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _roomCardBusinessFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasBusinessID = input.ReadString(ref result.businessID_);
            break;
          }
          case 18: {
            result.hasUserID = input.ReadString(ref result.userID_);
            break;
          }
          case 24: {
            result.hasCounts = input.ReadInt32(ref result.counts_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBusinessID {
      get { return result.hasBusinessID; }
    }
    public string BusinessID {
      get { return result.BusinessID; }
      set { SetBusinessID(value); }
    }
    public Builder SetBusinessID(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasBusinessID = true;
      result.businessID_ = value;
      return this;
    }
    public Builder ClearBusinessID() {
      PrepareBuilder();
      result.hasBusinessID = false;
      result.businessID_ = "";
      return this;
    }
    
    public bool HasUserID {
      get { return result.hasUserID; }
    }
    public string UserID {
      get { return result.UserID; }
      set { SetUserID(value); }
    }
    public Builder SetUserID(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUserID = true;
      result.userID_ = value;
      return this;
    }
    public Builder ClearUserID() {
      PrepareBuilder();
      result.hasUserID = false;
      result.userID_ = "";
      return this;
    }
    
    public bool HasCounts {
      get { return result.hasCounts; }
    }
    public int Counts {
      get { return result.Counts; }
      set { SetCounts(value); }
    }
    public Builder SetCounts(int value) {
      PrepareBuilder();
      result.hasCounts = true;
      result.counts_ = value;
      return this;
    }
    public Builder ClearCounts() {
      PrepareBuilder();
      result.hasCounts = false;
      result.counts_ = 0;
      return this;
    }
  }
  static RoomCardBusiness() {
    object.ReferenceEquals(global::Business.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Result : pb::GeneratedMessage<Result, Result.Builder> {
  private Result() { }
  private static readonly Result defaultInstance = new Result().MakeReadOnly();
  private static readonly string[] _resultFieldNames = new string[] { "message", "status" };
  private static readonly uint[] _resultFieldTags = new uint[] { 18, 8 };
  public static Result DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override Result DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override Result ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Business.internal__static_Result__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<Result, Result.Builder> InternalFieldAccessors {
    get { return global::Business.internal__static_Result__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private int status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public int Status {
    get { return status_; }
  }
  
  public const int MessageFieldNumber = 2;
  private bool hasMessage;
  private string message_ = "";
  public bool HasMessage {
    get { return hasMessage; }
  }
  public string Message {
    get { return message_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasStatus) return false;
      if (!hasMessage) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _resultFieldNames;
    if (hasStatus) {
      output.WriteInt32(1, field_names[1], Status);
    }
    if (hasMessage) {
      output.WriteString(2, field_names[0], Message);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Status);
    }
    if (hasMessage) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Message);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static Result ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Result ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Result ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Result ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Result ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Result ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static Result ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static Result ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static Result ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Result ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private Result MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(Result prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<Result, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(Result cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private Result result;
    
    private Result PrepareBuilder() {
      if (resultIsReadOnly) {
        Result original = result;
        result = new Result();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override Result MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::Result.Descriptor; }
    }
    
    public override Result DefaultInstanceForType {
      get { return global::Result.DefaultInstance; }
    }
    
    public override Result BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is Result) {
        return MergeFrom((Result) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(Result other) {
      if (other == global::Result.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_resultFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _resultFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasStatus = input.ReadInt32(ref result.status_);
            break;
          }
          case 18: {
            result.hasMessage = input.ReadString(ref result.message_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
      get { return result.hasStatus; }
    }
    public int Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(int value) {
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = 0;
      return this;
    }
    
    public bool HasMessage {
      get { return result.hasMessage; }
    }
    public string Message {
      get { return result.Message; }
      set { SetMessage(value); }
    }
    public Builder SetMessage(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMessage = true;
      result.message_ = value;
      return this;
    }
    public Builder ClearMessage() {
      PrepareBuilder();
      result.hasMessage = false;
      result.message_ = "";
      return this;
    }
  }
  static Result() {
    object.ReferenceEquals(global::Business.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class RequestUserInfo : pb::GeneratedMessage<RequestUserInfo, RequestUserInfo.Builder> {
  private RequestUserInfo() { }
  private static readonly RequestUserInfo defaultInstance = new RequestUserInfo().MakeReadOnly();
  private static readonly string[] _requestUserInfoFieldNames = new string[] { "userID" };
  private static readonly uint[] _requestUserInfoFieldTags = new uint[] { 10 };
  public static RequestUserInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override RequestUserInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override RequestUserInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Business.internal__static_RequestUserInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<RequestUserInfo, RequestUserInfo.Builder> InternalFieldAccessors {
    get { return global::Business.internal__static_RequestUserInfo__FieldAccessorTable; }
  }
  
  public const int UserIDFieldNumber = 1;
  private bool hasUserID;
  private string userID_ = "";
  public bool HasUserID {
    get { return hasUserID; }
  }
  public string UserID {
    get { return userID_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasUserID) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _requestUserInfoFieldNames;
    if (hasUserID) {
      output.WriteString(1, field_names[0], UserID);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasUserID) {
      size += pb::CodedOutputStream.ComputeStringSize(1, UserID);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static RequestUserInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static RequestUserInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static RequestUserInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static RequestUserInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static RequestUserInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static RequestUserInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static RequestUserInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static RequestUserInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static RequestUserInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static RequestUserInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private RequestUserInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(RequestUserInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<RequestUserInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(RequestUserInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private RequestUserInfo result;
    
    private RequestUserInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        RequestUserInfo original = result;
        result = new RequestUserInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override RequestUserInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::RequestUserInfo.Descriptor; }
    }
    
    public override RequestUserInfo DefaultInstanceForType {
      get { return global::RequestUserInfo.DefaultInstance; }
    }
    
    public override RequestUserInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is RequestUserInfo) {
        return MergeFrom((RequestUserInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(RequestUserInfo other) {
      if (other == global::RequestUserInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasUserID) {
        UserID = other.UserID;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_requestUserInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _requestUserInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasUserID = input.ReadString(ref result.userID_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasUserID {
      get { return result.hasUserID; }
    }
    public string UserID {
      get { return result.UserID; }
      set { SetUserID(value); }
    }
    public Builder SetUserID(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUserID = true;
      result.userID_ = value;
      return this;
    }
    public Builder ClearUserID() {
      PrepareBuilder();
      result.hasUserID = false;
      result.userID_ = "";
      return this;
    }
  }
  static RequestUserInfo() {
    object.ReferenceEquals(global::Business.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ResponseUserInfo : pb::GeneratedMessage<ResponseUserInfo, ResponseUserInfo.Builder> {
  private ResponseUserInfo() { }
  private static readonly ResponseUserInfo defaultInstance = new ResponseUserInfo().MakeReadOnly();
  private static readonly string[] _responseUserInfoFieldNames = new string[] { "coupons", "integral", "roomCard", "userID" };
  private static readonly uint[] _responseUserInfoFieldTags = new uint[] { 25, 17, 32, 10 };
  public static ResponseUserInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ResponseUserInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ResponseUserInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Business.internal__static_ResponseUserInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ResponseUserInfo, ResponseUserInfo.Builder> InternalFieldAccessors {
    get { return global::Business.internal__static_ResponseUserInfo__FieldAccessorTable; }
  }
  
  public const int UserIDFieldNumber = 1;
  private bool hasUserID;
  private string userID_ = "";
  public bool HasUserID {
    get { return hasUserID; }
  }
  public string UserID {
    get { return userID_; }
  }
  
  public const int IntegralFieldNumber = 2;
  private bool hasIntegral;
  private double integral_;
  public bool HasIntegral {
    get { return hasIntegral; }
  }
  public double Integral {
    get { return integral_; }
  }
  
  public const int CouponsFieldNumber = 3;
  private bool hasCoupons;
  private double coupons_;
  public bool HasCoupons {
    get { return hasCoupons; }
  }
  public double Coupons {
    get { return coupons_; }
  }
  
  public const int RoomCardFieldNumber = 4;
  private bool hasRoomCard;
  private int roomCard_;
  public bool HasRoomCard {
    get { return hasRoomCard; }
  }
  public int RoomCard {
    get { return roomCard_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasUserID) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _responseUserInfoFieldNames;
    if (hasUserID) {
      output.WriteString(1, field_names[3], UserID);
    }
    if (hasIntegral) {
      output.WriteDouble(2, field_names[1], Integral);
    }
    if (hasCoupons) {
      output.WriteDouble(3, field_names[0], Coupons);
    }
    if (hasRoomCard) {
      output.WriteInt32(4, field_names[2], RoomCard);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasUserID) {
      size += pb::CodedOutputStream.ComputeStringSize(1, UserID);
    }
    if (hasIntegral) {
      size += pb::CodedOutputStream.ComputeDoubleSize(2, Integral);
    }
    if (hasCoupons) {
      size += pb::CodedOutputStream.ComputeDoubleSize(3, Coupons);
    }
    if (hasRoomCard) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, RoomCard);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ResponseUserInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ResponseUserInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ResponseUserInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ResponseUserInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ResponseUserInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ResponseUserInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ResponseUserInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ResponseUserInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ResponseUserInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ResponseUserInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ResponseUserInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ResponseUserInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ResponseUserInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ResponseUserInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ResponseUserInfo result;
    
    private ResponseUserInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        ResponseUserInfo original = result;
        result = new ResponseUserInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ResponseUserInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ResponseUserInfo.Descriptor; }
    }
    
    public override ResponseUserInfo DefaultInstanceForType {
      get { return global::ResponseUserInfo.DefaultInstance; }
    }
    
    public override ResponseUserInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ResponseUserInfo) {
        return MergeFrom((ResponseUserInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ResponseUserInfo other) {
      if (other == global::ResponseUserInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasUserID) {
        UserID = other.UserID;
      }
      if (other.HasIntegral) {
        Integral = other.Integral;
      }
      if (other.HasCoupons) {
        Coupons = other.Coupons;
      }
      if (other.HasRoomCard) {
        RoomCard = other.RoomCard;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_responseUserInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _responseUserInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasUserID = input.ReadString(ref result.userID_);
            break;
          }
          case 17: {
            result.hasIntegral = input.ReadDouble(ref result.integral_);
            break;
          }
          case 25: {
            result.hasCoupons = input.ReadDouble(ref result.coupons_);
            break;
          }
          case 32: {
            result.hasRoomCard = input.ReadInt32(ref result.roomCard_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasUserID {
      get { return result.hasUserID; }
    }
    public string UserID {
      get { return result.UserID; }
      set { SetUserID(value); }
    }
    public Builder SetUserID(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUserID = true;
      result.userID_ = value;
      return this;
    }
    public Builder ClearUserID() {
      PrepareBuilder();
      result.hasUserID = false;
      result.userID_ = "";
      return this;
    }
    
    public bool HasIntegral {
      get { return result.hasIntegral; }
    }
    public double Integral {
      get { return result.Integral; }
      set { SetIntegral(value); }
    }
    public Builder SetIntegral(double value) {
      PrepareBuilder();
      result.hasIntegral = true;
      result.integral_ = value;
      return this;
    }
    public Builder ClearIntegral() {
      PrepareBuilder();
      result.hasIntegral = false;
      result.integral_ = 0D;
      return this;
    }
    
    public bool HasCoupons {
      get { return result.hasCoupons; }
    }
    public double Coupons {
      get { return result.Coupons; }
      set { SetCoupons(value); }
    }
    public Builder SetCoupons(double value) {
      PrepareBuilder();
      result.hasCoupons = true;
      result.coupons_ = value;
      return this;
    }
    public Builder ClearCoupons() {
      PrepareBuilder();
      result.hasCoupons = false;
      result.coupons_ = 0D;
      return this;
    }
    
    public bool HasRoomCard {
      get { return result.hasRoomCard; }
    }
    public int RoomCard {
      get { return result.RoomCard; }
      set { SetRoomCard(value); }
    }
    public Builder SetRoomCard(int value) {
      PrepareBuilder();
      result.hasRoomCard = true;
      result.roomCard_ = value;
      return this;
    }
    public Builder ClearRoomCard() {
      PrepareBuilder();
      result.hasRoomCard = false;
      result.roomCard_ = 0;
      return this;
    }
  }
  static ResponseUserInfo() {
    object.ReferenceEquals(global::Business.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
